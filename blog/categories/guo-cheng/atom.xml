<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 过程 | 聂同学]]></title>
  <link href="http://www.nietongxue.xyz/blog/categories/guo-cheng/atom.xml" rel="self"/>
  <link href="http://www.nietongxue.xyz/"/>
  <updated>2018-01-14T17:30:08+08:00</updated>
  <id>http://www.nietongxue.xyz/</id>
  <author>
    <name><![CDATA[nielinjie]]></name>
    <email><![CDATA[nielinjie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[“驱动者”说]]></title>
    <link href="http://www.nietongxue.xyz/blog/2018/01/14/driver/"/>
    <updated>2018-01-14T23:16:37+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2018/01/14/driver</id>
    <content type="html"><![CDATA[<p>之前<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>谈到“驱动”这个概念。说“驱动”讲的是拆分问题的单位，现在尝试讨论下，什么样的东西，适合用来作为这个驱动者，也就是说，什么样的东西，适合用来拆分问题。</p>

<!-- more -->


<p>之前的我们讲，驱动者是拆分问题的单位，也是应对问题的单位、解决问题、验证解答的单位。就是说，驱动者有两个功能，一是拆分问题，一是推动问题的解决。</p>

<p>拆分问题方面的要求有两个 -</p>

<ol>
<li>拆分本身的质量。拆分要易操作，最好不依赖于个人，有机械的工程方法。拆分的结果要不缺失、不重复，要容易反过来验证是否能组合回到最初的问题<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</li>
<li>拆分出来的子问题的质量。问题要容易定义，容易应对。拆分问题的唯一目的是要让问题变得容易分别应对。如果能通过一些机械方法，直接将子问题映射为一些可以执行的任务，并到达SMART的标准，那可以说是最理想的拆分了。</li>
</ol>


<p>推动问题解决方面，只有一个要求，就是要把解决问题的程度、进度可视化。这一方面相对简单。</p>

<p>下面我们用一两个“驱动”的例子，来看看下这些驱动者在各个方面的表现。</p>

<p>比如我们说测试驱动开发。测试案例就是驱动者，我们看看它是否符合这三个要求 -</p>

<ol>
<li>拆分问题的质量。不太好。从要实现的用户故事，到拆分为的测试案例之间，联系并不明显。从用户故事到测试案例的映射需要程序员的丰富经验，这个过程缺乏机械性。同样的，从测试案例反过来验证组合回用户故事，也是不够直接的。通俗的讲，就是即使我完成了所有分解而来的100个测试案例，我仍然无法直接判定我是否已经满足了用户故事。</li>
<li>定义和应对子问题。比较好。拆分而来的子问题就是设法写出满足测试案例的代码。测试案例确定时，任务的边界也就是确定的。而对于如何写出一个通过测试案例的代码，相对比较可控。</li>
<li>可视化解决程度。不太好。是否能通过测试，作为问题是否解决的标注，一目了然。但这个标准只有0和1，没有中间状态，对进度的表征是不理想的。</li>
</ol>


<p>从上面三点看，第一点比较突出，测试驱动的主要不足在于如何将用户故事稳定可靠地映射为一些测试案例。这时候BDD的理念赶来帮忙了，稍微改进一下测试驱动，将拆分为单元测试案例改为拆分为以软件行为描述的测试案例。行为描述与用户故事之间的分解-组合关系就相对更直接了。至于第三点，进度不好标度，这个问题不是很突出，因为测试驱动分解的任务粒度够小。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="/blog/2017/12/14/d-o/">前一篇：“驱动”与“面向”</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>拆分本身可以讲一大堆，这里不展开。后续可以有一篇专文。<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[“驱动”与“面向”]]></title>
    <link href="http://www.nietongxue.xyz/blog/2017/12/14/d-o/"/>
    <updated>2017-12-14T22:45:56+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2017/12/14/d-o</id>
    <content type="html"><![CDATA[<p>领域驱动、测试驱动、风险驱动；面向对象、面向组件、面向服务。这些说法我们都已经很熟悉了，大家研究的重点往往是其中的那个名词。名词是关键没错，但那已经说得够多了。今天来聊聊其中的动词，“驱动”与“面向”。</p>

<!-- more -->


<p>“驱动”，作用于问题空间，讲的是拆分问题的单位。领域驱动，是以领域结构为依据拆分问题；测试驱动，就是将问题拆分为一个个测试案例，等等。拆分后的小问题，就是应对问题的单位、解决问题、验证解答的单位，这些后续的活动都挂载在这个小问题上，同时这个小问题也是将任务、资源、进度、协同等等这些过程要点牵引起来的那个由头，就像火车头“驱动”着一串车厢一样。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>“面向”，作用于解空间，讲的是构建答案的单位。面向对象，就是以对象作为答案的搭建单元；面向服务，就是以服务作为构建答案的搭建单元。这种单位，往往把整个构建工作分成两部分，先要建造这些单位，然后组合这些单位。就像面向砖瓦的建筑，就分成了制造砖瓦和砌砖。当然过程中可能不只有一种单位，在不同的阶段、不同的层次上有不同的单位，比如服务也是由对象、组件这些单位构成的。</p>

<p>在“问题空间与解空间”<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>这个一般思维框架中，“驱动”与“面向”两个动词，基本上涉及了从问题分析解决的整个过程。</p>

<p>那什么样的东西适于驱动，什么样的东西适于面向呢？正在做一些思考总结，此处先挖坑待填。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>类似的观点在之前的博文中已有谈及，但没有明确谈为什么用“驱动”这个词。——<a href="/blog/filter/filter.html?filterName=series&amp;filterValue=%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E8%BF%87%E7%A8%8B%E7%9A%84%E9%A9%B1%E5%8A%A8%E6%8A%80%E6%9C%AF&amp;filterDes=Series%3A%20%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E8%BF%87%E7%A8%8B%E7%9A%84%E9%A9%B1%E5%8A%A8%E6%8A%80%E6%9C%AF">《架构设计过程的驱动技术》</a>、 <a href="/blog/2016/08/14/question2/">《问题空间与解空间》</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="/blog/2016/08/14/question2/">《问题空间与解空间》</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[问题空间与解空间]]></title>
    <link href="http://www.nietongxue.xyz/blog/2016/08/14/question2/"/>
    <updated>2016-08-14T20:29:27+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2016/08/14/question2</id>
    <content type="html"><![CDATA[<p>问题空间与解空间<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，体现了思考的一般过程，所以在很多方法论中有所表现。</p>

<!--more-->


<p>“设计思维”讲到4D过程，Discovery、Define、Design、Delivery。 其中Discovery、Define就是在研究和结构化问题空间，而Design、Delivery则分别是解决问题和归纳整合，属于解空间。</p>

<p>领域驱动设计方法中，子域与上下文是两个看来近似的概念。其实子域在问题空间，是对领域这个大问题的分解，而上下文在解空间，是对子域的解决。研究上下文的关系，则是在归纳整合，使这些解决能互相融洽，共同解决领域这个大问题。</p>

<p>有一类问题，难点和重点在于分析和分解问题，解决问题倒是比较容易。针对这类问题的方法，自然是强调研究问题空间。</p>

<p>威胁建模方法，是一个很好的例子。数据流图，信任空间，STRIDE模型，都是研究问题空间的方法。找到了可能的威胁之后，还要对威胁进行评估排序，这些都是在问题空间。到最后才谈到解空间，也就是如何解决威胁。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>在<a href="/blog/2016/08/13/question/">前一篇</a>中首先提及。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[架构设计过程的驱动技术（三）]]></title>
    <link href="http://www.nietongxue.xyz/blog/2016/08/13/question/"/>
    <updated>2016-08-13T20:29:27+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2016/08/13/question</id>
    <content type="html"><![CDATA[<p>特征驱动和风险驱动，看来是相对完备的驱动技术；模式驱动，则不是那么完备。
这两类驱动技术的区别究竟从何而来呢？</p>

<!--more-->


<p>大部分人思考问题，特别是比较复杂的问题的过程。分为两个步骤 -</p>

<ul>
<li>第一个步骤，分析问题，定义问题，分解问题，将大问题、复杂的棘手的问题，分解为小的可解决的子问题。这个步骤，我们称为处理问题空间。</li>
<li>第二个步骤，对第一个步骤得到的子问题分别解决，并将所有答案归纳整合，使之可以解决最初的复杂问题。这个步骤，我们成为处理解空间。</li>
</ul>


<p>两个步骤如下图所示。图中ABCD步骤，就是处理问题空间，步骤EFGH则是处理解空间。</p>

<p>显然，模式驱动没有覆盖第一个步骤，只覆盖了第二个步骤。而特征驱动和风险驱动，覆盖了第一第二两个步骤。其中，特征驱动认为实现特征就是我们面对的大问题，提供了分析分解这个大问题的办法，这些方法都是作用于问题空间的方法。而风险驱动认为应对风险就是我们的大问题，提供了定义风险衡量风险等在问题空间方法。</p>

<p><img src="http://www.nietongxue.xyz/images/question/question.png" width="90%"/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[团队发展的三要素]]></title>
    <link href="http://www.nietongxue.xyz/blog/2016/05/02/3h/"/>
    <updated>2016-05-02T11:48:26+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2016/05/02/3h</id>
    <content type="html"><![CDATA[<p>我理解研发团队发展的三要素是：梯队、架构、过程。</p>

<!--more-->


<p>梯队决定了团队的内涵。我们需要怎样的技能？我们有些什么技能和水平的成员？他们如何协调分布，如何流动？我们的个体如何发展？团队如何帮助个体发展并从中受益？</p>

<p>架构决定了团队的结构。特别是应用架构，决定了团队的沟通和协作结构。好的应用架构使团队内聚和解耦，团队能按照自己的特点和节奏发展。</p>

<p>过程决定了团队的效率。效率的提高不仅带来更多的产出，并且会释放团队创造力，改进过程本身，从而带来进一步的效率提升。</p>
]]></content>
  </entry>
  
</feed>
