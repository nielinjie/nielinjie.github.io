<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 过程 | 聂同学]]></title>
  <link href="http://www.nietongxue.xyz/blog/categories/guo-cheng/atom.xml" rel="self"/>
  <link href="http://www.nietongxue.xyz/"/>
  <updated>2017-06-25T16:00:42+08:00</updated>
  <id>http://www.nietongxue.xyz/</id>
  <author>
    <name><![CDATA[nielinjie]]></name>
    <email><![CDATA[nielinjie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[问题空间与解空间]]></title>
    <link href="http://www.nietongxue.xyz/blog/2016/08/14/question2/"/>
    <updated>2016-08-14T20:29:27+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2016/08/14/question2</id>
    <content type="html"><![CDATA[<p>问题空间与解空间<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，体现了思考的一般过程，所以在很多方法论中有所表现。</p>

<!--more-->


<p>“设计思维”讲到4D过程，Discovery、Define、Design、Delivery。 其中Discovery、Define就是在研究和结构化问题空间，而Design、Delivery则分别是解决问题和归纳整合，属于解空间。</p>

<p>领域驱动设计方法中，子域与上下文是两个看来近似的概念。其实子域在问题空间，是对领域这个大问题的分解，而上下文在解空间，是对子域的解决。研究上下文的关系，则是在归纳整合，使这些解决能互相融洽，共同解决领域这个大问题。</p>

<p>有一类问题，难点和重点在于分析和分解问题，解决问题倒是比较容易。针对这类问题的方法，自然是强调研究问题空间。</p>

<p>威胁建模方法，是一个很好的例子。数据流图，信任空间，STRIDE模型，都是研究问题空间的方法。找到了可能的威胁之后，还要对威胁进行评估排序，这些都是在问题空间。到最后才谈到解空间，也就是如何解决威胁。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>在<a href="/blog/2016/08/13/question/">前一篇</a>中首先提及。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[架构设计过程的驱动技术（三）]]></title>
    <link href="http://www.nietongxue.xyz/blog/2016/08/13/question/"/>
    <updated>2016-08-13T20:29:27+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2016/08/13/question</id>
    <content type="html"><![CDATA[<p>特征驱动和风险驱动，看来是相对完备的驱动技术；模式驱动，则不是那么完备。
这两类驱动技术的区别究竟从何而来呢？</p>

<!--more-->


<p>大部分人思考问题，特别是比较复杂的问题的过程。分为两个步骤 -</p>

<ul>
<li>第一个步骤，分析问题，定义问题，分解问题，将大问题、复杂的棘手的问题，分解为小的可解决的子问题。这个步骤，我们称为处理问题空间。</li>
<li>第二个步骤，对第一个步骤得到的子问题分别解决，并将所有答案归纳整合，使之可以解决最初的复杂问题。这个步骤，我们成为处理解空间。</li>
</ul>


<p>两个步骤如下图所示。图中ABCD步骤，就是处理问题空间，步骤EFGH则是处理解空间。</p>

<p>显然，模式驱动没有覆盖第一个步骤，只覆盖了第二个步骤。而特征驱动和风险驱动，覆盖了第一第二两个步骤。其中，特征驱动认为实现特征就是我们面对的大问题，提供了分析分解这个大问题的办法，这些方法都是作用于问题空间的方法。而风险驱动认为应对风险就是我们的大问题，提供了定义风险衡量风险等在问题空间方法。</p>

<p><img src="http://www.nietongxue.xyz/images/question/question.png" width="90%"/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[团队发展的三要素]]></title>
    <link href="http://www.nietongxue.xyz/blog/2016/05/02/3h/"/>
    <updated>2016-05-02T11:48:26+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2016/05/02/3h</id>
    <content type="html"><![CDATA[<p>我理解研发团队发展的三要素是：梯队、架构、过程。</p>

<!--more-->


<p>梯队决定了团队的内涵。我们需要怎样的技能？我们有些什么技能和水平的成员？他们如何协调分布，如何流动？我们的个体如何发展？团队如何帮助个体发展并从中受益？</p>

<p>架构决定了团队的结构。特别是应用架构，决定了团队的沟通和协作结构。好的应用架构使团队内聚和解耦，团队能按照自己的特点和节奏发展。</p>

<p>过程决定了团队的效率。效率的提高不仅带来更多的产出，并且会释放团队创造力，改进过程本身，从而带来进一步的效率提升。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[“程序员需要工程思维”]]></title>
    <link href="http://www.nietongxue.xyz/blog/2016/03/13/quality2/"/>
    <updated>2016-03-13T19:46:06+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2016/03/13/quality2</id>
    <content type="html"><![CDATA[<p>有同学提到工程思维，认为借助传统的建筑、机械工程的思考方式，有助于控制软件工程质量<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。这当然是有益的。</p>

<!--more-->


<p>但我们需要注意，软件系统与传统建筑、机械系统有非常重要的不同。直接借鉴传统的建筑、机械工程思维，很多时候是不足以解决问题的。</p>

<p>最大的不同在于：软件系统不仅是运行着的，而且是演进着的<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。而且这个演进是必需的、积极的、有巨大价值的。这是软件质量控制的独特和真正困难之处。</p>

<p>传统工程一旦产出，产品本身就保持稳定。所以传统质量的定义是描述产出物的特征，符合这个特征的就是好质量，否则就是坏质量。对于特定的产品，质量的定义保持不变。质量控制的方法也以质量定义不变作为前提。</p>

<p>这个办法在软件这里不好用。因为产出物的特征不断变化，质量的定义必须不断变化。所以质量控制方法必须多增加一个维度，即质量定义本身的变化。有了这个维度，问题完全不一样了。</p>

<p>所以，从质量控制这个角度来说，将软件系统比作建筑、机械系统，软件工程比作建筑、机械工程是不理想的。不如把软件系统比作社会系统，把软件工程比作社会的发展演进。软件质量控制，更多的从社会科学领域借鉴方法。比如为了控制社会的有效运行，人类发明了立法、司法、执法等成体系的有效手段，我们可以借鉴，“反脆弱”<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>是个不错的尝试。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://mp.weixin.qq.com/s?__biz=MzI0NjA1NTg0MA==&amp;mid=402605263&amp;idx=1&amp;sn=0490d0de815bef7ac9c61f8c47e0254e&amp;scene=2&amp;srcid=03136ItfAMvAXMJLxllTDEsp&amp;from=timeline&amp;isappinstalled=0#wechat_redirect">为了产品，程序猿请随时加满工程属性</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>“卖出不管”的传统软件这里不讨论。主要讲互联网系统比如SAAS。<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p><a href="/blog/2015/05/23/cloud2/#an">“反脆弱”</a><a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在发展中团队：开发质量问题]]></title>
    <link href="http://www.nietongxue.xyz/blog/2016/01/24/develop-quality/"/>
    <updated>2016-01-24T11:44:37+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2016/01/24/develop-quality</id>
    <content type="html"><![CDATA[<p>随着系统和团队规模逐渐成长，开发质量问题<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>一般有增多趋势。</p>

<!--more-->


<p>错误（包括低级错误）是不能完全避免的。开发人员如何减少错误呢？</p>

<p>有两个方面的事情可以做：</p>

<p>一是依靠团队和合理的过程，相互检查排错。比如结对编程、codereview、代码静态扫描、各种评审会议等等，都是属于这类。</p>

<p>另一个方面，是构建并依靠合理的系统结构。合理的系统结构一来可以分割复杂度，使开发人员面临相对简单的工作，减小错误发生的概率；二来即使错误发生，可以将错误的影响面限制在组件内部，减小全局影响。</p>

<p>可以说前一方面偏于对症治疗，而第二方面偏于对因治疗。对因治疗当然更利于根本性地杜绝错误，但很多时候对症治疗更加直接有效，同时为对因治疗赢得时间和资源。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>这里说的“开发质量问题”，指的是由于局部错误造成的系统问题。特别是那些由开发人员个人错误造成的问题。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
