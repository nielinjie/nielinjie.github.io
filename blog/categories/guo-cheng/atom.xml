<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 过程 | 聂同学]]></title>
  <link href="http://www.nietongxue.xyz/blog/categories/guo-cheng/atom.xml" rel="self"/>
  <link href="http://www.nietongxue.xyz/"/>
  <updated>2019-06-11T15:50:23+08:00</updated>
  <id>http://www.nietongxue.xyz/</id>
  <author>
    <name><![CDATA[nielinjie]]></name>
    <email><![CDATA[nielinjie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[架构的持续演进——总体机制]]></title>
    <link href="http://www.nietongxue.xyz/blog/2019/03/18/arch-model/"/>
    <updated>2019-03-18T14:37:13+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2019/03/18/arch-model</id>
    <content type="html"><![CDATA[<p>架构的持续演进，是系统和团队成长和成功的关键。将有几篇文章来分享一些想法。上一篇（<a href="/blog/2018/09/09/work-dimension/">链接</a>），讲了持续演进架构的组织模式，这一部分，讲讲总体机制设计。</p>

<!-- more-->


<p>要点都体现在最下面的图里（分辨率足够，打开地址可以放大）。以下文字是对图的一些说明。</p>

<h3>两个维度</h3>

<p>两个维度将整个涉及到领域划分为了四个象限。纵向方面，有执行层和治理层两个层面。横向方面，有设计时和运行时的划分。各个象限的负责人和侧重点不同，跨越象限的信息交流可能有相对高的成本。</p>

<h3>五个箭头</h3>

<p>箭头表示的是信息的流向，同时也是影响力的流向。图上箭头标注了序号，与下面的序号对应。</p>

<ol>
<li>架构决策的执行，手段上可以是直接下发设计的详细结果。但在”涌现架构“风格下，更多可能是制定设计守则、确立重构行动项等更有空间的方式。</li>
<li>架构执行的结果在设计时的反馈，可能通过架构治理者的主动review、工具的扫描等手段，对详细设计和系统结构（此时多体现为代码结构）进行观察评价。</li>
<li>通过一些运行时工具和技术组件，采集系统在运行时的特征，包括结构特征和质量指标。比如通过apm工具和log分析工具采集系统容量、性能指标。通过服务发现平台、配置管理平台采集系统间的动态依赖关系等等。</li>
<li>运行时观察到的系统特征，对它的评价和应对，成为架构决策的重要依据。3、4两个箭头，共同组成了架构执行的结果在运行时的反馈。</li>
<li>双向箭头，是具体的架构决策与架构原则架构规划之间的作用。架构决策由架构原则和规划指导，但架构决策的过程中也会将现场诉求反馈到架构原则和规划中，推动原则和规划演进和修正。</li>
</ol>


<h3>三个循环</h3>

<p>上述的五个箭头形成了三个循环。循环是这个机制的要点，只有形成循环，机制才是一个持续运行的机制，才能达到驱动架构持续演进的目的。</p>

<ol>
<li>最大的和最重要的循环，由箭头1、3、4组成，覆盖了整个领域四个象限。体现了系统最终运行时的特征对架构演进的首要驱动作用。</li>
<li>第二个循环，横跨在右边的上下两个象限，由箭头1、2组成。体现了设计时在治理层和执行层的互相影响。</li>
<li>第三个循环，在右下象限，由箭头5完成。体现在治理层内部，架构高层设计也是一个持续演进的过程。</li>
</ol>


<h3>两个角色</h3>

<p>执行层，主要是开发或称现场架构角色来负责。治理层，则是由全局架构角色负责。这里的全局与现场，是相对概念，全局是相对全局，并不是说就一定是整个公司整个系统群。另外，在比较小的团队，两个角色是一个职位也是很有可能的。</p>

<p>（现场架构角色的定义见<a href="/blog/2018/09/09/work-dimension/">前一篇文章</a>。）</p>

<h3>另外</h3>

<p>整个开发过程中，有些活动与图中的活动是有交集的，比如运维/开发同样对运行时指标有密切互动。但这类活动与架构演进的主题关系较弱，图中没有体现。</p>

<p><img src="http://www.nietongxue.xyz/images/arch/do-model.png" width="80%"/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[架构的持续演进——一个组织模式]]></title>
    <link href="http://www.nietongxue.xyz/blog/2018/09/09/work-dimension/"/>
    <updated>2018-09-09T14:37:13+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2018/09/09/work-dimension</id>
    <content type="html"><![CDATA[<p>聊一下架构工作在团队中的组织模式。主要是各个架构角色的分工和协作模式。</p>

<!-- more-->


<p>这个组织模式的指导思想是“涌现的架构”，目标有几个 -</p>

<ol>
<li>架构工作能够系统地持续地运行，无死角地关注到整个开发过程。</li>
<li>加强架构工作的工程程度，降低对架构师个人能力和经验的依赖。</li>
<li>既要满足在空间、时间上的架构一致性基本要求，同时又要防止僵硬的固化流程，支持各团队按各自业务节奏敏捷向前。</li>
</ol>


<p>具体描述体现在下面的图里，可以单独打开放大阅读。</p>

<p><img src="http://www.nietongxue.xyz/images/work/work.png" width="80%"/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[领域驱动作为一种驱动技术]]></title>
    <link href="http://www.nietongxue.xyz/blog/2018/02/04/dd-as-d/"/>
    <updated>2018-02-04T14:35:34+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2018/02/04/dd-as-d</id>
    <content type="html"><![CDATA[<p>之前就“驱动”、“领域驱动”这些主题做了一些讨论，现在看看作为一种架构设计的驱动技术，“领域驱动”有何特点。</p>

<!-- more -->


<p>乍看之下，领域驱动与特征驱动有些关系。那我们就从跟特征驱动的区别说起。</p>

<p>首先，两者的起点是不一样的 -</p>

<ol>
<li>一般来说，特征驱动中所谈的特征，也可以说是“需求”。讲的是需要实现的系统的特征，而不是业务问题本身的特征，需求已经是产品同学（或业务分析同学）的设计结果，体现系统的边界和职责。它已经是对业务问题的部分应对了。</li>
<li>领域驱动所做的，是对业务问题的直接建模与拆分。更多的讲的是业务本身的特征特点，没有涉及到系统，也没有涉及到的系统的边界与职责。</li>
<li>所以两者的起点是不同的。可以说，一个从经过设计的需求开始，一个从未经设计的问题本身开始。</li>
</ol>


<p>其次，通常来讲，特征包括功能、质量、约束。领域驱动几乎完全没涉及到质量、约束方面的特征。功能方面，如前所述，也不是直接对应。</p>

<p>作为一种驱动技术，我们按照对驱动者的一般要求，来看一下领域驱动的能力。</p>

<ol>
<li>首先看拆分问题。DDD维护一个分析模型到设计模型的机械映射，只要拆分分析模型，就完成了问题的拆分。分析模型本身有结构，所以拆分是比较容易的。但是，不论是分析模型，还是其映射而成的设计模型，都很难直接验证。一般只有通过对模型的使用，才能间接验证。</li>
<li>其次看推动问题的解决，由于机械映射的存在，基本上完成了分析模型，就完成了设计模型。大部分的工作，都集中在分析模型方面。而分析模型的完成程度，可以说是很难衡量和可视化的。</li>
</ol>


<p>如上特点，决定了使用领域驱动时的一些注意事项</p>

<ol>
<li>一个系统的架构设计中不能只有领域驱动。领域驱动考虑的只是问题的一部分或者说一个方面。其他方面需要其他驱动技术来考虑。比较典型的是质量方面，比如性能、可用性等。</li>
<li>需要通过对模型的使用来间接验证领域驱动的设计。比如通过功能/UseCase来验证，看这个模型上面能否满足功能的逻辑。而功能/UseCase，通常是依赖于对系统特征的定义。</li>
</ol>


<p>领域驱动与特征驱动，常常伴生。领域驱动在时间、空间上的广度视野，与特征驱动在细节、具体层面的管理能力，可以相互补充。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DDD的D、D、D]]></title>
    <link href="http://www.nietongxue.xyz/blog/2018/01/20/d-d-d/"/>
    <updated>2018-01-20T14:34:51+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2018/01/20/d-d-d</id>
    <content type="html"><![CDATA[<p>DDD就是领域驱动设计，这里想要分别谈一下DDD里面的三个D。兼谈一点我们实际的开发团队的DDD实践活动，我们的收获和教训。</p>

<!-- more -->


<h3>第一个D，说的是领域。</h3>

<p>是识别和定义问题，这个活动交付给下个阶段的交付物是领域模型。我有个比喻说建模就是在知识的液体海洋中析出晶体。在业界的大量讨论中，讲得比较多的是这个晶体是什么样的，而对于如何析出这样的晶体，却较少有讨论。有人讲了敏捷建模<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，但那个也是侧重的是活动安排，不是建模本身的方法论。当然业界也有些建模方法的讨论，比如四色建模法、EventStorm建模法，但这些算是一些局部的方法模式，还没有形成成套路的方法论。</p>

<p>实践中，我们较多的采用功能驱动建模，以功能（或者说UseCase/UseStory）作为起始点，围绕功能提及的业务概念，去逐渐析出周边与之关联的概念。</p>

<p>这里似乎有个“悖论”，我们说领域驱动的好处，就是要跳出功能、迭代的小框框，以更大的时间、空间维度去研究整个业务的总体结构。我们用功能去驱动领域建模，似乎是走回到老路去了。</p>

<p>其实不存在这个悖论，我们举个例子，类比画地图，每个地形采集员他能看到的是当前的一个局部，但这些局部通过地图这个模型逐渐积累起来，再借助一些高层面的观察（比如航拍），就逐渐提供了全局的完备的视野。我们用局部功能去驱动领域建模，也是类似的原理。</p>

<h3>第二个D，说的是驱动。</h3>

<p>我们之前讨论了什么是驱动，什么样的东西适于驱动<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。在DDD的体系中，驱动讲的是MDD，即模型驱动，说的是有一套机械可重复的方法，将领域模型中体现的各个结构，映射为可以解决的问题，也就是可以去开发实现的结构。</p>

<p>实践过程中我们发现。开发团队对第二个D非常敏感，有些同学认为DDD的意义其实就是战术层的一些设计模式，比如工厂、聚合、实体等，认为DDD的存在就是为了“克服贫血的DTO”，使用“充血的实体”。这当然是对DDD的严重误解，完全没有认识到DDD的价值。</p>

<p>就第二个D来说，DDD的好处，要点在“机械、可重复”的映射，这保证了分析与设计的稳定衔接。至于结构性的设计模式，比如聚合、实体这些，只是一个副产物。如果我们能够为这种映射，找到另外一套设计模式，只要能做到“机械、可重复”那也是完全没有问题的。</p>

<p>另外要提醒大家注意的是，这种映射不仅仅是在战术层面，在战略层面同样存在，而且在我们看来具有更为重大的意义。比如子域映射为上下文，上下文之间的关系映射为一些集成模式等等。</p>

<h3>第三个D，说的是设计。</h3>

<p>紧跟着第二个D，领域模型映射出来的就是设计模型。设计模型作为开发实现的依据。</p>

<p>在实际开发过程中，真正做到依据设计模型进行开发实现，并不是一件理所当然的简单事。因为设计模型不是实现模型，这里是需要一个转换的。</p>

<p>为了解决各种问题，陆陆续续会得到各种设计模型。由于这些解决都需要落实到同一个系统中，它们需要在实现时进行综合。这就是解空间上构建实现模型需要做的事情。从DDD来的设计模型，需要跟应对其他问题来的设计模型进行综合，共同导出实现模型。比如在DDD的同时，我们可能还需要应对分布式带来的容错熔断问题，这就要求我们要作的“防腐层”，兼具在演进时和运行时的隔离功能。</p>

<p>在实际开发过程中容易犯的错，一是没有意识到设计模型与实现模型的区别；二是不能做到正确的综合，容易造成实现模型扭曲了设计模型。</p>

<h3>另外</h3>

<p>一个图，一个比喻。</p>

<p><img src="http://www.nietongxue.xyz/images/ddd/ddd.png" width="80%"/></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://agilemodeling.com">http://agilemodeling.com</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="/blog/2018/01/14/driver/">《“驱动者”说》</a>、<a href="/blog/2017/12/14/d-o/">《“驱动”与“面向”》</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[“驱动者”说]]></title>
    <link href="http://www.nietongxue.xyz/blog/2018/01/14/driver/"/>
    <updated>2018-01-14T23:16:37+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2018/01/14/driver</id>
    <content type="html"><![CDATA[<p>之前<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>谈到“驱动”这个概念。说“驱动”讲的是拆分问题的单位，现在尝试讨论下，什么样的东西，适合用来作为这个驱动者，也就是说，什么样的东西，适合用来拆分问题。</p>

<!-- more -->


<p>之前的我们讲，驱动者是拆分问题的单位，也是应对问题的单位、解决问题、验证解答的单位。就是说，驱动者有两个功能，一是拆分问题，一是推动问题的解决。</p>

<p>拆分问题方面的要求有两个 -</p>

<ol>
<li>拆分本身的质量。拆分要易操作，最好不依赖于个人，有机械的工程方法。拆分的结果要不缺失、不重复，要容易反过来验证是否能组合回到最初的问题<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</li>
<li>拆分出来的子问题的质量。问题要容易定义，容易应对。拆分问题的唯一目的是要让问题变得容易分别应对。如果能通过一些机械方法，直接将子问题映射为一些可以执行的任务，并到达SMART的标准，那可以说是最理想的拆分了。</li>
</ol>


<p>推动问题解决方面，只有一个要求，就是要把解决问题的程度、进度可视化。这一方面相对简单。</p>

<p>下面我们用一两个“驱动”的例子，来看看下这些驱动者在各个方面的表现。</p>

<p>比如我们说测试驱动开发。测试案例就是驱动者，我们看看它是否符合这三个要求 -</p>

<ol>
<li>拆分问题的质量。不太好。从要实现的用户故事，到拆分为的测试案例之间，联系并不明显。从用户故事到测试案例的映射需要程序员的丰富经验，这个过程缺乏机械性。同样的，从测试案例反过来验证组合回用户故事，也是不够直接的。通俗的讲，就是即使我完成了所有分解而来的100个测试案例，我仍然无法直接判定我是否已经满足了用户故事。</li>
<li>定义和应对子问题。比较好。拆分而来的子问题就是设法写出满足测试案例的代码。测试案例确定时，任务的边界也就是确定的。而对于如何写出一个通过测试案例的代码，相对比较可控。</li>
<li>可视化解决程度。不太好。是否能通过测试，作为问题是否解决的标注，一目了然。但这个标准只有0和1，没有中间状态，对进度的表征是不理想的。</li>
</ol>


<p>从上面三点看，第一点比较突出，测试驱动的主要不足在于如何将用户故事稳定可靠地映射为一些测试案例。这时候BDD的理念赶来帮忙了，稍微改进一下测试驱动，将拆分为单元测试案例改为拆分为以软件行为描述的测试案例。行为描述与用户故事之间的分解-组合关系就相对更直接了。至于第三点，进度不好标度，这个问题不是很突出，因为测试驱动分解的任务粒度够小。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="/blog/2017/12/14/d-o/">前一篇：“驱动”与“面向”</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>拆分本身可以讲一大堆，这里不展开。后续可以有一篇专文。<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
