<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 敏捷 | 聂同学]]></title>
  <link href="http://www.nietongxue.xyz/blog/categories/min-jie/atom.xml" rel="self"/>
  <link href="http://www.nietongxue.xyz/"/>
  <updated>2018-02-21T12:01:05+08:00</updated>
  <id>http://www.nietongxue.xyz/</id>
  <author>
    <name><![CDATA[nielinjie]]></name>
    <email><![CDATA[nielinjie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[涌现中的架构（三）]]></title>
    <link href="http://www.nietongxue.xyz/blog/2017/06/25/emergence3/"/>
    <updated>2017-06-25T12:56:59+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2017/06/25/emergence3</id>
    <content type="html"><![CDATA[<p>之前有思考过研发团队发展的三个要素<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p>

<p>在敏捷环境中，进一步思考了三个要素和它们之间的关系。<!-- more -->如下面的图所示。</p>

<p>每两个元素之间有关系，每个关系上面有一个词。这个词说的不是关系本身。而说的是，要维持好和改善这个关系，需要思考的关键点。</p>

<p><img src="http://www.nietongxue.xyz/images/emergence/3Factor.png" width="80%"/></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>见之前的博文：<a href="/blog/2016/05/02/3h/">团队发展的三要素</a>。这个博文的视角更多的还是在团队的内部。在全局、跨团队的视角上，三个要素有一些变化。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[涌现中的架构（一）]]></title>
    <link href="http://www.nietongxue.xyz/blog/2017/04/04/emergence/"/>
    <updated>2017-04-04T17:43:06+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2017/04/04/emergence</id>
    <content type="html"><![CDATA[<p>之前对敏捷架构的思考和实践主要在敏捷团队内部<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。这个系列主要探讨在公司级别的敏捷架构实践。</p>

<!--more-->


<p>在实行敏捷风格架构的场景中，各个团队将按照自己的实际情况和各自对架构的理解完成架构活动。</p>

<p>作为全局架构师角色，不再进行提前的统一的架构设计。主要工作集中在对架构活动的辅导、服务和审核。</p>

<p>工作主要在几个方面 -</p>

<ol>
<li><p>架构结果不能相互抵触。</p>

<p>各团队产出各种组件，它们之间必须能够协作。各个团队的设计结果必须遵从协作协议。要么是既有的，要么是及时达成的。</p></li>
<li><p>上层结构需要持续维护。</p>

<p>跨团队的涌现架构需要一些上层结构的支持<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。团队设计的结果随时可能对高层结构产生影响，这时候需要判断这种影响是否是良性的。进而决策是鼓励还是遏制这种影响。</p></li>
<li><p>架构活动需要保持某种一致。</p>

<p>各个团队解决问题的方式需要某种程度的一致性，如果彼此相差太多，就会造成系统难以理解。对演进和传承都有不良的影响。但如果过于强调一致性，又有僵化的趋势，等于走回到计划型架构的老路。</p></li>
<li><p>架构设计有时可能需要干预。</p>

<p>敏捷和涌现的架构是我们的目标。但有些团队可能需要一些帮助才能做到。设计能力方面可能有待提高，认识理念方面可能需要统一。这些团队需要比较频密的干预和辅导。</p></li>
</ol>


<p>几个问题需要在实践中探索 -</p>

<ol>
<li><p>是否要规定架构设计的产出物？</p>

<p>可能需要某种程度的统一产出物，以便全局架构师审核和其他团队参考。</p></li>
<li><p>如何找到合适的沟通时间点？</p>

<p>架构设计会在团队间产生相互影响，当团队的节奏不同时，如何找到对彼此影响较小的时间点？</p></li>
<li><p>是否需要集中的架构研讨会议？</p>

<p>团队间的架构沟通是否可以通过一个集中的会议来减少成本？</p></li>
</ol>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>之前总结的一个系列，时间比较久了。—— <a href="/blog/filter/filter.html?filterName=series&amp;filterValue=%E6%95%8F%E6%8D%B7%E7%9A%84%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1&amp;filterDes=Series%3A%20%E6%95%8F%E6%8D%B7%E7%9A%84%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1">Series: 敏捷的架构设计</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>后续会讨论下这些个结构，其中一个比较明显的可能是：有界上下文。之前也有博文提到过这个结构的应用。—— <a href="/blog/filter/filter.html?filterName=series&amp;filterValue=%E9%87%8D%E6%9E%84%EF%BC%8C%E4%BB%A5%E7%9F%A5%E8%AF%86%E7%BB%93%E6%9E%84%E4%B8%BA%E4%B8%AD%E5%BF%83&amp;filterDes=Series%3A%20%E9%87%8D%E6%9E%84%EF%BC%8C%E4%BB%A5%E7%9F%A5%E8%AF%86%E7%BB%93%E6%9E%84%E4%B8%BA%E4%B8%AD%E5%BF%83">Series: 重构，以知识结构为中心</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[以场景思维辅助风险驱动架构设计]]></title>
    <link href="http://www.nietongxue.xyz/blog/2015/08/13/scenario/"/>
    <updated>2015-08-13T15:15:34+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2015/08/13/scenario</id>
    <content type="html"><![CDATA[<p>“风险驱动架构设计”<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>需要架构师和团队及时发现风险。这一点是依赖团队经验的。这样的依赖常常引发人们的焦虑：是否所有的风险都被及时发现进而处理了？</p>

<p>不用说缺乏相关经验的团队，即使是经验丰富的团队，随着进入陌生的业务领域或技术环境，也不能避免再次陷入到这样的焦虑之中。</p>

<!-- more -->


<p>如何缓解焦虑，建立大家的信心呢？我们做了一些尝试——</p>

<p>每当我们害怕遗漏的时候，我们有个朴素的方法：列出所有可能，一一检视，从中挑出那些需要处理的。</p>

<p>怎么才能列出“所有”可能的工程风险呢？我们尝试的是场景思维：我们以软件工程中常见的场景为线索——</p>

<ul>
<li>系统处理典型需求的场景</li>
<li>发布新功能的场景</li>
<li>业务量发生显著变化的场景</li>
<li>常见故障和应对的场景</li>
</ul>


<p>根据业务领域、技术环境以及团队结构等因素的不同，这些场景中会发生不同的事件。通过虚拟这些场景和其中的事件，一一检视这些事件中可能蕴含的风险，就可以使我们发现风险的工作系统化。</p>

<p>有同学问到：去寻求一个“完整的”风险列表，不是跟“恰如其分的、不完备的”原则矛盾了么？并不是这样的。我们说的要恰如其分和不完备，指的是架构活动不追求全面，而不是说考虑范围不考虑全面。通过场景思维剪除掉不必要应对的风险，以后的架构活动仍然是恰如其分的。</p>

<p>我们可以从另一个角度来概述这件事情——</p>

<p>“不能发现所有风险”这个风险，是我们可能需要应对的第一个风险。如果需要应对，那我们的措施就是“场景思维法”。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="/blog/2014/03/31/aa1/">“风险驱动架构设计”</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[首席程序员负责制]]></title>
    <link href="http://www.nietongxue.xyz/blog/2015/04/25/chief-programmer/"/>
    <updated>2015-04-25T13:40:12+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2015/04/25/chief-programmer</id>
    <content type="html"><![CDATA[<p>&ldquo;首席程序员负责制”是我常向团队推荐的一种敏捷实践。</p>

<!--more-->


<ul>
<li>主要用于成员构成比较复杂的团队。比如编程技能参差不齐、领域熟悉程度不同、责任心和士气有待提升、<s>帮派</s>（大误）等情况。</li>
<li>只有一部分程序员有权力提交代码，称为“首席程序员”，他们对所以提交的代码负责。</li>
<li>其他程序参与除提交代码以外的所有活动。他们产出的代码交给所属的首席程序员处理。</li>
<li>其他程序员合适的时候可以转变为首席程序员。</li>
</ul>


<p><img src="/images/chief/chief.JPG" width="300"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[敏捷的架构设计（六）：领域地图（二）]]></title>
    <link href="http://www.nietongxue.xyz/blog/2014/04/24/aa4/"/>
    <updated>2014-04-24T17:36:38+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2014/04/24/aa4</id>
    <content type="html"><![CDATA[<blockquote><p>敏捷已死，而敏捷性长存。</p></blockquote>

<h3>如何建立领域地图</h3>

<!-- more -->


<p>以下直接转帖“领域地图”工作开始时的kickoff邮件，可以体现我们建立“领域地图”方法的基本思路。</p>

<hr />

<ol>
<li>“领域地图”编制和使用将是一个渐进的和团队参与的过程。地图将逐步进化和完善，于此同时可以使用。</li>
<li>“领域地图”的目的是将系统的领域知识（业务知识）进行整理，使其结构化，为相关工作提供指导。比如：架构设计、包划分……</li>
<li>“领域地图”中的知识来源于：

<ol>
<li>同学们和业务同事的记忆中或者从其他渠道整理的业务知识。</li>
<li>从代码中发掘来的业务知识。</li>
</ol>
</li>
<li>“领域地图”希望展现的是业务概念及其关系。是一个静态的领域模型视图。“功能地图”也是一个领域模型的一个视图，是动态视图。两者保持一致并相互支持和完善。</li>
<li>“领域地图”编制工作要点大致是：

<ol>
<li>工作在“领域地图白板”上进行，就是“英雄联盟白板”<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>的右侧白板。</li>
<li>图上的要素说明如下：

<ol>
<li>紫色矩形：来源于同学们的业务知识（3.a），目前主要来源于SA维护的“功能地图”。</li>
<li>绿色矩形：来源于代码的架构现状。既有可能是从代码发掘的正面的业务知识（3.b），也有可能是系统多年积累来负面现状。</li>
<li>橙色塔形：从i，ii两点综合而来的理想或者说是设计结论，是领域地图的结果。由架构师和开发同学们讨论确立。</li>
<li>紫色和绿色的post上的文字可以是一些词语，也可以是一些描述。橙色的post是结果，一般是一个词语，是英文的，便于指导后续架构和设计工作。</li>
<li>post之间的距离表示概念之间的关系。间隔较小进而重叠的，表示业务概念有较多重合和交互；间隔较远的，表示业务概念分隔明显。</li>
</ol>
</li>
</ol>
</li>
<li>对“领域地图”的使用目前主要体现在代码的结构改进，目标是按领域组织代码。

<ol>
<li>对照橙色塔形和绿色矩形，可以发现现状与理想间的差距，是我们的改进方向，用红色post表示。</li>
<li>从红色的post，产生可衡量可执行的改进任务，用紫色post表示，与“英雄联盟”白板上内部改造需求一致，便于移动到“英雄联盟”上跟进。（虽然与5.b.i中的颜色一样，但内容会很不一样，应该不会混淆。）</li>
<li>在“英雄联盟”白板上，有时会有橙色塔形标注“DM”（domain map）贴在任务卡片上，表示此项任务涉及到的领域知识（业务知识）必须在设计阶段在“领域地图”上体现。（和要求设计复审的符号相似，都是橙色塔形，不过那个上标注“D”）</li>
</ol>
</li>
</ol>


<p><img src="/images/kanban/dm.jpg"></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>该系统敏捷开发过程的用户故事白板。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
