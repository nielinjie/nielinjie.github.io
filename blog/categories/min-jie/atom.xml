<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 敏捷 | 聂同学]]></title>
  <link href="http://nielinjie.github.io/blog/categories/min-jie/atom.xml" rel="self"/>
  <link href="http://nielinjie.github.io/"/>
  <updated>2015-06-07T15:49:32+08:00</updated>
  <id>http://nielinjie.github.io/</id>
  <author>
    <name><![CDATA[nielinjie]]></name>
    <email><![CDATA[nielinjie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[首席程序员负责制]]></title>
    <link href="http://nielinjie.github.io/blog/2015/04/25/chief-programmer/"/>
    <updated>2015-04-25T13:40:12+08:00</updated>
    <id>http://nielinjie.github.io/blog/2015/04/25/chief-programmer</id>
    <content type="html"><![CDATA[<p>&ldquo;首席程序员负责制”是我常向团队推荐的一种敏捷实践。</p>

<!--more-->


<ul>
<li>主要用于成员构成比较复杂的团队。比如编程技能参差不齐、领域熟悉程度不同、责任心和士气有待提升、<s>帮派</s>（大误）等情况。</li>
<li>只有一部分程序员有权力提交代码，称为“首席程序员”，他们对所以提交的代码负责。</li>
<li>其他程序参与除提交代码以外的所有活动。他们产出的代码交给所属的首席程序员处理。</li>
<li>其他程序员合适的时候可以转变为首席程序员。</li>
</ul>


<p><img src="/images/chief/chief.JPG" width="300"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[敏捷的架构设计（六）：领域地图（二）]]></title>
    <link href="http://nielinjie.github.io/blog/2014/04/24/aa4/"/>
    <updated>2014-04-24T17:36:38+08:00</updated>
    <id>http://nielinjie.github.io/blog/2014/04/24/aa4</id>
    <content type="html"><![CDATA[<blockquote><p>敏捷已死，而敏捷性长存。</p></blockquote>

<h3>如何建立领域地图</h3>

<!-- more -->


<p>以下直接转帖“领域地图”工作开始时的kickoff邮件，可以体现我们建立“领域地图”方法的基本思路。</p>

<hr />

<ol>
<li>“领域地图”编制和使用将是一个渐进的和团队参与的过程。地图将逐步进化和完善，于此同时可以使用。</li>
<li>“领域地图”的目的是将系统的领域知识（业务知识）进行整理，使其结构化，为相关工作提供指导。比如：架构设计、包划分……</li>
<li>“领域地图”中的知识来源于：

<ol>
<li>同学们和业务同事的记忆中或者从其他渠道整理的业务知识。</li>
<li>从代码中发掘来的业务知识。</li>
</ol>
</li>
<li>“领域地图”希望展现的是业务概念及其关系。是一个静态的领域模型视图。“功能地图”也是一个领域模型的一个视图，是动态视图。两者保持一致并相互支持和完善。</li>
<li>“领域地图”编制工作要点大致是：

<ol>
<li>工作在“领域地图白板”上进行，就是“英雄联盟白板”<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>的右侧白板。</li>
<li>图上的要素说明如下：

<ol>
<li>紫色矩形：来源于同学们的业务知识（3.a），目前主要来源于SA维护的“功能地图”。</li>
<li>绿色矩形：来源于代码的架构现状。既有可能是从代码发掘的正面的业务知识（3.b），也有可能是系统多年积累来负面现状。</li>
<li>橙色塔形：从i，ii两点综合而来的理想或者说是设计结论，是领域地图的结果。由架构师和开发同学们讨论确立。</li>
<li>紫色和绿色的post上的文字可以是一些词语，也可以是一些描述。橙色的post是结果，一般是一个词语，是英文的，便于指导后续架构和设计工作。</li>
<li>post之间的距离表示概念之间的关系。间隔较小进而重叠的，表示业务概念有较多重合和交互；间隔较远的，表示业务概念分隔明显。</li>
</ol>
</li>
</ol>
</li>
<li>对“领域地图”的使用目前主要体现在代码的结构改进，目标是按领域组织代码。

<ol>
<li>对照橙色塔形和绿色矩形，可以发现现状与理想间的差距，是我们的改进方向，用红色post表示。</li>
<li>从红色的post，产生可衡量可执行的改进任务，用紫色post表示，与“英雄联盟”白板上内部改造需求一致，便于移动到“英雄联盟”上跟进。（虽然与5.b.i中的颜色一样，但内容会很不一样，应该不会混淆。）</li>
<li>在“英雄联盟”白板上，有时会有橙色塔形标注“DM”（domain map）贴在任务卡片上，表示此项任务涉及到的领域知识（业务知识）必须在设计阶段在“领域地图”上体现。（和要求设计复审的符号相似，都是橙色塔形，不过那个上标注“D”）</li>
</ol>
</li>
</ol>


<p><img src="/images/kanban/dm.jpg"></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>该系统敏捷开发过程的用户故事白板。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[敏捷的架构设计（五）：领域地图（一）]]></title>
    <link href="http://nielinjie.github.io/blog/2014/04/24/aa3/"/>
    <updated>2014-04-24T16:36:38+08:00</updated>
    <id>http://nielinjie.github.io/blog/2014/04/24/aa3</id>
    <content type="html"><![CDATA[<blockquote><p>敏捷已死，而敏捷性长存。</p></blockquote>

<h3>什么是“领域地图”？是“领域模型”么？</h3>

<!-- more -->


<p>基本上，就是的。</p>

<p>这是一个历史悠久的系统，历经多年的进化，长久以来团队不知道它的整体需求是怎样的，也缺少有条理的领域知识积累。风险逐渐积累。</p>

<p>现在到了系统整理领域知识，尝试建立领域模型的适当时机——</p>

<ul>
<li>事务脚本风格向领域划分风格的重构<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>已经在重点局部取得了阶段性进展，现在到了推广到全局的时间了。既然是“按领域划分”，我们自然需要一个领域模型作为划分原则。</li>
<li>SA同学正在整理全局“功能地图”、测试同学整理“全量测试案例”，这些东西希望能与代码发生联系，需要一个中枢。在上述的架构风格下，这个中枢只能是领域模型。
我们画了个图来分析领域模型的中枢地位。如后所示。</li>
</ul>


<p>虽然是一种模型，但叫“地图”不叫“模型”——</p>

<ul>
<li>尺度大，粒度大，只有宏观结构没有细节。是对领域的全局鸟瞰，感觉就像是面对地图。</li>
<li>强调它的最高指导意义，类比“军事地图”。感受下。:-D</li>
<li>SA同学的叫做功能“地图”，我们也叫“地图”。</li>
</ul>


<p><img src="/images/kanban/gongneng.png"></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>关于重构有个系列的blog即将写，届时这里换成一个链接……<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[敏捷的架构设计（四）：来提意见]]></title>
    <link href="http://nielinjie.github.io/blog/2014/04/07/aa25/"/>
    <updated>2014-04-07T16:36:38+08:00</updated>
    <id>http://nielinjie.github.io/blog/2014/04/07/aa25</id>
    <content type="html"><![CDATA[<blockquote><p>敏捷已死，而敏捷性长存。</p></blockquote>

<p>在第一块看板前，邀请一些资深同学就这块看板和它背后的“风险驱动的架构设计”方法进行了一些讨论。</p>

<!-- more -->


<p>同学们的意见主要集中在：</p>

<ul>
<li>如何确保没有遗漏的风险？</li>
<li>知识如何积累和传承？</li>
</ul>


<p>第一个问题。很难给出满意的答案。</p>

<p>目前来看，对风险的识别主要靠架构师和开发团队的经验。
如果架构师和团队经验不足，就会有风险遗漏，导致架构设计不能解决所有需要解决的问题，不能满足要求。<br/>
这个问题跟架构设计方法关系不大，不管采用何种架构设计方法，都需要首先发现待解决的问题，再去解决它。
发现问题的阶段，对架构师和团队的经验的依赖是很难避免的。
比如比较传统的三段式架构设计方法<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，是以需求驱动的架构设计方法，要求识别关键功能功能、质量场景等作为待解决的问题。
方法体系中虽然提供了一些工具和指导，但这些识别仍然依赖架构师的经验。</p>

<p>从另一方面讲，应该避免对风险“过度识别”。风险驱动的架构设计隐含了一个重要观点：不需要完备的架构设计。
不完备的架构设计要求掌握好一个度：识别与忽略的度。而“风险”，恰好是掌握这个度的工具。过度识别风险，把不是风险的识别为风险，等于是放弃了这个度的平衡，也就放弃了不完备的架构设计这一核心理念。</p>

<p>回到当前实践中，我们计划采取的措施是：制成一个风险检查清单，随时对照检查，看是或否遗漏，检查清单的来源包括但不限于：<br/>
1. 传统架构设计方法的一些现成知识，比如质量要求检查清单。<br/>
2. 企业中积累的知识，比如规章制度、相似项目的经验教训。</p>

<p>第二个问题。看似容易回答。</p>

<p>这里的“知识”主要指两方面的内容：架构设计的过程和架构设计的结果。
不管是哪个方面，其实并不是所有都需要积累和传承。</p>

<p>我表示计划这样来做：对于每一项风险，我们都执行了一系列的有针对性的架构任务（看板上体现为绿色的卡片），这些卡片的生命周期，其实就是对应的架构设计的过程，这些卡片的产出，其实就是对应的架构设计的结果。
当我们制定任务、绿色卡片生成的时候，我们多考虑一件事情，就是这个卡片的生命要不要记录下来，它的的产出物要不要记录下来。把考虑的结果标记在卡片上，任务完成，卡片存档的时候，我们按照这个标记制定相应地记录就可以了。</p>

<p>有同学对这个办法并不认可，认为知识积累和传承主要满足项目结束后的维护同事需要。从当前团队的角度来考虑某个知识是否需要记录，结果往往会遗漏。
我认为这个担忧有一定道理，但我理解“不完备架构设计”理论对这个问题的观点是：没人知道后来者真正需要什么文档，宁愿他们找不到文档，也不要走上全文档的老路。</p>

<p>实践中，我们会先按上述的计划做，观察一段时间再说。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>请见另一篇博客（搬家未完成……）<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[敏捷的架构设计（三）：第一块看板]]></title>
    <link href="http://nielinjie.github.io/blog/2014/04/03/aa2/"/>
    <updated>2014-04-03T23:36:38+08:00</updated>
    <id>http://nielinjie.github.io/blog/2014/04/03/aa2</id>
    <content type="html"><![CDATA[<blockquote><p>敏捷已死，而敏捷性长存。</p></blockquote>

<p>这是一个架构“普通”的项目。也是第一个系统实践“风险驱动架构设计”的项目。</p>

<!-- more -->


<p>下面介绍一下这个项目的“架构看板”——</p>

<ul>
<li>看板空间分为三列。

<ul>
<li>第一列，红色卡片，放置识别到的风险，包括风险的描述、评价手段、影响程度和优先级等。</li>
<li>第二列，蓝色卡片，放置对策，包括指导原则、注意事项、大致计划、研究的中间结果等。</li>
<li>第三列，绿色卡片，放置可以执行的任务。</li>
</ul>
</li>
<li>看板空间分为多行，每行对应一个风险。它们按处置的优先级排序。</li>
<li>风险会随时被识别出来，来源包括但不限于架构师、开发团队、PO、领导和其他干系人。</li>
<li>所有的风险都会上板，有些会被否决或定为“微不足道”、“容易解决”等，这些被移动到最下方。</li>
<li>任务根据对策制定，必须是可执行、可衡量的。这些任务体现为绿色卡片。</li>
<li>绿色任务卡片，会跟用户故事拆分来的任务卡片一起排优先级，并采用和这些卡片一致的跟进方法。</li>
<li>当绿色任务卡片的状态变化，团队审视红色和蓝色卡片是否需要变化，随着应对措施的进行，对风险认识可能会有改变，对其的对策也可能随之变化。</li>
<li>团队随时可以移动、增减看板上的卡片，只要跟其他人达成共识。</li>
</ul>


<p>看板并不会直接帮助团队发现风险、制定应对措施、完成相关任务。
但看板能够有效地协助团队管理整个架构过程。
是敏捷过程中执行风险驱动架构设计方法的有效手段。</p>

<p><img src="/images/kanban/rd.jpg"></p>
]]></content>
  </entry>
  
</feed>
