<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 开发 | 聂同学]]></title>
  <link href="http://www.nietongxue.xyz/blog/categories/kai-fa/atom.xml" rel="self"/>
  <link href="http://www.nietongxue.xyz/"/>
  <updated>2016-04-03T18:40:08+08:00</updated>
  <id>http://www.nietongxue.xyz/</id>
  <author>
    <name><![CDATA[nielinjie]]></name>
    <email><![CDATA[nielinjie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在发展中团队：开发质量问题]]></title>
    <link href="http://www.nietongxue.xyz/blog/2016/01/24/develop-quality/"/>
    <updated>2016-01-24T11:44:37+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2016/01/24/develop-quality</id>
    <content type="html"><![CDATA[<p>随着系统和团队规模逐渐成长，开发质量问题<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>一般有增多趋势。</p>

<!--more-->


<p>错误（包括低级错误）是不能完全避免的。开发人员如何减少错误呢？</p>

<p>有两个方面的事情可以做：</p>

<p>一是依靠团队和合理的过程，相互检查排错。比如结对编程、codereview、代码静态扫描、各种评审会议等等，都是属于这类。</p>

<p>另一个方面，是构建并依靠合理的系统结构。合理的系统结构一来可以分割复杂度，使开发人员面临相对简单的工作，减小错误发生的概率；二来即使错误发生，可以将错误的影响面限制在组件内部，减小全局影响。</p>

<p>可以说前一方面偏于对症治疗，而第二方面偏于对因治疗。对因治疗当然更利于根本性地杜绝错误，但很多时候对症治疗更加直接有效，同时为对因治疗赢得时间和资源。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>这里说的“开发质量问题”，指的是由于局部错误造成的系统问题。特别是那些由开发人员个人错误造成的问题。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[“别让牛人写代码。”]]></title>
    <link href="http://www.nietongxue.xyz/blog/2015/09/27/nocoolcode/"/>
    <updated>2015-09-27T16:51:48+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2015/09/27/nocoolcode</id>
    <content type="html"><![CDATA[<p>同意。</p>

<!--more-->


<p>牛人写的代码固然威力无穷，奈何太贵。不仅现在贵，将来更贵。</p>

<p>一般人看不懂，改不动，又不敢丢。活活贵死整个团队。</p>

<p>如果有别的办法，不要依赖于牛人写代码。</p>

<p><img src="/images/nocoolcode/nocoolcode.jpg" width="350"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[首席程序员负责制]]></title>
    <link href="http://www.nietongxue.xyz/blog/2015/04/25/chief-programmer/"/>
    <updated>2015-04-25T13:40:12+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2015/04/25/chief-programmer</id>
    <content type="html"><![CDATA[<p>&ldquo;首席程序员负责制”是我常向团队推荐的一种敏捷实践。</p>

<!--more-->


<ul>
<li>主要用于成员构成比较复杂的团队。比如编程技能参差不齐、领域熟悉程度不同、责任心和士气有待提升、<s>帮派</s>（大误）等情况。</li>
<li>只有一部分程序员有权力提交代码，称为“首席程序员”，他们对所以提交的代码负责。</li>
<li>其他程序参与除提交代码以外的所有活动。他们产出的代码交给所属的首席程序员处理。</li>
<li>其他程序员合适的时候可以转变为首席程序员。</li>
</ul>


<p><img src="/images/chief/chief.JPG" width="300"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[知识在此（一）：脑图大开]]></title>
    <link href="http://www.nietongxue.xyz/blog/2014/08/02/pkc/"/>
    <updated>2014-08-02T16:06:38+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2014/08/02/pkc</id>
    <content type="html"><![CDATA[<p><a href="http://pckmmap.duapp.com/" target="_blank">“知识在此：脑图大开”</a> ps：不是“脑洞大开”……</p>

<!-- more -->


<p>这是一个“脑图”工具。</p>

<p>脑图工具是本人一直重度依赖的思考工具。
所以也是<a href="/blog/2014/08/02/pkc0/">“知识在此”</a>系列的第一个工具。</p>

<p>这个工具将按照本人对脑图的需求和期待来改进。大家有任何意见和期待，请给随时我反馈。</p>

<p>目前看到近期的路线图可能是：</p>

<ul>
<li>云端存储和共享。</li>
<li>演示模式。</li>
<li>应用插件。</li>
<li>移动适配。</li>
</ul>


<p><img src="/images/pkc/mm.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[知识在此（零）]]></title>
    <link href="http://www.nietongxue.xyz/blog/2014/08/02/pkc0/"/>
    <updated>2014-08-02T14:06:38+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2014/08/02/pkc0</id>
    <content type="html"><![CDATA[<p>什么是“知识在此”？</p>

<!-- more -->


<p>“知识在此”是我正在致力于的“个人知识管理工具系列”。</p>

<p>在信息爆炸的时代，信息只有经过过滤、整理、归纳才能成为知识。</p>

<p><img src="/images/pkc/ivk.jpg"></p>
]]></content>
  </entry>
  
</feed>
