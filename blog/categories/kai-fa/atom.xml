<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 开发 | 聂同学]]></title>
  <link href="http://nielinjie.github.io/blog/categories/kai-fa/atom.xml" rel="self"/>
  <link href="http://nielinjie.github.io/"/>
  <updated>2014-08-30T14:40:35+08:00</updated>
  <id>http://nielinjie.github.io/</id>
  <author>
    <name><![CDATA[nielinjie]]></name>
    <email><![CDATA[nielinjie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[脑图大开：云端存储]]></title>
    <link href="http://nielinjie.github.io/blog/2014/08/30/pkc-cloud-save/"/>
    <updated>2014-08-30T16:06:38+08:00</updated>
    <id>http://nielinjie.github.io/blog/2014/08/30/pkc-cloud-save</id>
    <content type="html"><![CDATA[<p><a href="http://pckmmap.duapp.com/public/index.html" target="_blank">&ldquo;知识在此：脑图大开&rdquo;</a> ps：不是“脑洞大开”……</p>

<!-- more -->


<p>云端存储功能发布。</p>

<p><img src="/images/pkc/pck_cloud_save.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[知识在此（一）：脑图大开]]></title>
    <link href="http://nielinjie.github.io/blog/2014/08/02/pkc/"/>
    <updated>2014-08-02T16:06:38+08:00</updated>
    <id>http://nielinjie.github.io/blog/2014/08/02/pkc</id>
    <content type="html"><![CDATA[<p><a href="http://pckmmap.duapp.com/public/index.html" target="_blank">&ldquo;知识在此：脑图大开&rdquo;</a> ps：不是“脑洞大开”……</p>

<!-- more -->


<p>这是一个“脑图”工具。</p>

<p>脑图工具是本人一直重度依赖的思考工具。
所以也是<a href="/blog/2014/08/02/pkc0/">“知识在此”</a>系列的第一个工具。</p>

<p>这个工具将按照本人对脑图的需求和期待来改进。大家有任何意见和期待，请给随时我反馈。</p>

<p>目前看到近期的路线图可能是：</p>

<ul>
<li>云端存储和共享。</li>
<li>演示模式。</li>
<li>应用插件。</li>
<li>移动适配。</li>
</ul>


<p><img src="/images/pkc/mm.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[知识在此（零）]]></title>
    <link href="http://nielinjie.github.io/blog/2014/08/02/pkc0/"/>
    <updated>2014-08-02T14:06:38+08:00</updated>
    <id>http://nielinjie.github.io/blog/2014/08/02/pkc0</id>
    <content type="html"><![CDATA[<p>什么是“知识在此”？</p>

<!-- more -->


<p>“知识在此”是我正在致力于的“个人知识管理工具系列”。</p>

<p>在信息爆炸的时代，信息只有经过过滤、整理、归纳才能成为知识。</p>

<p><img src="/images/pkc/ivk.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给老爷爷系统（四）：如何描述系统？（三）]]></title>
    <link href="http://nielinjie.github.io/blog/2014/06/07/view3/"/>
    <updated>2014-06-07T18:06:38+08:00</updated>
    <id>http://nielinjie.github.io/blog/2014/06/07/view3</id>
    <content type="html"><![CDATA[<blockquote><p>这是一个老爷爷系统。</p></blockquote>

<p>这一篇讲讲如何实现的问题。</p>

<!-- more -->


<p>实现方面主要考虑了两个要点：</p>

<ul>
<li>如何构建和维护：要快速地建立和编辑，能够加入版本管理，能够在各方面间共享。</li>
<li>如何展现：各方面要容易地挂载自己的关注点数据，同时跨角色观察的需求要求框架能同时挂载多方面的数据。</li>
</ul>


<p>我们为这两个要点选择了两种不同的形式。</p>

<p>一方面在构建和维护时，特征描述采用纯文本方式，可以说是一种简单地DSL。
DSL文件很方便人和机器阅读，同时放入SCM，实现版本管理和角色间共享。</p>

<p>```
审批/逐个审批</p>

<pre><code>-i 查看签报详细信息
-i 输入审批意见
    -g 使用默认意见
    -g 手工输入意见
    -g 语音输入意见
-i 选择用户
签报
用户
</code></pre>

<p>批量审批</p>

<pre><code>-e 逐个审批
-i 查看待处理文件列表
-i 点击审批按钮
</code></pre>

<p>……
```</p>

<p>另一方面在展现时，我们解析DSL，图形化交互式（并且略显炫酷滴 :-D）地展示。
下面展示的是目前的状况。</p>

<ul>
<li>左边的图，是“系统特征”，由黄色椭圆形表示的领域过程、绿色圆形表示的领域实体，以及他们之间的连线构成。</li>
<li>右边的下拉菜单，是由各方面提供的关注点数据，可以按需要附加到“系统特征”上。比如这个截图上，
左边的图上面有个红色的大圆，就是将代码质量数据叠加上来。还有个深绿色的小点，是将代码结构的数据叠加上来。</li>
<li>除了可以以叠加的方式展示数据，还可以根据关注点数据对图进行过滤。</li>
</ul>


<p><img src="/images/view/view3.png"></p>

<p>最后，代码在此：<a href="http://github.com/nielinjie/developTools">http://github.com/nielinjie/developTools</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给老爷爷系统（三）：如何描述系统？（二）]]></title>
    <link href="http://nielinjie.github.io/blog/2014/06/06/view2/"/>
    <updated>2014-06-06T18:06:38+08:00</updated>
    <id>http://nielinjie.github.io/blog/2014/06/06/view2</id>
    <content type="html"><![CDATA[<blockquote><p>这是一个老爷爷系统。</p></blockquote>

<p>上一篇谈到统一的系统特征描述的形式问题。觉得“功能”或者“领域模型”可能可以承担这个重任。</p>

<!-- more -->


<p>但功能和领域模型都不能直接使用：</p>

<ul>
<li>功能的问题是很难跟代码直接关联起来。</li>
<li>领域模型的问题是只有开发同学熟悉这个概念。SA、测试、开发经理等同学比较熟悉的是“功能”这个概念，
虽然他们对这个概念的定义不尽相同。</li>
</ul>


<p>我们希望我们的特征描述既可以将各方面关注点都联系起来，又可以让各方面都工作在自己熟悉的概念上。
于是我们尝试使用一种二者的混合体。</p>

<ul>
<li>从领域模型出发，以便我们能跟代码产生联系<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。代码非常重要，因为在运行时，代码决定的逻辑基本上是系统的一切。</li>
<li>弱化领域对象的定义，只描述它是否存在和与其他对象的关系<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。领域对象的定义显然是重要的，但我们现在要的是“框架”。</li>
<li>强调领域过程，弱化领域实体。实体常常被认为是分析的结果，看上去和“功能”没有关系，有些方面的同学不关注。</li>
<li>领域过程之间的关系划归为三种：Include、Extend、Generalization<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。</li>
<li>领域过程与实体间，只有一种，引用关系。实体与实体间的关系，不再描述。</li>
</ul>


<p>总的来说，这是领域模型的一种裁剪，或者可能更准确地说法，是一种遮挡：暴露大家的共同关注点，隐藏其他。</p>

<p>（<a href="/blog/2014/06/07/view3">再下篇继续</a>）</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>逻辑按领域结构划分，在这个系统没完全实现：<a href="/blog/2014/06/09/refactory">重构</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>领域模型是一个领域对象的结构，<a href="/blog/2014/06/07/structure">结构的要素</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>没错，跟UML use case图里面的三种关系相同。这并非偶然，我们认为所有的过程之间，都是这三种关系。<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
