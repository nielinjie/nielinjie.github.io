<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 翻译 | 聂同学]]></title>
  <link href="http://nielinjie.github.io/blog/categories/fan-yi/atom.xml" rel="self"/>
  <link href="http://nielinjie.github.io/"/>
  <updated>2015-05-25T17:26:48+08:00</updated>
  <id>http://nielinjie.github.io/</id>
  <author>
    <name><![CDATA[nielinjie]]></name>
    <email><![CDATA[nielinjie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[节选译：迁移至云架构（二）]]></title>
    <link href="http://nielinjie.github.io/blog/2015/05/23/cloud2/"/>
    <updated>2015-05-23T11:15:31+08:00</updated>
    <id>http://nielinjie.github.io/blog/2015/05/23/cloud2</id>
    <content type="html"><![CDATA[<p>原文：<a href="http://pivotal.io/platform-as-a-service/migrating-to-cloud-native-application-architectures-ebook">Migrating to Cloud-Native Application Architectures</a></p>

<p>本文为”节选译“，不是逐句逐段翻译，是意译和无废话译。</p>

<p>（接<a href="/blog/2015/05/23/cloud/">前文</a>）</p>

<!--more-->


<h1>云架构的定义</h1>

<h2><a name="12f"></a>十二因子应用</h2>

<p>“十二因子应用”是一些云架构模式。它们专注于速度、稳定、伸缩，主要包括强调声明性配置、无状态和无共享的横向伸缩进程、全面与部署环境解耦合等方面。当前大量的云平台都为部署十二因子应用优化。</p>

<p>在“十二因子应用”的说法中，“应用”指的是单个部署单元。</p>

<p>十二因子应用表述为：<br/>
（省略，可参见官方中文版：<a href="http://12factor.net/zh_cn/">十二因子应用</a>）</p>

<p>十二因子让应用可以快速部署，因为对环境没有多少要求。对环境没有要求也让云平台可以采用简单一致的机制来自动化地提供新的环境。这是十二因子应用在速度方面的意义。</p>

<p>十二因子也使得应用满足“生命短促”的要求，换句话说我们可以以很小的成本丢弃这些应用。首先应用环境本身完全是可丢弃的，同时应用的状态，不管内存中的还是持久化的，都外化到支持服务中。这就使得应用可以简单地自动化地伸缩。在大多数情况下，平台只要按想要的数量简单拷贝现有的环境然后启动进程就可以了。当需要缩减的时候，只要关闭运行中的进程，然后删除相应地环境就可以了，完全不用备份或者保护这些环境。这是十二因子应用在伸缩方面的意义。</p>

<p>最后，应用的可丢弃性使得平台自动错误恢复非常容易快速。同时，将日志作为事件流大大地帮助了应用状态的可视化。环境的等同、一致的配置机制以及支持服务机制则使得平台能为应用运行的各个方面提供更强大的可视化能力。这是十二因子应用在稳定方面的意义。</p>

<h2><a name="ms"></a>微服务</h2>

<p>微服务代表了将巨大架构业务系统解构为独立可部署的服务。每个服务代表一个业务能力，或者说是产生业务价值的最小原子服务。</p>

<ul>
<li>我们将业务领域解耦为独立可部署的上下文的同时，我们就解耦了相关的变化迭代。当变化被局限在单个的上下文，这些变化可以独立于业务的其他方面。结果就是可以更频繁迅速地落实，从而持续不断地产生价值。</li>
<li>便于加速开发。包括可以投入更多地开发人员。可以将开发人员分开，让他们平行工作，不用过多的交流协作。</li>
<li>新加入的开发人员上手更快，因为他们需要学习的东西更少，需要打交道的团队也更小。</li>
<li>应用新技术可以更容易。在巨大架构应用中应用新技术风险较大，一旦犯错可能拖累整个企业架构。</li>
<li>微服务带来独立有效的伸缩。巨大架构应用也可以伸缩，但要求所有部件一起伸缩，不光是哪些负载重的部件。</li>
</ul>


<h2>敏捷的自助基础设施</h2>

<p>云架构应用的部署与维护往往由开发团队负责。支持自助的平台往往有帮助。</p>

<p>好的平台能为用户建立一个抽象层。在IAAS中，我们通过调用API来建立虚拟服务器、网络、存储，然后应用不同形式的配置和自动化来运行我们的应用和支持服务。平台现在鼓励我们以应用和支持服务的角度思考。</p>

<p>应用代码只是简单地被push到git仓库，平台就开始自动编译打包、建立应用环境、部署应用、启动必要地进程。团队不需要知道代码在哪里运行，也不用知道代码是怎么到那里去的。</p>

<p>支持服务也采用类似的机制。不论需要数据库、消息队列还是邮件服务器，只需要告诉平台你的需求。现在的平台大多提供SQL/NoSQL数据库、消息队列、搜索引擎、缓存等各种重要的支持服务。这些服务的实例可以被绑定到我们应用，必要地使用许可被自动注入到应用中。完全不需要繁琐和容易出错的各种定制。</p>

<p>这些平台还提供各种其他能力：</p>

<ul>
<li>应用实例自动化和按需的伸缩。</li>
<li>应用健康管理。</li>
<li>动态路由和负载均衡。</li>
<li>日志和测量数据的汇总。</li>
</ul>


<p>这一系列的工具保障了团队可以敏捷地开发和运营他们的服务，并且做到快速、稳定、可伸缩。</p>

<h2>基于API的协作</h2>

<p>云架构中，服务之间唯一的交互方式是API，公开发布和有版本的API。通常采用HTTP上的REST风格并使用JSON序列化，但其他协议和序列化方式也完全可以。</p>

<p>团队可以在需要的时候部署新的功能。只要他们不破坏任何既有的API合同，就不用跟其他团队协调同步。跟自助基础设施交互的主要方式也是API，不论新建、伸缩还是维护应用基础设施，都通过API的调用进行。</p>

<p>通过<a href="http://martinfowler.com/articles/consumerDrivenContracts.html">客户驱动合同</a>，交互双方校验合同。服务的消费者不允许访问依赖的实现细节，也不能直接访问它的数据存储。事实上，只有一个服务可以访问它自己的数据存储。这种强制解耦合有利于云架构的速度。</p>

<h2>“反脆弱”</h2>

<p>“反脆弱”并不是指的鲁棒性或弹性。而是指系统在压力下变得更强的特性。什么系统可以做到这个？比如人的免疫系统，暴露的时候变得更强而隔离的时候变得更弱。比如，Netflix Simian Army项目有个Chaos Monkey子模块，通过向生产部件中随机注入错误来寻找架构中的弱点。通过显式地寻找弱点、注入错误、强制修复，架构自然随时间逐渐变强。</p>

<h1>总结</h1>

<p>以下为译者自己总结的 :&ndash;)</p>

<ol>
<li>提出创新时代的四个问题：速度、稳定、伸缩、移动</li>
<li>云架构在这四个问题上大致有何思路。</li>
<li>针对四个问题，云架构有五个措施：十二因子、微服务、自助基础设施、基于API协作、反脆弱</li>
</ol>


<p>（后文继续）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[节选译：迁移至云架构（一）]]></title>
    <link href="http://nielinjie.github.io/blog/2015/05/23/cloud/"/>
    <updated>2015-05-23T11:15:31+08:00</updated>
    <id>http://nielinjie.github.io/blog/2015/05/23/cloud</id>
    <content type="html"><![CDATA[<p>原文：<a href="http://pivotal.io/platform-as-a-service/migrating-to-cloud-native-application-architectures-ebook">Migrating to Cloud-Native Application Architectures</a></p>

<p>本文为”节选译“，不是逐句逐段翻译，是意译和无废话译。</p>

<!--more-->


<h1>云架构的兴起</h1>

<p>创新型公司遇到的问题是：</p>

<ul>
<li>创新的速度</li>
<li>总是可用的服务</li>
<li>Web的伸缩</li>
<li>移动为中心的用户体验</li>
</ul>


<p>迁移到云是一个自然地选择，”云架构“是这些公司获得搅局能力的关键。</p>

<p>“云”指的是：任何计算环境，其中的资源（比如计算、网络、存储等）可以随时按需、自助地提供和释放。</p>

<h2>为什么需要“云架构”？</h2>

<h3>速度</h3>

<p>互联网公司声称每天部署几百次，为何需要频繁部署？如果你可以每天部署几百次，那么你可以几乎实时纠正错误；如果你可以实时纠正错误，那你可以进行更多的试错；如果你可以更多的试错，那你可以进行更广泛地实验。这很可能带来下一个竞争优势。</p>

<p>云基础设施灵活和自助的特性正好满足要求。就提供一个新的应用环境来说，调用一个云服务的API当然比传统流程快得多。再加上可以在持续集成\构建环境中加入钩子和其他联动，可以进一步加快速度。</p>

<h3>稳定</h3>

<p>云架构平衡了快速和稳定、可用、持久。</p>

<p>前面已经提到，云架构提供了迅速纠正错误的能力。注意，这里<strong>不是指防止错误</strong>。</p>

<p>那么我们如何即快速又稳定呢？</p>

<ul>
<li><p>可视化<br/>
我们的架构必须提供工具来及时发现失败。我们需要监测整个系统：定义一个”正常状态“，及时发现偏差，并能找到导致偏差的部件。功能丰富的测量、监控、报警、数据可视化框架和工具是云架构的重要组成部分。</p></li>
<li><p>缺陷隔离<br/>
为了控制失败带来的风险，我们需要限制被失败影响的部件或者特性。如果仅仅因为推荐引擎失效就导致所有人不能买东西，那肯定是灾难性的。单体架构的系统往往是这种情形。云架构系统经常采用”微服务“<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，通过采用微服务构建系统，我们可以把失败限制在单个微服务中。当然，需要”缺陷容忍“特征的配合。</p></li>
<li><p>缺陷容忍<br/>
将系统解构为独立部署的部件还不够。我们还必须防止一个部件中的失败在部件的依赖者中变成一个连环失败。Mike Nygrad描述了<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>几种缺陷容忍的模式，其中最常用的是”断流器“。软件断流器跟电路断流器非常相似：通过断开部件之间的连接来阻止连环失败的产生发展。断流器往往还能在断开的时候提供合适的默认行为。后续会进一步讨论。<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p></li>
<li>自动恢复<br/>
如果发现某些地方有问题，那我们一般简单重启或者重新部署相关的服务。云架构一般不需要人工干预，我们采用自动发现和恢复。<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></li>
</ul>


<h3>伸缩</h3>

<p>当需求增长，我们需要伸展我们的容量来服务需求。以前我们更多地采用纵向伸展：买更强大的服务器。</p>

<p>创新公司使用两个创新性的办法来解决问题：</p>

<ul>
<li>不买强大的服务器，而是把应用实例横向伸展到大量的便宜机器上去。这些机器容易得到而且到位很快。</li>
<li>将没有充分利用的强大服务器虚拟化成多个小服务器，在上面部署独立的负载。</li>
</ul>


<p>当公用云出现，这两个办法得到了发展：虚拟化方面由云供应商来处理，用户专心处理横向伸缩。最近另一个趋势出现：作为应用部署的单元，虚拟服务器正在往“容器”转变。后续进一步讨论。<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></p>

<p>这种转变进一股降低了创新门槛。部署和维护软件的成本都降低了。迎合需求改变软件的速度也非常快。</p>

<p>这些收益的代价就是，我们必须面向横向伸缩来架构我们的应用。云的灵活性要求“生命短促”，不仅要能快速建立应用实例，还必须能快速安全地销毁实例。这是一个“状态管理”的问题，可销毁和可持续性的关系如何？传统的方法比如“集群会话”和“共享文件系统”都不能很好地伸缩。</p>

<p>所以云架构的另一个特点是状态外化，将状态交给外部状态管理服务（比如数据网格、缓存、对象存储等），同时保持应用实例本身是“无状态”的。无状态的应用实例可以快速地创建和销毁，跟外部状态管理服务也可以快速连接和分开，这样就可以快速响应需求的变化。当然这也要求外部状态管理服务本身是可以伸缩的。多数的云服务商已经意识到这一点，提供了很健壮的类似服务。</p>

<h3>移动应用和客户端多样性</h3>

<p>应用需要”随时随地“满足需求。访问成几何级数增长。云架构予以支持。</p>

<p>移动平台是多样化的，移动应用经常需要跟遗留服务或者云中的微服务打交道。这些服务不可能满足各种移动平台的用户的不同需求。将整合多样性的任务交给移动开发会增加网络延迟和流量，带来响应慢和电池消耗。云架构可以将整合任务放到服务器端，比如通过模式”API GateWay"。后续进一步讨论。<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup></p>

<p>（<a href="/blog/2015/05/23/cloud2/">后文继续</a>）</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>见<a href="/blog/2015/05/23/cloud2/#ms">“微服务”</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>书：<em>Release It!</em><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>见“断流器”（链接待建）<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>要求微服务的一些特性，见<a href="/blog/2015/05/23/cloud2/#12f">“十二因子应用”</a>。<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>见“容器化”（链接待建）<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p>见“API GateWay和边界服务“（链接待建）<a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
