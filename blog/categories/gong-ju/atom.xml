<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 工具 | 聂同学]]></title>
  <link href="http://www.nietongxue.xyz/blog/categories/gong-ju/atom.xml" rel="self"/>
  <link href="http://www.nietongxue.xyz/"/>
  <updated>2016-12-21T20:56:34+08:00</updated>
  <id>http://www.nietongxue.xyz/</id>
  <author>
    <name><![CDATA[nielinjie]]></name>
    <email><![CDATA[nielinjie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[给老爷爷系统（四）：如何描述系统？（三）]]></title>
    <link href="http://www.nietongxue.xyz/blog/2014/06/07/view3/"/>
    <updated>2014-06-07T18:06:38+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2014/06/07/view3</id>
    <content type="html"><![CDATA[<blockquote><p>这是一个老爷爷系统。</p></blockquote>

<p>这一篇讲讲如何实现的问题。</p>

<!-- more -->


<p>实现方面主要考虑了两个要点：</p>

<ul>
<li>如何构建和维护：要快速地建立和编辑，能够加入版本管理，能够在各方面间共享。</li>
<li>如何展现：各方面要容易地挂载自己的关注点数据，同时跨角色观察的需求要求框架能同时挂载多方面的数据。</li>
</ul>


<p>我们为这两个要点选择了两种不同的形式。</p>

<p>一方面在构建和维护时，特征描述采用纯文本方式，可以说是一种简单地DSL。
DSL文件很方便人和机器阅读，同时放入SCM，实现版本管理和角色间共享。</p>

<pre><code>审批/逐个审批
    -i 查看签报详细信息
    -i 输入审批意见
        -g 使用默认意见
        -g 手工输入意见
        -g 语音输入意见
    -i 选择用户
    签报
    用户
批量审批
    -e 逐个审批
    -i 查看待处理文件列表
    -i 点击审批按钮
……
</code></pre>

<p>另一方面在展现时，我们解析DSL，图形化交互式（并且略显炫酷滴 :-D）地展示。
下面展示的是目前的状况。</p>

<ul>
<li>左边的图，是“系统特征”，由黄色椭圆形表示的领域过程、绿色圆形表示的领域实体，以及他们之间的连线构成。</li>
<li>右边的下拉菜单，是由各方面提供的关注点数据，可以按需要附加到“系统特征”上。比如这个截图上，
左边的图上面有个红色的大圆，就是将代码质量数据叠加上来。还有个深绿色的小点，是将代码结构的数据叠加上来。</li>
<li>除了可以以叠加的方式展示数据，还可以根据关注点数据对图进行过滤。</li>
</ul>


<p><img src="/images/view/view3.png"></p>

<p>最后，代码在此：<a href="http://github.com/nielinjie/developTools">http://github.com/nielinjie/developTools</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给老爷爷系统（一）：代码质量守则和工具]]></title>
    <link href="http://www.nietongxue.xyz/blog/2014/05/26/quality/"/>
    <updated>2014-05-26T20:06:38+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2014/05/26/quality</id>
    <content type="html"><![CDATA[<blockquote><p>这是一个老爷爷系统。</p></blockquote>

<p>对于一个历史悠久的老爷爷系统，我们的程序员定下了下面的代码质量守则：</p>

<!-- more -->


<ul>
<li>新增方法复杂度不能大于5。</li>
<li>新增类之间不能出现包循环依赖，同层之间可稍微放宽（如Service之间互相调用）。</li>
<li>新增类和方法避免有重复代码，出现重复或者相似度较高的代码应提炼成函数。</li>
<li>过长的方法，新增方法不能过长，代码行数限定在30。</li>
<li>过大的类，新增类不能过大，尽量体现类的单一职责。</li>
<li>变量、方法和类的命名要体现业务含义，不能用如s=5、getString()等命名。</li>
<li>新增方法需编写自动化测试案例。</li>
</ul>


<p>守则里面有很多“新增”，新增类、新增方法。
因为对于老旧的代码，要求它们的质量不具有可操作性。
我们只能期望通过要求新增的代码符合要求，来改善至少是维持整个系统的代码质量。</p>

<p>如果团队比较有野心，可能想在“新增”里面包括“更新”，也就是所有“触碰过”的类和方法。</p>

<p>有了守则我们需要一个检查工具，让程序员可以快速地检查和自检。
但一般的代码扫描工具不能针对“新增、更新”进行扫描，我们需要自己的工具。
工具的要点在于如何找出所谓的“新增的类和方法”、“更新的类和方法”。</p>

<p>基本思路是：</p>

<ul>
<li>先找出版本之间的diff，新增的文件和修改过的文件。

<ul>
<li>比如svn，可以用svn的命令行客户端，也有一些java的api。比如svnKit。</li>
</ul>
</li>
<li>对于新增的文件：

<ul>
<li>parse这个文件，找到所有的类和方法，即可找到所有的“新增的方法和类”。</li>
<li>parse可以使用这个：<a href="https://code.google.com/p/javaparser/wiki/UsingThisParser">https://code.google.com/p/javaparser/wiki/UsingThisParser</a></li>
</ul>
</li>
<li>对于修改的文件：

<ul>
<li>parse新版本，找到所有类和方法的起止位置。</li>
<li>parse方法同上。</li>
<li>对比文件的diff结果（这个是按行号列出的更改），就可以发现新增的、更新过的类和方法。</li>
</ul>
</li>
<li>当新增、更新的类和方法得到以后，再综合代码扫描（扫描新版本）的结果报告。比如findbugs、jdepend……
即可得出新增、更新的类和方法的质量指标了。</li>
</ul>


<p>关键代码在这里：<br/>
<a href="https://gist.github.com/nielinjie/d8fa324ee0d1d149c5e2">https://gist.github.com/nielinjie/d8fa324ee0d1d149c5e2</a></p>
]]></content>
  </entry>
  
</feed>
