<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 语录 | 聂同学]]></title>
  <link href="http://nielinjie.github.io/blog/categories/yu-lu/atom.xml" rel="self"/>
  <link href="http://nielinjie.github.io/"/>
  <updated>2014-03-23T16:20:45+08:00</updated>
  <id>http://nielinjie.github.io/</id>
  <author>
    <name><![CDATA[nielinjie]]></name>
    <email><![CDATA[nielinjie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[语录：关于企业中公用类库和框架的管理]]></title>
    <link href="http://nielinjie.github.io/blog/2013/01/01/said-20130101/"/>
    <updated>2013-01-01T21:36:38+08:00</updated>
    <id>http://nielinjie.github.io/blog/2013/01/01/said-20130101</id>
    <content type="html"><![CDATA[<p>关于企业中公用类库和框架的管理，在微博上与同行讨论，记录如下<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，也是我对公司的P框架的期待。</p>

<!-- more -->


<p>人说孩子要教的人多，管的人少。类库和框架也一样，整个企业都要对他作出贡献，但要有一两个靠谱的人始终负责管理，维护好它的定位、规划好它的方向，平衡好通用和合用、稳定和进化的关系。</p>

<p>我期待中的管理者将采用这样的管理策略——</p>

<ul>
<li><p>新特性应该由任何使用这个库的用户按自己的需要开发并提交；管理者要做的是决定哪些特性并入master流。任何用户也可以维护适应自己需求的流，但这些流都是从master流分支而出。</p></li>
<li><p>创新团队<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>维护自己的流（可能不止一个，按特征簇分开）。其中的新特性由使用者按自己的需求试用。验证后，交由管理者决定是否并入master流。</p></li>
<li><p>master流不一定只有一个，可以按使用模式或特征簇分成多个流。这些流以及它们之间的关系，由管理者定义和维护。</p></li>
<li><p>管理团队并不干预用户对框架的使用模式，由使用现场的架构要求决定。如果使用现场没有特殊要求，则可优先从master流中选择使用模式。</p></li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>有整理，比如去除了一些使讨论通顺的口水话。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>他们推动框架的变化的动机是业界的技术趋势，而不是现场需求。<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[语录：REST]]></title>
    <link href="http://nielinjie.github.io/blog/2012/12/05/said-20121205/"/>
    <updated>2012-12-05T21:36:38+08:00</updated>
    <id>http://nielinjie.github.io/blog/2012/12/05/said-20121205</id>
    <content type="html"><![CDATA[<p>不是REST就别说是REST，可以说是json-rcp，又不丢人。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[语录：架构维护者的职责]]></title>
    <link href="http://nielinjie.github.io/blog/2012/12/03/said-20121203/"/>
    <updated>2012-12-03T21:36:38+08:00</updated>
    <id>http://nielinjie.github.io/blog/2012/12/03/said-20121203</id>
    <content type="html"><![CDATA[<p>目前最优不等于可以接受。架构维护者的职责就是守住一条底线，难点在于这时候你要对抗的往往不是敌人而是战友。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[语录：现有的业务模型来模拟新的业务]]></title>
    <link href="http://nielinjie.github.io/blog/2012/07/10/said-20120710/"/>
    <updated>2012-07-10T21:36:38+08:00</updated>
    <id>http://nielinjie.github.io/blog/2012/07/10/said-20120710</id>
    <content type="html"><![CDATA[<p>工作中的语录：现有的业务模型来模拟新的业务。</p>

<!-- more -->


<p>当系统已有业务模型不能适应新的需求的时候，我们有一种做法，就是用现有的业务模型来模拟新的业务，或者说变通迂回达成新的需求。
这样做对系统修改小（或者无），达成周期也比较短，往往被优先选择。
这样做本身不能说有问题，但我们要注意分析，防止滥用。我理解这样带来一些隐性风险，供参考：</p>

<ul>
<li>系统使用变难，因为有些功能是变通实现的，不够直接，需要专家才能使用。</li>
<li>领域需求越来越复杂，虽然可能功能点比较少，但功能的细节和分支比较多。</li>
<li>这种做法带来的系统修改虽然小，但往往不直接，比较隐晦，容易遗忘和误读。</li>
</ul>

]]></content>
  </entry>
  
</feed>
