<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 架构 | 聂同学]]></title>
  <link href="http://nielinjie.github.io/blog/categories/jia-gou/atom.xml" rel="self"/>
  <link href="http://nielinjie.github.io/"/>
  <updated>2014-04-07T23:39:32+08:00</updated>
  <id>http://nielinjie.github.io/</id>
  <author>
    <name><![CDATA[nielinjie]]></name>
    <email><![CDATA[nielinjie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[敏捷的架构设计（四）：来提意见]]></title>
    <link href="http://nielinjie.github.io/blog/2014/04/07/aa25/"/>
    <updated>2014-04-07T16:36:38+08:00</updated>
    <id>http://nielinjie.github.io/blog/2014/04/07/aa25</id>
    <content type="html"><![CDATA[<blockquote><p>敏捷已死，而敏捷性长存。</p></blockquote>

<p>在第一块看板前，邀请一些资深同学就这块看板和它背后的“风险驱动的架构设计”方法进行了一些讨论。</p>

<!-- more -->


<p>同学们的意见主要集中在：</p>

<ul>
<li>如何确保没有遗漏的风险？</li>
<li>知识如何积累和传承？</li>
</ul>


<p>第一个问题。很难给出满意的答案。</p>

<p>目前来看，对风险的识别主要靠架构师和开发团队的经验。
如果架构师和团队经验不足，就会有风险遗漏，导致架构设计不能解决所有需要解决的问题，不能满足要求。<br/>
这个问题跟架构设计方法关系不大，不管采用何种架构设计方法，都需要首先发现待解决的问题，再去解决它。
发现问题的阶段，对架构师和团队的经验的依赖是很难避免的。
比如比较传统的三段式架构设计方法<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，是以需求驱动的架构设计方法，要求识别关键功能功能、质量场景等作为待解决的问题。
方法体系中虽然提供了一些工具和指导，但这些识别仍然依赖架构师的经验。</p>

<p>从另一方面讲，应该避免对风险“过度识别”。风险驱动的架构设计隐含了一个重要观点：不需要完备的架构设计。
不完备的架构设计要求掌握好一个度：识别与忽略的度。而“风险”，恰好是掌握这个度的工具。过度识别风险，把不是风险的识别为风险，等于是放弃了这个度的平衡，也就放弃了不完备的架构设计这一核心理念。</p>

<p>回到当前实践中，我们计划采取的措施是：制成一个风险检查清单，随时对照检查，看是或否遗漏，检查清单的来源包括但不限于：<br/>
1. 传统架构设计方法的一些现成知识，比如质量要求检查清单。<br/>
2. 企业中积累的知识，比如规章制度、相似项目的经验教训。</p>

<p>第二个问题。看似容易回答。</p>

<p>这里的“知识”主要指两方面的内容：架构设计的过程和架构设计的结果。
不管是哪个方面，其实并不是所有都需要积累和传承。</p>

<p>我表示计划这样来做：对于每一项风险，我们都执行了一系列的有针对性的架构任务（看板上体现为绿色的卡片），这些卡片的生命周期，其实就是对应的架构设计的过程，这些卡片的产出，其实就是对应的架构设计的结果。
当我们制定任务、绿色卡片生成的时候，我们多考虑一件事情，就是这个卡片的生命要不要记录下来，它的的产出物要不要记录下来。把考虑的结果标记在卡片上，任务完成，卡片存档的时候，我们按照这个标记制定相应地记录就可以了。</p>

<p>有同学对这个办法并不认可，认为知识积累和传承主要满足项目结束后的维护同事需要。从当前团队的角度来考虑某个知识是否需要记录，结果往往会遗漏。
我认为这个担忧有一定道理，但我理解“不完备架构设计”理论对这个问题的观点是：没人知道后来者真正需要什么文档，宁愿他们找不到文档，也不要走上全文档的老路。</p>

<p>实践中，我们会先按上述的计划做，观察一段时间再说。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>请见另一篇博客（搬家未完成……）<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[敏捷的架构设计（三）：第一块看板]]></title>
    <link href="http://nielinjie.github.io/blog/2014/04/03/aa2/"/>
    <updated>2014-04-03T23:36:38+08:00</updated>
    <id>http://nielinjie.github.io/blog/2014/04/03/aa2</id>
    <content type="html"><![CDATA[<blockquote><p>敏捷已死，而敏捷性长存。</p></blockquote>

<p>这是一个架构“普通”的项目。也是第一个系统实践“风险驱动架构设计”的项目。</p>

<!-- more -->


<p>下面介绍一下这个项目的“架构看板”——</p>

<ul>
<li>看板空间分为三列。

<ul>
<li>第一列，红色卡片，放置识别到的风险，包括风险的描述、评价手段、影响程度和优先级等。</li>
<li>第二列，蓝色卡片，放置对策，包括指导原则、注意事项、大致计划、研究的中间结果等。</li>
<li>第三列，绿色卡片，放置可以执行的任务。</li>
</ul>
</li>
<li>看板空间分为多行，每行对应一个风险。它们按处置的优先级排序。</li>
<li>风险会随时被识别出来，来源包括但不限于架构师、开发团队、PO、领导和其他干系人。</li>
<li>所有的风险都会上板，有些会被否决或定为“微不足道”、“容易解决”等，这些被移动到最下方。</li>
<li>任务根据对策制定，必须是可执行、可衡量的。这些任务体现为绿色卡片。</li>
<li>绿色任务卡片，会跟用户故事拆分来的任务卡片一起排优先级，并采用和这些卡片一致的跟进方法。</li>
<li>当绿色任务卡片的状态变化，团队审视红色和蓝色卡片是否需要变化，随着应对措施的进行，对风险认识可能会有改变，对其的对策也可能随之变化。</li>
<li>团队随时可以移动、增减看板上的卡片，只要跟其他人达成共识。</li>
</ul>


<p>看板并不会直接帮助团队发现风险、制定应对措施、完成相关任务。
但看板能够有效地协助团队管理整个架构过程。
是敏捷过程中执行风险驱动架构设计方法的有效手段。</p>

<p><img src="/images/kanban/rd.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[敏捷的架构设计（二）：风险驱动]]></title>
    <link href="http://nielinjie.github.io/blog/2014/03/31/aa1/"/>
    <updated>2014-03-31T21:36:38+08:00</updated>
    <id>http://nielinjie.github.io/blog/2014/03/31/aa1</id>
    <content type="html"><![CDATA[<blockquote><p>敏捷已死，而敏捷性长存。</p></blockquote>

<p>何为风险驱动的架构设计？
该方法认为：</p>

<ul>
<li>架构设计的（唯一）目的是应对工程风险。</li>
<li>当且仅当有风险被识别的时候需要考虑是否进行相应的架构设计。</li>
<li>架构设计采用的技术和投入的资源要与对应风险种类和程度相适应。</li>
<li>风险本身或\和对风险的认识会发生改变，相应的架构设计活动也会改变，架构设计结果也会改变。</li>
<li>风险驱动架构设计方法适合敏捷开发过程。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[敏捷的架构设计（一）：自问自答]]></title>
    <link href="http://nielinjie.github.io/blog/2014/03/31/aa/"/>
    <updated>2014-03-31T21:36:38+08:00</updated>
    <id>http://nielinjie.github.io/blog/2014/03/31/aa</id>
    <content type="html"><![CDATA[<blockquote><p>敏捷已死，而敏捷性长存。</p></blockquote>

<p>Q：敏捷开发过程貌似不需要架构设计，不需要架构师角色？<br/>
A：任何开发过程是否需要架构设计，不是由采用什么过程决定的，而是由需要完成的开发任务决定的。
如果开发的系统/软件有架构问题需要解决，不论采用何种开发过程、是否采用敏捷过程，都需要架构设计。
如果需要架构设计，而开发团队不确定有能力进行架构设计，那么团队就需要架构师介入/加入。</p>

<!-- more -->


<p>Q：敏捷过程对架构设计有没有什么特殊要求？<br/>
A：是否需要架构设计并不是由是否敏捷过程决定。但敏捷过程的特点，对架构设计活动有一些要求。<br/>
传统开发过程中，架构设计一般采用“集中式”架构设计方法，即在开发过程的某个阶段，集中完成所有的架构设计。<br/>
这种安排有一个先决条件，就是需求也必须集中完成。架构设计的依据是需求，如果需求不能在架构设计活动之前完成，架构设计就没有依据。
然而敏捷过程没有集中完毕的需求，只有“演进式”需求，需求是逐渐挖掘和显现的。这时的架构设计只能放弃“集中式”，同样也采用“演进式”。</p>

<p>Q：如何处理架构“演进”带来的“额外”成本和风险？<br/>
A：必须就事论事，没有统一答案。有些架构决策，可以尽量前置；有些架构决策，只能随需求逐渐明朗；有些架构决策，需要随时回顾改进。
架构设计不再是一个阶段性、集中处置的大任务，而需要划分成多个任务，按不同情况分别管理跟进。</p>

<p>Q：如何判断何时开始、何时完成、何种程度、哪一部分的架构设计？<br/>
A：“风险驱动架构设计”方法……</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[语录：雪人（三）]]></title>
    <link href="http://nielinjie.github.io/blog/2014/03/30/said-xueren3/"/>
    <updated>2014-03-30T15:36:38+08:00</updated>
    <id>http://nielinjie.github.io/blog/2014/03/30/said-xueren3</id>
    <content type="html"><![CDATA[<p>雪人项目进行得还算顺利。然而你发现兄弟们有些异样，他们常常盯着雪人的肚皮部位自说自话，这两天甚至开始聚在一起窃窃私语。
这些人都是多啦A梦设计风格的铁根粉丝啊，你能感受到设计一个口袋对他们来说是非常巨大的诱惑。
你曾经反复解释口袋有多危险，明令禁止任何设计口袋的企图。然而你知道这些根本无法打消你的担忧：架构走形的风险正如影随形。</p>

<p>这时候你忽然灵光一现，你埋头迅速制造了一个口袋，不是华丽的、未知的、危险的口袋，而是一个简单、简陋、安全、甚至没完全完成的口袋。“啪”，你把口袋拍在雪人肚子上。
你感到世界清净下来。你傻笑，认为自己理解了一个高大上的词语，叫做：“提升至架构的设计”。</p>
]]></content>
  </entry>
  
</feed>
