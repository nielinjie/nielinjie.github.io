<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 架构 | 聂同学]]></title>
  <link href="http://nielinjie.github.io/blog/categories/jia-gou/atom.xml" rel="self"/>
  <link href="http://nielinjie.github.io/"/>
  <updated>2015-04-21T10:55:58+08:00</updated>
  <id>http://nielinjie.github.io/</id>
  <author>
    <name><![CDATA[nielinjie]]></name>
    <email><![CDATA[nielinjie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[质量保障措施参考清单（三）]]></title>
    <link href="http://nielinjie.github.io/blog/2015/04/10/resilient3/"/>
    <updated>2015-04-10T10:18:14+08:00</updated>
    <id>http://nielinjie.github.io/blog/2015/04/10/resilient3</id>
    <content type="html"><![CDATA[<p>（<a href="/blog/2015/04/09/resilient2/">接上篇</a>）</p>

<!-- more -->


<h2>业务正确性和容错性</h2>

<p>系统不仅需要业务功能结果正确，还需要在业务发生问题的时候能够尽量多的提供诊断和恢复支持。</p>

<h3>设计时</h3>

<p>设计时可以识别的设计要求大致有：</p>

<ul>
<li>业务错误可以回查。</li>
<li>业务过程可以回查。</li>
<li>业务操作可以回查。</li>
<li>系统故障情况下业务（一定程度上）可以持续。</li>
</ul>


<p>为满足此要求，需要：</p>

<ul>
<li>定义业务过程、业务状态。</li>
<li>记录业务过程和状态的变化。</li>
<li>为各个状态定义业务备案。</li>
<li>记录业务操作。</li>
</ul>


<h3>业务接入时</h3>

<ul>
<li>业务被误用。

<ul>
<li>明确的业务定位</li>
</ul>
</li>
<li>系统之间业务状态不正确或不明确。

<ul>
<li>记录业务进出口状态。</li>
</ul>
</li>
</ul>


<h3>日常趋势</h3>

<ul>
<li>事故趋势恶化

<ul>
<li>业务逻辑有问题？</li>
<li>用户体验有问题？

<ul>
<li>用户体验数据</li>
</ul>
</li>
<li>需要事故记录</li>
</ul>
</li>
</ul>


<h3>事故时</h3>

<ul>
<li>系统操作中断，比如可用性事故引起。

<ul>
<li>需要各个状态定义业务备案。</li>
</ul>
</li>
<li>事后发现业务结果不正确。

<ul>
<li>记录业务过程状态变化。</li>
</ul>
</li>
<li>系统错误

<ul>
<li>大范围错误 &ndash; 归结为<a href="/blog/2015/04/09/resilient2/">可用性事故</a>。</li>
<li>局部错误 &ndash; 归结为bug。</li>
<li>需要系统错误率实时监控和报警。</li>
<li>需要系统错误持续记录和分析。</li>
</ul>
</li>
</ul>


<h3>小结</h3>

<p>综上，为持续保障系统正确性，需要采取的措施有：</p>

<ul>
<li><strong>明确的业务定位。</strong>以及定期review。</li>
<li><strong>定义各个业务过程、业务状态。</strong></li>
<li><strong>业务过程和业务状态的变化的记录。</strong></li>
<li><strong>各个状态定义业务备案。</strong></li>
<li><strong>业务操作的记录。</strong></li>
<li><strong>业务进出口状态的记录。</strong></li>
<li><strong>用户体验数据持续记录和分析。</strong></li>
<li><strong>系统错误率持续监控和阙值报警。</strong></li>
<li><strong>系统错误持续记录和分析。</strong></li>
<li><strong>事故记录与分析。</strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[质量保障措施参考清单（二）]]></title>
    <link href="http://nielinjie.github.io/blog/2015/04/10/resilient2/"/>
    <updated>2015-04-10T10:18:14+08:00</updated>
    <id>http://nielinjie.github.io/blog/2015/04/10/resilient2</id>
    <content type="html"><![CDATA[<p>（<a href="/blog/2015/04/09/resilient/">接上篇</a>）</p>

<!-- more -->


<h2>可用性</h2>

<p>可用性风险通常比较被重视，企业默认架构中往往有较多应对措施。而且很多可用性风险与<a href="/blog/2015/04/09/resilient/">性能与容量风险</a>有关，所以这里总结的风险和保障措施显得比较少。</p>

<h3>设计时</h3>

<p>企业默认架构中一般包含可用性的基本应对：</p>

<ul>
<li>HA方案，比如热备冷备及相关切换方案等。</li>
<li>容灾方案</li>
</ul>


<h3>业务接入时</h3>

<p>一般不会产生可用性风险。除非超过系统容量造成系统不可用。这个风险<a href="/blog/2015/04/09/resilient/">在“性能与容量”部分讨论</a>。</p>

<h3>日常趋势</h3>

<ul>
<li>事故趋势恶化。</li>
<li>资源消耗异常。（<a href="/blog/2015/04/09/resilient/">在“性能与容量”部分讨论</a>。）</li>
</ul>


<h3>事故时</h3>

<p>可用性事故一般有：</p>

<ul>
<li>系统失去响应

<ul>
<li>容量问题造成的。（<a href="/blog/2015/04/09/resilient/">在“性能与容量”部分讨论</a>。）</li>
<li>某个（某些）节点失去响应造成。

<ul>
<li>需要各节点可用性数据。</li>
<li>节点可拔插。</li>
</ul>
</li>
</ul>
</li>
<li>系统大范围报错

<ul>
<li>诊断用现场实时数据。（<a href="/blog/2015/04/09/resilient/">在“性能与容量”部分讨论</a>。）</li>
</ul>
</li>
</ul>


<p>为及时发现可用性事故，我们需要：</p>

<ul>
<li>可用性数据实时监控和报警</li>
</ul>


<h3>小结</h3>

<p>综上，为持续保障系统可用性，需要采取的措施有：</p>

<ul>
<li><strong>预先设计的HA和容灾方案。</strong></li>
<li><strong>事故记录与分析。</strong></li>
<li><strong>可用性数据持续监控与阙值报警。</strong></li>
<li><strong>各节点可用性实时数据。</strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[“服务化”]]></title>
    <link href="http://nielinjie.github.io/blog/2015/04/09/service/"/>
    <updated>2015-04-09T11:11:07+08:00</updated>
    <id>http://nielinjie.github.io/blog/2015/04/09/service</id>
    <content type="html"><![CDATA[<p>什么是服务？每个架构师都有不同的定义，在不同的场景下可能也有不同的定义。</p>

<!-- more -->


<p>在各系统“服务化”的场景中，我们对“服务”的定义是：</p>

<p>（未完成）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[质量保障措施参考清单（一）]]></title>
    <link href="http://nielinjie.github.io/blog/2015/04/09/resilient/"/>
    <updated>2015-04-09T10:18:14+08:00</updated>
    <id>http://nielinjie.github.io/blog/2015/04/09/resilient</id>
    <content type="html"><![CDATA[<p>为更好的应对业务快速变化带来的挑战，许多系统正在从“关联系统”角色向着“<a href="/blog/2015/04/09/service/">服务</a>”角色转变。这样的转变对系统各方面质量特别是运行时质量提出了不一样的要求。如何管理并始终满足这些要求，打造弹性、容错、可管理的服务，是我们需要重点考虑的问题。</p>

<!-- more -->


<p>作为“<a href="/blog/2014/03/31/aa1/">风险驱动的架构设计</a>”的实践者，我们以系统运行过程各个阶段可能遇到的风险为线索，整理我们可能采取的保障措施。——</p>

<ul>
<li>设计时</li>
<li>业务接入时</li>
<li>日常趋势</li>
<li>事故时</li>
</ul>


<h2>性能和容量</h2>

<h3>设计时</h3>

<p>需要根据业务目标确定适当性能理想值。比如：</p>

<ul>
<li>响应时间</li>
<li>吞吐量</li>
</ul>


<h3>业务接入时</h3>

<p>新的业务接入，不论是新的系统接入还是旧有接入系统业务量发生变化。</p>

<ul>
<li>新系统接入时应该声明业务量和变化趋势。</li>
<li>接入系统业务量（即将）发生显著变化时应该声明。</li>
<li>需要知晓当前系统可以承受的业务量。</li>
</ul>


<h3>日常趋势</h3>

<p>系统运行中，几个方面的风险需要持续防范：</p>

<ul>
<li>性能表现恶化</li>
<li>业务量异常变化</li>
<li>资源消耗异常变化</li>
</ul>


<p>为此，我们需要：</p>

<ul>
<li>性能指标的周期性监控记录。</li>
<li>业务总量的周期性监控记录。</li>
<li>各接入系统业务量周期性监控记录。</li>
<li>资源消耗量周期性监控记录。</li>
</ul>


<h3>事故时</h3>

<p>性能事故指的是性能表现发生急剧恶化，用户受到明显影响。性能事故的原因可以分两种情况分析——</p>

<ul>
<li>业务量发生变化

<ul>
<li>各接入系统业务量及调用量。</li>
<li>隔离、特别是热隔离。</li>
<li>扩展性，特别是横向扩展。</li>
</ul>
</li>
<li>业务量没有明显变化

<ul>
<li>受依赖系统拖累

<ul>
<li>依赖系统调用记录。</li>
<li>替代方案或后备方案。</li>
</ul>
</li>
<li>某（些）节点性能异常

<ul>
<li>各节点的性能数据。</li>
<li>节点可（热）拔插。</li>
</ul>
</li>
<li>变更 &ndash; 环境、代码

<ul>
<li>诊断用现场数据</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>为及时发现性能事故和区分两种情况，我们需要：</p>

<ul>
<li>性能数据，实时监控和阙值报警。</li>
<li>总业务量，包括时间和功能分布。</li>
</ul>


<h3>小结</h3>

<p>综上，为持续保障系统性能表现，需要采取的措施有：</p>

<ul>
<li><strong>根据业务目标有适当的性能和容量的理想值。</strong>影响因素变化后或者周期性地需要review。</li>
<li><strong>明确当前系统最大承受业务量。</strong>影响因素变化后或者周期性地需要review。</li>
<li><strong>确保新系统接入或接入系统业务量变化时声明业务量和变化趋势。</strong>建立机制，包括事后回朔机制。</li>
<li><strong>系统性能指标的阙值报警。</strong></li>
<li><strong>系统性能指标的持续监控记录和分析。</strong></li>
<li><strong>业务总量的持续监控和分析。</strong></li>
<li><strong>各接入系统业务量持续监控和分析。</strong></li>
<li><strong>资源消耗量持续监控和分析。</strong></li>
<li><strong>各接入系统业务量及调用量实时数据。</strong></li>
<li><strong>有能力实时隔离接入系统。</strong></li>
<li><strong>容量可扩展性，特别是横向扩展。</strong></li>
<li><strong>依赖系统调用记录的实时数据。</strong>包括调用量和性能。</li>
<li><strong>依赖系统替代方案或后备方案。</strong>至少有业务层面后备方案。</li>
<li><strong>各节点的性能指标的实时数据。</strong></li>
<li><strong>各节点可（热）拔插。</strong>拔出后性能和容量可接受。</li>
<li><strong>诊断用现场实时数据。</strong>各节点都需要此类数据，比如线程dump。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给老爷爷系统（八）：特征机制]]></title>
    <link href="http://nielinjie.github.io/blog/2014/06/16/feature/"/>
    <updated>2014-06-16T21:06:38+08:00</updated>
    <id>http://nielinjie.github.io/blog/2014/06/16/feature</id>
    <content type="html"><![CDATA[<blockquote><p>这是一个老爷爷系统。</p></blockquote>

<p>在《<a href="/blog/2013/09/01/dsl1/">一场似非而是的DSL</a>》和《<a href="/blog/2014/06/16/3d">三个划分维度</a>》中，
已经提到了“特征机制”。这里专门讲一下。</p>

<!-- more -->


<p>“特征机制”，是一种动态选择机制，用来协同“通用”和“专用”两个层次。
当通用逻辑运行到某个点，需要执行专用逻辑，我们首先需要找到正确地专用逻辑。</p>

<ul>
<li>我们把通用逻辑中需要运行专用机制，也就是可能发生扩展的点，称为“扩展点”。</li>
<li>不同的“差异来源”带来不同的“业务差异”，通过在扩展点上填入适当的“扩展”来实现差异化的专用逻辑。</li>
<li>所谓“特征”，就是一条知识，描述了当在何种“业务差异”的处理中，需要在哪些个扩展点填入哪些个“扩展”。</li>
<li>所谓“特征机制”，就是当系统运行到一个扩展点的时候，查找到正确的特征，填入正确的扩展并运行的机制。</li>
</ul>


<p>特征机制的实现在设计上有意识地做到“操作层”和“知识层”分离，以便二者能够分别进化，这点在《<a href="/blog/2013/09/01/dsl1/">一场似非而是的DSL</a>》已经说明了。</p>

<p>下面的图体现了上面这些概念的静态关系。除了主干之外，枝节也说一下：</p>

<ul>
<li>“业务差异”需要一个载体，就是“特征拥有者”，比如“签报”、“用户”等领域对象都可以是特征拥有者，这些拥有者的属性导致了差异。</li>
<li>同一个拥有者的特征可能来源于不同的差异，其中有可能会相互影响甚至冲突，这时候需要一个裁决者，这就是“特征集”。</li>
<li>“特征要求”是拥有者的属性与特征之间的映射，体现为“业务属性”和“业务事件”。</li>
<li>特征由特征要求决定，可以在需要特征时刷新，也可以当“业务属性”改变或“业务事件”发生时刷新。</li>
</ul>


<p><img src="/images/feature/feature2.png"></p>
]]></content>
  </entry>
  
</feed>
