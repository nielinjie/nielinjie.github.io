<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 架构 | 聂同学]]></title>
  <link href="http://nielinjie.github.io/blog/categories/jia-gou/atom.xml" rel="self"/>
  <link href="http://nielinjie.github.io/"/>
  <updated>2015-10-05T12:28:11+08:00</updated>
  <id>http://nielinjie.github.io/</id>
  <author>
    <name><![CDATA[nielinjie]]></name>
    <email><![CDATA[nielinjie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[技术栈是架构设计的目的么？]]></title>
    <link href="http://nielinjie.github.io/blog/2015/10/02/techstack/"/>
    <updated>2015-10-02T22:46:38+08:00</updated>
    <id>http://nielinjie.github.io/blog/2015/10/02/techstack</id>
    <content type="html"><![CDATA[<p>不是。</p>

<p>相比于架构设计的目的，技术栈更像是架构执行的手段。</p>

<p>“为了实现那样的架构设计，我们将使用这些的技术。……”</p>

<!--more-->


<p> <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup><br/>
 <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>另一个角度说来，技术栈也确实常作为架构设计的重要产出物，体现着设计结论的一些方面。所以类似“XX技术在XX公司的应用”这样的句型，作为架构分享文章的标题经常出现。读到这样的文章，希望同学们以正确的姿势打开，从技术栈的展示中，窥见架构设计的来龙去脉。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>既然架构设计和执行是连贯不分的一个整体，那么区分前者的输出和后置的输入有什么意义呢？我认为是有意义的。这是孰本孰末，孰因孰果的问题。试想这样的情况：架构执行过程中，如果发现栈中某技术不适用，是否可以更改？如果是执行的手段，我们可以便宜更改，只要不偏离设计结论；如果是设计的目的，我们不能随意更改，因为要改结论需要从论点、论据、论证一一检视更改。<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[“别让牛人写代码”]]></title>
    <link href="http://nielinjie.github.io/blog/2015/09/27/nocoolcode/"/>
    <updated>2015-09-27T16:51:48+08:00</updated>
    <id>http://nielinjie.github.io/blog/2015/09/27/nocoolcode</id>
    <content type="html"><![CDATA[<p>同意。</p>

<!--more-->


<p>牛人写的代码固然威力无穷，奈何太贵。不仅现在贵，将来更贵。</p>

<p>一般人看不懂，改不动，又不敢丢。活活贵死整个团队。</p>

<p>如果有别的办法，不要依赖于牛人写代码。</p>

<p><img src="/images/nocoolcode/nocoolcode.jpg" width="350"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[“伪代码是好代码”]]></title>
    <link href="http://nielinjie.github.io/blog/2015/09/25/fakecode/"/>
    <updated>2015-09-25T20:51:27+08:00</updated>
    <id>http://nielinjie.github.io/blog/2015/09/25/fakecode</id>
    <content type="html"><![CDATA[<p>可以这么说。</p>

<!-- more -->


<p>通常伪代码都直接描述了某个层面的业务逻辑，是比较典型的领域特定语言（DSL）。同时，也往往符合DDD中对统一语言的期望。</p>

<p>在系统中，如果有一个层次的代码可以集中精力于表达业务逻辑，而不用操心各种质量约束，无疑是理想的。</p>

<p>伪代码确实是好代码，如果它能如愿运行的话。</p>

<p><img src="/images/fakecode/fakecode.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[以场景思维辅助风险驱动架构设计]]></title>
    <link href="http://nielinjie.github.io/blog/2015/08/13/scenario/"/>
    <updated>2015-08-13T15:15:34+08:00</updated>
    <id>http://nielinjie.github.io/blog/2015/08/13/scenario</id>
    <content type="html"><![CDATA[<p>“风险驱动架构设计”<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>需要架构师和团队及时发现风险。这一点是依赖团队经验的。这样的依赖常常引发人们的焦虑：是否所有的风险都被及时发现进而处理了？</p>

<p>不用说缺乏相关经验的团队，即使是经验丰富的团队，随着进入陌生的业务领域或技术环境，也不能避免再次陷入到这样的焦虑之中。</p>

<!-- more -->


<p>如何缓解焦虑，建立大家的信心呢？我们做了一些尝试——</p>

<p>每当我们害怕遗漏的时候，我们有个朴素的方法：列出所有可能，一一检视，从中挑出那些需要处理的。</p>

<p>怎么才能列出“所有”可能的工程风险呢？我们尝试的是场景思维：我们以软件工程中常见的场景为线索——</p>

<ul>
<li>系统处理典型需求的场景</li>
<li>发布新功能的场景</li>
<li>业务量发生显著变化的场景</li>
<li>常见故障和应对的场景</li>
</ul>


<p>根据业务领域、技术环境以及团队结构等因素的不同，这些场景中会发生不同的事件。通过虚拟这些场景和其中的事件，一一检视这些事件中可能蕴含的风险，就可以使我们发现风险的工作系统化。</p>

<p>有同学问到：去寻求一个“完整的”风险列表，不是跟“恰如其分的、不完备的”原则矛盾了么？并不是这样的。我们说的要恰如其分和不完备，指的是架构活动不追求全面，而不是说考虑范围不考虑全面。通过场景思维剪除掉不必要应对的风险，以后的架构活动仍然是恰如其分的。</p>

<p>我们可以从另一个角度来概述这件事情——</p>

<p>“不能发现所有风险”这个风险，是我们可能需要应对的第一个风险。如果需要应对，那我们的措施就是“场景思维法”。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="/blog/2014/03/31/aa1/">“风险驱动架构设计”</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[雪人（五）]]></title>
    <link href="http://nielinjie.github.io/blog/2015/08/04/said-xueren4/"/>
    <updated>2015-08-04T21:10:16+08:00</updated>
    <id>http://nielinjie.github.io/blog/2015/08/04/said-xueren4</id>
    <content type="html"><![CDATA[<p>“最近好多展览，这些雪人真是太漂亮了！”<br/>
“是的。可惜不能看到建造和维护这些雪人的展览。”</p>
]]></content>
  </entry>
  
</feed>
