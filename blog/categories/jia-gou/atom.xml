<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 架构 | 聂同学]]></title>
  <link href="http://www.nietongxue.xyz/blog/categories/jia-gou/atom.xml" rel="self"/>
  <link href="http://www.nietongxue.xyz/"/>
  <updated>2017-02-01T00:11:43+08:00</updated>
  <id>http://www.nietongxue.xyz/</id>
  <author>
    <name><![CDATA[nielinjie]]></name>
    <email><![CDATA[nielinjie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[技术的对面]]></title>
    <link href="http://www.nietongxue.xyz/blog/2016/12/23/tech/"/>
    <updated>2016-12-23T09:13:54+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2016/12/23/tech</id>
    <content type="html"><![CDATA[<p><u><strong>技术</strong></u>的对面<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>是什么？<!--more--></p>

<p>是<u><strong>应用</strong></u>么？是<u><strong>方法</strong></u>么？是<u><strong>思想</strong></u>么？是<u><strong>道</strong></u>么？</p>

<p>最近看来，是<u><strong>策略</strong></u>。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>对面不是对立，是并立。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[与复杂同行（一）]]></title>
    <link href="http://www.nietongxue.xyz/blog/2016/12/11/complex/"/>
    <updated>2016-12-11T13:21:04+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2016/12/11/complex</id>
    <content type="html"><![CDATA[<p><strong>复杂性平方律</strong></p>

<blockquote><p>系统的复杂性正比于系统规模的平方</p></blockquote>

<p>一、系统的复杂性不仅由节点的数量（即“规模”）带来，更多的是由节点间的关系（包括没有关系）带来。<!--more-->
这也就是复杂性平方律的原因。系统的复杂性正比于节点数的平方，因为节点间的连接数正比于节点数的平方。
我们假设节点和连接的复杂度都为1，比如下图所示的系统，总复杂度为14。</p>

<p><img src="/images/complex/complex1.png" width="300"></p>

<p>二、尝试分拆系统。节点被分拆到两个不同的空间，出现了跨空间的连接，这些连接通常成本相对高，带来了相当多额外复杂度。
所以简单的分割不一定能带来复杂性的改善。
我们假设跨空间连接的复杂度为k，则两个空间的复杂度分别为7+4k、3+4k，要使分拆后复杂度降低，对k的要求很高 -</p>

<blockquote><p>  7 + 4k &lt; 14 => k &lt; 1.75</p>

<p>  3 + 4k &lt; 14 => k &lt; 2.75</p></blockquote>

<p><img src="/images/complex/complex2.png" width="300"></p>

<p>三、增加一些节点和连接（方块节点和虚线连接）来改变跨空间连接。
由于方块节点和虚线连接通常是一些技术性的代理元素，不用承载领域内容。它们的复杂性通常小于普通元素。这里我们仍然按1来计算。
同样计算对k的要求，发现降低了很多。</p>

<blockquote><p>11+ k &lt; 14 => k &lt; 3</p>

<p>6 + k &lt; 14 => k &lt; 8</p></blockquote>

<p><img src="/images/complex/complex3.png" width="300"></p>

<p>（待续） <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>前方坑大。管挖不管填。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分布式事务，也谈（番外）]]></title>
    <link href="http://www.nietongxue.xyz/blog/2016/10/07/process/"/>
    <updated>2016-10-07T14:29:52+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2016/10/07/process</id>
    <content type="html"><![CDATA[<h3>过程管理，一个基础模式？</h3>

<p>系列中<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>提到，事务管理，实质是一个过程管理。</p>

<!--more-->


<p>包括事务管理，过程管理还出现在多个常见的场景中，比如 -</p>

<ul>
<li>事务管理 - 负责管理各个相关联的操作，对他们的“状况“做出决策应对。</li>
<li>服务编排 - 负责将小粒度和职责单一的服务组合为复杂的业务过程。</li>
<li>协调异步 - 负责异步操作之间的步调协调工作。</li>
<li>交互串联 - 负责将多个业务步骤包装为一个用户友好的交互过程。</li>
</ul>


<p>这几个场景都是一个管理者在对一个过程进行管理。但在不同场景中管理者的职责不同 -</p>

<ul>
<li>事务管理 - 强调操作状况的可见、可控、可稽核。</li>
<li>服务编排 - 强调服务间的依赖管理，服务结果的传递和收集。</li>
<li>协调异步 - 强调操作间的步调协同，与同步的转化，处理等待，处理中间状态。</li>
<li>交互串联 - 强调与用户的交互，比如处理中间状态的表现，过程中用户的干预等。</li>
</ul>


<p>根据系列中的研究，这些个过程管理都可以考虑实现为分层结构的状态机模型。</p>

<p>这里有一个挑战：实际情况中一个管理组件很有可能兼职，很可能需要同时完成上述职责中的两三项。这种情况下，处理具体业务逻辑的最上层，就需要从各个职责各自的角度，对操作和决策进行描述，然后，如果能做到的话，把它们融合起来。</p>

<p>（也许还有下一篇，研究下如何融合各个职责的操作和决策）</p>

<p><img src="/images/transaction/process.png" width="500"></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>系列 - <a href="/blog/2016/09/19/transaction/">分布式事务，也谈</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分布式事务，也谈（之三）]]></title>
    <link href="http://www.nietongxue.xyz/blog/2016/10/06/transaction3/"/>
    <updated>2016-10-06T00:43:57+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2016/10/06/transaction3</id>
    <content type="html"><![CDATA[<p>继续谈实现模型。按抽象层次分层，设计为知识→操作多层结构，每个层针对不同层面的概念、逻辑和开发者。</p>

<!--more-->


<p>最上层为具体业务开发者需要关注的概念，实际上只包括：</p>

<ol>
<li>各个操作的特征，说明各个操作如何调用、可否回查、可否撤销等等。</li>
<li>决策表中的具体规则。说明当某某状况发生时，采取某某处置。</li>
</ol>


<p>第二层为事务管理组件，负责组织前面提到的两层嵌套状态机。</p>

<p>第三层和第四层，是两层嵌套状态机本身的实现。</p>

<p><img src="/images/transaction/transaction3.png" width="500"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分布式事务，也谈（之二）]]></title>
    <link href="http://www.nietongxue.xyz/blog/2016/09/26/transaction2/"/>
    <updated>2016-09-26T16:08:48+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2016/09/26/transaction2</id>
    <content type="html"><![CDATA[<p>如前一篇提到的 <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，本篇谈一谈实现模型<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</p>

<!--more-->


<p>过程管理常常被实现为一个状态机，这里顺着这个思路尝试一番。</p>

<ol>
<li>每个操作实现为一个状态机，称为“操作状态机”。</li>
<li>使用一个外层状态机处理决策过程，实现决策表。称为“决策状态机”。</li>
<li>操作状态机嵌入决策状态机，作为内嵌状态<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。决策状态机和操作状态机分别是外层状态机和内层状态机。</li>
<li>内层状态机对外层隐藏它自己能够独立处理的逻辑。仅向外暴露最终的对外<strong>状况</strong>和可以被外层<strong>处置</strong>的事件。</li>
<li>逻辑在内外层之间的分配是最重要的一个权衡。如果内层逻辑太多则外层可以做的处置就太少，控制能力有限。如果内层逻辑太少，就将大量复杂性丢给外层，外层负担太重。这两种情况，层次结构都失效了。</li>
<li>内外层之间通过事件沟通，内层产生的最终状况通过事件送达外层决策，外层决策做出的处置也通过事件操作内层。</li>
<li>操作的撤销可以视为另一个操作，实现为一个独立的操作状态机。也可以与操作本身一起实现为同一个状态机。这是内外层的逻辑分布进行权衡的一个例子。</li>
<li>决策表，是外层逻辑的核心，是一些规则的集合，规则的输入是各个操作的对外状况，输出是对各个操作的处置。<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></li>
<li>决策逻辑可能会很复杂，比如有时候决策逻辑不仅依赖于当前输入，还会依赖于决策历史。此时需要权衡，可以把特别复杂和不太可能发生的情况留给人工解决。</li>
<li>整个结构还可能继续嵌套，也就是说整个状态机可能还是更外层状态机的一个内嵌状态机。</li>
<li>上述整个结构，是对应于一个事务的。处理多个事务，就是同时并存的多个状态机实例。</li>
</ol>


<p>（<a href="/blog/2016/10/06/transaction3/">下一篇</a>，继续谈实现模型）</p>

<p>附图：</p>

<p><img src="/images/transaction/transaction2.png" width="500"></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>本篇所有概念和名词都延续自<a href="/blog/2016/09/19/transaction/">前一篇</a>。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>此处并没有任何可以直接应用的结论或代码。“干货”并非是本博的主要内容，参见：<a href="/blog/2016/05/20/dry/">时事：干货</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Wiki：<a href="https://en.wikipedia.org/wiki/UML_state_machine#Hierarchically_nested_states">Hierarchically_nested_states</a><a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>决策表的例子见<a href="/blog/2016/09/19/transaction/">前一篇</a>，但要注意，前一篇的例子中，对操作的处置是很细节的，在很多场景中不一定适合，如上面第5点讨论的。<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
