<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 架构 | 聂同学]]></title>
  <link href="http://www.nietongxue.xyz/blog/categories/jia-gou/atom.xml" rel="self"/>
  <link href="http://www.nietongxue.xyz/"/>
  <updated>2015-12-27T15:09:37+08:00</updated>
  <id>http://www.nietongxue.xyz/</id>
  <author>
    <name><![CDATA[nielinjie]]></name>
    <email><![CDATA[nielinjie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[“Reactive宣言里为什么有个消息驱动？”]]></title>
    <link href="http://www.nietongxue.xyz/blog/2015/12/23/md/"/>
    <updated>2015-12-23T16:31:35+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2015/12/23/md</id>
    <content type="html"><![CDATA[<p>宣言的其他方面描述的都是系统的外部特征：快速响应、容错、压力下的弹性。为什么单单加入“消息驱动”这个实现策略呢？</p>

<!--more-->


<p>外部特征被纳入一个“宣言”容易理解，是作为一种承诺和目标。实现策略为何要被纳入一个宣言？毕竟，如果我的系统能实现被期待的外部特征，谁在乎是什么东西驱动的呢？消息驱动？神经驱动？意念驱动？随便啊。</p>

<p>表面看来确实如此。</p>

<p>答案在于，消息驱动在这里并不仅是一个实现策略。宣言中提到的“系统”是多层的，包括大大小小各层级的系统，其中大系统往往由小系统组成。当诸多小系统组成大系统的时候，大系统的实现策略就成了对小系统的外部特征要求。小系统之间的交互，要遵循的就是消息驱动这个一致约定，这对与小系统来说是外部特征，而不是实现策略。</p>

<p>所以消息驱动这个要点，在Reactive的系统生态中，是相互间既能松散自治又能协同合作的重要保证。虽然对系统的最终用户可能没有重要意义，但却是开发者之间的重要承诺和共同目标。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微服务的微（上）]]></title>
    <link href="http://www.nietongxue.xyz/blog/2015/12/01/micro/"/>
    <updated>2015-12-01T15:16:01+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2015/12/01/micro</id>
    <content type="html"><![CDATA[<p>微服务的微，是指服务粒度的微么？</p>

<!--more-->


<p>微服务可能是由此得名的。但在微服务架构思想中，服务粒度的微，不应该放在首要强调的位置。</p>

<p>微服务架构的思想中，服务的粒度是能找到明确依据的。它由正反两个方向的力相互平衡决定。</p>

<p>驱动服务分割变小的正向力是解耦带来的收益。这个可以从几个方面考察——业务、团队、技术栈、运行时。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>反向力是服务分割变小后带来的问题，目前看来最难解决的是性能和数据一致性。服务的粒度越小，需要协作的服务数量越多，性能和一致性方面的影响就越大。</p>

<p>对于这两个力的平衡，不同的业务，不同的团队，不同的进化方向等等，多种因素决定了结果并不相同。正向力大一些，服务的粒度就小一些，服务就微一些，否则，服务就没那么微。</p>

<p>这样一来，服务是不是微、有多微，并不由微服务架构思想本身决定。甚至一种可能的合理结果是：运用微服务的思想分析之后，却发现使用单体架构更为合理。</p>

<p>所以，微服务的微，并不强调服务粒度的微。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>前面有详细讨论，参见<a href="/blog/2015/06/28/monolithf/">《单体优先还是微服务？》</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Orchestration 和 Choreography]]></title>
    <link href="http://www.nietongxue.xyz/blog/2015/11/29/oc/"/>
    <updated>2015-11-29T15:01:02+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2015/11/29/oc</id>
    <content type="html"><![CDATA[<p>Orchestration 和 Choreography，这个两个词在跟“服务”有关的架构讨论中常有出现。比如微服务和SOA。</p>

<!--more-->


<p>如果直译的话，这两个词一个是“编曲”，一个“编舞”。</p>

<p>编曲和编舞都是编。编就是安排、设计。不论是微服务的服务还是SOA的服务，要想沟通协同，合力完成业务请求，都是需要安排设计的。</p>

<p>但二者编排的对象不同，一个是曲一个是舞。特别是，按照词的本意，这里的“曲”指的是“管弦乐曲”，是相对复杂宏大的演奏。</p>

<p>曲和舞有什么区别呢？</p>

<ol>
<li>曲需要指挥，舞不需要。乐者在演奏时，需要指挥随时指挥协调。而舞者则不需要，按照事前安排做好自己就行。需要跟其他舞者合作时，也由自己直接沟通完成。</li>
<li>曲分工复杂，舞比较简单。管弦乐曲演奏需要多种不同乐器多种不同乐者，要求彼此配合得当，才能演出成功。而舞蹈没那么多分工，即使是大型舞蹈，台上人多，但角色也就数种而已。</li>
<li>曲比较严肃，舞比较宽松。乐者的演奏和配合一丝不苟，少有随性。舞者则有较多的个人发挥空间。</li>
</ol>


<p>SOA的理念是自上而下，比较多的依赖于集中安排，运行时也需要明确的中间件进行中央控制协调。边界内有多种类型的服务，相互之间严密配合。SOA的风格类似于编曲。</p>

<p>跟SOA相比，微服务风格更类似于编舞。边界内的服务遵循简单的约定，负责一个特定的领域。他们的地位相似，实现方式和沟通方式由自己选择。</p>

<p>编曲和编舞是一种形象的比喻，并不会完全精确。架构师编排服务的时候不要照抄。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[系统要像什么？]]></title>
    <link href="http://www.nietongxue.xyz/blog/2015/11/20/system-like/"/>
    <updated>2015-11-20T10:39:55+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2015/11/20/system-like</id>
    <content type="html"><![CDATA[<p>系统不要像一座建筑或一台机器。</p>

<!--more-->


<p>要想办法让系统像一个生物，如能更进一步，要像一个社会。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读TOGAF（二）：ADM初瞥]]></title>
    <link href="http://www.nietongxue.xyz/blog/2015/11/17/togaf-adm/"/>
    <updated>2015-11-17T00:05:18+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2015/11/17/togaf-adm</id>
    <content type="html"><![CDATA[<!--more-->


<ul>
<li>ADM建议一系列的阶段和步骤。但不建议范围<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</li>
<li>ADM是渐进迭代的。每次迭代有自己的范围，渐进产出。</li>
<li>ADM是可以调整包括裁剪的。但调整必须管理并维持。</li>
<li>ADM通过架构仓库参与到企业火锅<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>架构范围包括：宽度、深度、时间范围、架构领域。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="/blog/2015/11/07/togaf/">企业火锅</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
