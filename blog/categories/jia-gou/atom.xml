<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 架构 | 聂同学]]></title>
  <link href="http://www.nietongxue.xyz/blog/categories/jia-gou/atom.xml" rel="self"/>
  <link href="http://www.nietongxue.xyz/"/>
  <updated>2016-01-07T20:07:04+08:00</updated>
  <id>http://www.nietongxue.xyz/</id>
  <author>
    <name><![CDATA[nielinjie]]></name>
    <email><![CDATA[nielinjie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在发展中团队：微服务？]]></title>
    <link href="http://www.nietongxue.xyz/blog/2016/01/05/dev-micro/"/>
    <updated>2016-01-05T10:08:59+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2016/01/05/dev-micro</id>
    <content type="html"><![CDATA[<p>当系统成长的时候，大家都想到“微服务”。</p>

<!--more-->


<p>微服务太火，好像成了理所当然。但应该考虑微服务是否适于这个团队。</p>

<p>对于微服务本身，正反两方驱动力讲得比较多了<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p>

<p>而微服务落实到团队，需要考虑更多：文化需要推广？团队需要重组？技能需要学习？过程可能调整？平台需要验证？……</p>

<p>对照团队现状和发展步调，我们必须知道能得到什么，又需要付出什么。</p>

<p>想要提高可用性？可能只需要多份部署。</p>

<p>想要改善逻辑结构？可能只需要开发时模块化。</p>

<p>想要错误隔离？可能只需要分布式。</p>

<p>想要解耦和可重用化？可能只需要服务化。</p>

<p>……</p>

<p>微服务是一套工具，而不是一件。团队可以做出裁剪，也可以做出渐进策略。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="/blog/2015/12/01/micro/">微服务的“微”</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在发展中团队：领域管理]]></title>
    <link href="http://www.nietongxue.xyz/blog/2015/12/31/developing-domain/"/>
    <updated>2015-12-31T09:54:24+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2015/12/31/developing-domain</id>
    <content type="html"><![CDATA[<p>度过初创期，业务复杂性明显发展，系统结构和质量越来越受到重视。</p>

<p>需要考虑如何管理领域<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p>

<!--more-->


<h3>什么是领域？</h3>

<p>领域是业务概念和他们之间的关系与协作。系统的目的就是实现这些概念和协作。</p>

<h3>领域有什么用？</h3>

<ol>
<li>领域决定系统的业务特征。领域的现状就是系统的业务现状，领域的历史就是系统的业务历史。或者说，领域体现了业务与系统特征间的因果关系。</li>
<li>领域是通用语言。在产品团队与开发团队间，各产品线之间，各开发团队之间或者开发团队内部。领域是沟通的语言，也是发布和积累的语言，是协作的首要工具。</li>
<li>领域是系统结构的依据。以领域驱动设计<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>是应对系统复杂性的常见手段。领域的结构深刻影响系统结构。</li>
</ol>


<p>这些用途决定了对领域管理的要求，比如：容易阅读，容易查找，容易控制，容易共享，容易跟踪变化。</p>

<h3>如何管理领域？</h3>

<ol>
<li>从静态、动态两个角度描述领域。静态体现领域实体和他们的关系，动态体现领域实体的行为和协作。可以借用UML类图和序列图的形式<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>，也可以使用伪代码。</li>
<li>形式化、结构化的描述体系。形式化的语言去除二义性，知识在各团队各角色之间不会产生歧义。结构化的语言体现层次，不同角色可以关注不同层面。 这一点上，UML相关约定完全够用。如果结合文件系统的树形结构，可以实现足够丰富的层次。</li>
<li>使用git或其他SVC。便于共享和跟踪变化。这要求使用尽量简单的描述语言。在这里，一般的UML图不太理想，人类无法阅读UML图的diff。同样的，各种其他图、doc文档之类也不理想。可以借用马丁大叔UmlAsSketch<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>的想法，使用纯文本形式的UML。</li>
<li>使用中文。英文翻译是引入歧义的重要途径，在尽量少的地方使用英文，而不是相反。</li>
<li>与开发共享周期。领域变化的步调一般与系统的设计开发一致，可以借用设计开发的版本和迭代周期。</li>
</ol>


<p>另外，一些可能的问题——</p>

<p>Q：领域是需求么？<br/>
A：对于开发团队来说，可以说领域来源于需求。区别是：</p>

<ol>
<li>需求从产品和用户的角度，以交互驱动；领域从设计和开发的角度，以结构和逻辑驱动。</li>
<li>需求是增量，领域是全量。需求描述的是每次改动，一般以版本、迭代作为组织单位。如果想从需求知道系统体现业务现状，就必须将历史中所有相关需求找出来进行归纳，这无疑非常困难。而领域持续维护，随时体现当前现状。</li>
<li>需求关心局部，领域关心全局。需求强调体验，往往专注于局部，以一个场景一次交互为单位进行描述。而领域强调整体，需要负责跨产品线跨系统保持一致性。</li>
<li>需求包括功能、质量、约束，领域只涉及到功能。</li>
</ol>


<p>Q：领域是设计（类图、ER图……）么？<br/>
A：领域是设计的依据（之一）。设计的目的是实现领域，但设计需要同时考虑其他架构策略，比如由质量要求引发的技术方案。如图：</p>

<p><img src="/images/dev/domain.png" width="550"></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>本文中的“领域”都是指“领域模型”或者其他形式的领域知识，而不是领域本身。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>此处的“以领域驱动设计”不完全等于DDD。<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>是不是任何事物都可以从静态和动态两角度描述，进而都使用类图和序列图？<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p><a href="http://martinfowler.com/bliki/UmlAsSketch.html">UmlAsSketch</a><a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实现质量要求的三个考虑方向]]></title>
    <link href="http://www.nietongxue.xyz/blog/2015/12/24/3direct/"/>
    <updated>2015-12-24T13:25:20+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2015/12/24/3direct</id>
    <content type="html"><![CDATA[<p>性能、可用性、可伸缩、可扩展……如何达成这些质量要求，是随时要考虑的问题。
有没有什么“普遍的”考虑方法呢？</p>

<!--more-->


<p>对各个质量要求，具体的考虑方法是各不相同的，但总结起来思考方向一般有几个：<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<h3>正向</h3>

<p>顺着问题发生的因果方向考虑。</p>

<p>列出可能导致问题发生的因素，建立问题场景的模型，研究因素与结果的关系，按优先级评估和排除这些因素。比如对于性能质量风险：对典型请求建模，列出处理请求的步骤，考察它们可能对总体性能的影响，排除可能的瓶颈。</p>

<h3>反向</h3>

<p>将因果关系反过来。</p>

<p>我们从结果出发，基于问题已经发生。考虑如何才能回溯问题的原因并排除。还以性能为例。如果发现系统响应缓慢，我们可以有些什么手段找到缓慢环节，证实它是缓慢的根源？从这个方向考虑，通常会发现要求系统中有足够多的诊断支持，比如日志、现场收集保护、快照分析等等。</p>

<p>值得提醒的是，问题发生有至少两个场景，都是可以利用的：</p>

<ol>
<li>测试，制造问题的发生。</li>
<li>生产中发现已发生的问题。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></li>
</ol>


<h3>横向</h3>

<p>或者说无向。指的是不按因果方向考虑。比如使用“模式”——根据系统特点，列出可能提高性能的模式，看看成本，能用上的都用上吧。这种方法也确实有用。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>本文以性能为例，但方法可以推广到其他质量要求。好吧，貌似也可以推广到其他任何事。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>当然先要救命和减少问题影响。但不属于本文的范围。<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[“Reactive宣言里为什么有个消息驱动？”]]></title>
    <link href="http://www.nietongxue.xyz/blog/2015/12/23/md/"/>
    <updated>2015-12-23T16:31:35+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2015/12/23/md</id>
    <content type="html"><![CDATA[<p>宣言的其他方面描述的都是系统的外部特征：快速响应、容错、压力下的弹性。为什么单单加入“消息驱动”这个实现策略呢？</p>

<!--more-->


<p>外部特征被纳入一个“宣言”容易理解，是作为一种承诺和目标。实现策略为何要被纳入一个宣言？毕竟，如果我的系统能实现被期待的外部特征，谁在乎是什么东西驱动的呢？消息驱动？神经驱动？意念驱动？随便啊。</p>

<p>表面看来确实如此。</p>

<p>答案在于，消息驱动在这里并不仅是一个实现策略。宣言中提到的“系统”是多层的，包括大大小小各层级的系统，其中大系统往往由小系统组成。当诸多小系统组成大系统的时候，大系统的实现策略就成了对小系统的外部特征要求。小系统之间的交互，要遵循的就是消息驱动这个一致约定，这对与小系统来说是外部特征，而不是实现策略。</p>

<p>所以消息驱动这个要点，在Reactive的系统生态中，是相互间既能松散自治又能协同合作的重要保证。虽然对系统的最终用户可能没有重要意义，但却是开发者之间的重要承诺和共同目标。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微服务的微]]></title>
    <link href="http://www.nietongxue.xyz/blog/2015/12/01/micro/"/>
    <updated>2015-12-01T15:16:01+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2015/12/01/micro</id>
    <content type="html"><![CDATA[<p>微服务的微，是指服务粒度的微么？</p>

<!--more-->


<p>微服务可能是由此得名的。但在微服务架构思想中，服务粒度的微，不应该放在首要强调的位置。</p>

<p>微服务架构的思想中，服务的粒度是能找到明确依据的。它由正反两个方向的力相互平衡决定。</p>

<p>驱动服务分割变小的正向力是解耦带来的收益。这个可以从几个方面考察——业务、团队、技术栈、运行时。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>反向力是服务分割变小后带来的问题，目前看来最难解决的是性能和数据一致性。服务的粒度越小，需要协作的服务数量越多，性能和一致性方面的影响就越大。</p>

<p>对于这两个力的平衡，不同的业务，不同的团队，不同的进化方向等等，多种因素决定了结果并不相同。正向力大一些，服务的粒度就小一些，服务就微一些，否则，服务就没那么微。</p>

<p>这样一来，服务是不是微、有多微，并不由微服务架构思想本身决定。甚至一种可能的合理结果是：运用微服务的思想分析之后，却发现使用单体架构更为合理。</p>

<p>所以，微服务的微，并不强调服务粒度的微。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>前面有详细讨论，参见<a href="/blog/2015/06/28/monolithf/">《单体优先还是微服务？》</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
