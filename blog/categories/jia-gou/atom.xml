<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 架构 | 聂同学]]></title>
  <link href="http://www.nietongxue.xyz/blog/categories/jia-gou/atom.xml" rel="self"/>
  <link href="http://www.nietongxue.xyz/"/>
  <updated>2018-03-03T13:12:39+08:00</updated>
  <id>http://www.nietongxue.xyz/</id>
  <author>
    <name><![CDATA[nielinjie]]></name>
    <email><![CDATA[nielinjie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[蓝图与拼图]]></title>
    <link href="http://www.nietongxue.xyz/blog/2018/02/17/deep-wide/"/>
    <updated>2018-02-17T11:23:47+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2018/02/17/deep-wide</id>
    <content type="html"><![CDATA[<p>蓝图与拼图，是类比于分析和解决问题的两种过程模式。联系到前面的文章<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，可以说也是“驱动”的两种模式。</p>

<!-- more -->


<p>蓝图模式，指的是从整体出发，逐级分解问题，直至定义出足够具体的子问题，进而解决问题的模式。拼图模式，指的是不从整体分解，而从一个个显而易见的局部问题点出发，各个击破，每个先解决掉，进而自然解决整个问题的模式。</p>

<p>用程序员熟悉的语言，可以大致地对应一下。蓝图模式，类似一种广度优先的过程；而拼图模式，类似于一种深度优先的过程。</p>

<p>可以看到，在蓝图模式下，子问题之间的关系是很明确的，他们组合起来是不是问题的整体，解决以后可不可以解决问题的整体，这些是可以预见的。而在拼图模式下，子问题之间的关系是不明确的，即使解决掉所有识别到的子问题，仍然不能认为，问题的整体被解决了。</p>

<p>蓝图模式可以说是一种理想的模式。高屋建瓴，步步为营，可控性强。</p>

<p>但蓝图模式在实际使用中局限性很明显，很难被真正应用。</p>

<ol>
<li>蓝图模式依赖于对问题整体的深刻认识。很多时候这是做不到、来不及或者负担不起的。</li>
<li>蓝图模式依赖于对问题的正确分解。并不是所有问题，都能容易地做到正确分解。特别是，这种分解的技能可能非常依赖于个人经验，难以工程化。</li>
</ol>


<p>实际工作中，我们常常综合应用两种模式。比如一种常见的过程是拼图-蓝图模式。当我们对问题整体认识不足，或者认为认识成本过高，我们就寻找局部的突破点，以拼图的模式来找到一个个的局部问题。找到局部问题以后，我们就可以借助蓝图模式 -</p>

<ul>
<li>一方面，局部问题的规模和复杂度相对较小，整体容易认识，这时候我们就可以画出“这块拼图的蓝图”，进而可控地完成这块拼图。</li>
<li>另一方面，随着对各个拼图块的研究，可以帮助我们对整体问题的结构有进一步的认识。就好比说，我们在拼图之前是不知道整体画面的内容的，但拼出几块图之后 ，我们对整体画面就有了一些认识。这既可以帮助我们完成接下来的拼图，也可以帮助我们验证拼图是否已经最终完成。</li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>之前关于驱动的文章 - <a href="/blog/2017/12/14/d-o/">《“驱动”与“面向”》</a><a href="/blog/2018/01/14/driver/">《“驱动者”说》</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[领域驱动作为一种驱动技术]]></title>
    <link href="http://www.nietongxue.xyz/blog/2018/02/04/dd-as-d/"/>
    <updated>2018-02-04T14:35:34+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2018/02/04/dd-as-d</id>
    <content type="html"><![CDATA[<p>之前就“驱动”、“领域驱动”这些主题做了一些讨论，现在看看作为一种架构设计的驱动技术，“领域驱动”有何特点。</p>

<!-- more -->


<p>乍看之下，领域驱动与特征驱动有些关系。那我们就从跟特征驱动的区别说起。</p>

<p>首先，两者的起点是不一样的 -</p>

<ol>
<li>一般来说，特征驱动中所谈的特征，也可以说是“需求”。讲的是需要实现的系统的特征，而不是业务问题本身的特征，需求已经是产品同学（或业务分析同学）的设计结果，体现系统的边界和职责。它已经是对业务问题的部分应对了。</li>
<li>领域驱动所做的，是对业务问题的直接建模与拆分。更多的讲的是业务本身的特征特点，没有涉及到系统，也没有涉及到的系统的边界与职责。</li>
<li>所以两者的起点是不同的。可以说，一个从经过设计的需求开始，一个从未经设计的问题本身开始。</li>
</ol>


<p>其次，通常来讲，特征包括功能、质量、约束。领域驱动几乎完全没涉及到质量、约束方面的特征。功能方面，如前所述，也不是直接对应。</p>

<p>作为一种驱动技术，我们按照对驱动者的一般要求，来看一下领域驱动的能力。</p>

<ol>
<li>首先看拆分问题。DDD维护一个分析模型到设计模型的机械映射，只要拆分分析模型，就完成了问题的拆分。分析模型本身有结构，所以拆分是比较容易的。但是，不论是分析模型，还是其映射而成的设计模型，都很难直接验证。一般只有通过对模型的使用，才能间接验证。</li>
<li>其次看推动问题的解决，由于机械映射的存在，基本上完成了分析模型，就完成了设计模型。大部分的工作，都集中在分析模型方面。而分析模型的完成程度，可以说是很难衡量和可视化的。</li>
</ol>


<p>如上特点，决定了使用领域驱动时的一些注意事项</p>

<ol>
<li>一个系统的架构设计中不能只有领域驱动。领域驱动考虑的只是问题的一部分或者说一个方面。其他方面需要其他驱动技术来考虑。比较典型的是质量方面，比如性能、可用性等。</li>
<li>需要通过对模型的使用来间接验证领域驱动的设计。比如通过功能/UseCase来验证，看这个模型上面能否满足功能的逻辑。而功能/UseCase，通常是依赖于对系统特征的定义。</li>
</ol>


<p>领域驱动与特征驱动，常常伴生。领域驱动在时间、空间上的广度视野，与特征驱动在细节、具体层面的管理能力，可以相互补充。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DDD的D、D、D]]></title>
    <link href="http://www.nietongxue.xyz/blog/2018/01/20/d-d-d/"/>
    <updated>2018-01-20T14:34:51+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2018/01/20/d-d-d</id>
    <content type="html"><![CDATA[<p>DDD就是领域驱动设计，这里想要分别谈一下DDD里面的三个D。兼谈一点我们实际的开发团队的DDD实践活动，我们的收获和教训。</p>

<!-- more -->


<h3>第一个D，说的是领域。</h3>

<p>是识别和定义问题，这个活动交付给下个阶段的交付物是领域模型。我有个比喻说建模就是在知识的液体海洋中析出晶体。在业界的大量讨论中，讲得比较多的是这个晶体是什么样的，而对于如何析出这样的晶体，却较少有讨论。有人讲了敏捷建模<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，但那个也是侧重的是活动安排，不是建模本身的方法论。当然业界也有些建模方法的讨论，比如四色建模法、EventStorm建模法，但这些算是一些局部的方法模式，还没有形成成套路的方法论。</p>

<p>实践中，我们较多的采用功能驱动建模，以功能（或者说UseCase/UseStory）作为起始点，围绕功能提及的业务概念，去逐渐析出周边与之关联的概念。</p>

<p>这里似乎有个“悖论”，我们说领域驱动的好处，就是要跳出功能、迭代的小框框，以更大的时间、空间维度去研究整个业务的总体结构。我们用功能去驱动领域建模，似乎是走回到老路去了。</p>

<p>其实不存在这个悖论，我们举个例子，类比画地图，每个地形采集员他能看到的是当前的一个局部，但这些局部通过地图这个模型逐渐积累起来，再借助一些高层面的观察（比如航拍），就逐渐提供了全局的完备的视野。我们用局部功能去驱动领域建模，也是类似的原理。</p>

<h3>第二个D，说的是驱动。</h3>

<p>我们之前讨论了什么是驱动，什么样的东西适于驱动<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。在DDD的体系中，驱动讲的是MDD，即模型驱动，说的是有一套机械可重复的方法，将领域模型中体现的各个结构，映射为可以解决的问题，也就是可以去开发实现的结构。</p>

<p>实践过程中我们发现。开发团队对第二个D非常敏感，有些同学认为DDD的意义其实就是战术层的一些设计模式，比如工厂、聚合、实体等，认为DDD的存在就是为了“克服贫血的DTO”，使用“充血的实体”。这当然是对DDD的严重误解，完全没有认识到DDD的价值。</p>

<p>就第二个D来说，DDD的好处，要点在“机械、可重复”的映射，这保证了分析与设计的稳定衔接。至于结构性的设计模式，比如聚合、实体这些，只是一个副产物。如果我们能够为这种映射，找到另外一套设计模式，只要能做到“机械、可重复”那也是完全没有问题的。</p>

<p>另外要提醒大家注意的是，这种映射不仅仅是在战术层面，在战略层面同样存在，而且在我们看来具有更为重大的意义。比如子域映射为上下文，上下文之间的关系映射为一些集成模式等等。</p>

<h3>第三个D，说的是设计。</h3>

<p>紧跟着第二个D，领域模型映射出来的就是设计模型。设计模型作为开发实现的依据。</p>

<p>在实际开发过程中，真正做到依据设计模型进行开发实现，并不是一件理所当然的简单事。因为设计模型不是实现模型，这里是需要一个转换的。</p>

<p>为了解决各种问题，陆陆续续会得到各种设计模型。由于这些解决都需要落实到同一个系统中，它们需要在实现时进行综合。这就是解空间上构建实现模型需要做的事情。从DDD来的设计模型，需要跟应对其他问题来的设计模型进行综合，共同导出实现模型。比如在DDD的同时，我们可能还需要应对分布式带来的容错熔断问题，这就要求我们要作的“防腐层”，兼具在演进时和运行时的隔离功能。</p>

<p>在实际开发过程中容易犯的错，一是没有意识到设计模型与实现模型的区别；二是不能做到正确的综合，容易造成实现模型扭曲了设计模型。</p>

<h3>另外</h3>

<p>一个图，一个比喻。</p>

<p><img src="http://www.nietongxue.xyz/images/ddd/ddd.png" width="80%"/></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://agilemodeling.com">http://agilemodeling.com</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="/blog/2018/01/14/driver/">《“驱动者”说》</a>、<a href="/blog/2017/12/14/d-o/">《“驱动”与“面向”》</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[“驱动者”说]]></title>
    <link href="http://www.nietongxue.xyz/blog/2018/01/14/driver/"/>
    <updated>2018-01-14T23:16:37+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2018/01/14/driver</id>
    <content type="html"><![CDATA[<p>之前<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>谈到“驱动”这个概念。说“驱动”讲的是拆分问题的单位，现在尝试讨论下，什么样的东西，适合用来作为这个驱动者，也就是说，什么样的东西，适合用来拆分问题。</p>

<!-- more -->


<p>之前的我们讲，驱动者是拆分问题的单位，也是应对问题的单位、解决问题、验证解答的单位。就是说，驱动者有两个功能，一是拆分问题，一是推动问题的解决。</p>

<p>拆分问题方面的要求有两个 -</p>

<ol>
<li>拆分本身的质量。拆分要易操作，最好不依赖于个人，有机械的工程方法。拆分的结果要不缺失、不重复，要容易反过来验证是否能组合回到最初的问题<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</li>
<li>拆分出来的子问题的质量。问题要容易定义，容易应对。拆分问题的唯一目的是要让问题变得容易分别应对。如果能通过一些机械方法，直接将子问题映射为一些可以执行的任务，并到达SMART的标准，那可以说是最理想的拆分了。</li>
</ol>


<p>推动问题解决方面，只有一个要求，就是要把解决问题的程度、进度可视化。这一方面相对简单。</p>

<p>下面我们用一两个“驱动”的例子，来看看下这些驱动者在各个方面的表现。</p>

<p>比如我们说测试驱动开发。测试案例就是驱动者，我们看看它是否符合这三个要求 -</p>

<ol>
<li>拆分问题的质量。不太好。从要实现的用户故事，到拆分为的测试案例之间，联系并不明显。从用户故事到测试案例的映射需要程序员的丰富经验，这个过程缺乏机械性。同样的，从测试案例反过来验证组合回用户故事，也是不够直接的。通俗的讲，就是即使我完成了所有分解而来的100个测试案例，我仍然无法直接判定我是否已经满足了用户故事。</li>
<li>定义和应对子问题。比较好。拆分而来的子问题就是设法写出满足测试案例的代码。测试案例确定时，任务的边界也就是确定的。而对于如何写出一个通过测试案例的代码，相对比较可控。</li>
<li>可视化解决程度。不太好。是否能通过测试，作为问题是否解决的标注，一目了然。但这个标准只有0和1，没有中间状态，对进度的表征是不理想的。</li>
</ol>


<p>从上面三点看，第一点比较突出，测试驱动的主要不足在于如何将用户故事稳定可靠地映射为一些测试案例。这时候BDD的理念赶来帮忙了，稍微改进一下测试驱动，将拆分为单元测试案例改为拆分为以软件行为描述的测试案例。行为描述与用户故事之间的分解-组合关系就相对更直接了。至于第三点，进度不好标度，这个问题不是很突出，因为测试驱动分解的任务粒度够小。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="/blog/2017/12/14/d-o/">前一篇：“驱动”与“面向”</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>拆分本身可以讲一大堆，这里不展开。后续可以有一篇专文。<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[“驱动”与“面向”]]></title>
    <link href="http://www.nietongxue.xyz/blog/2017/12/14/d-o/"/>
    <updated>2017-12-14T22:45:56+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2017/12/14/d-o</id>
    <content type="html"><![CDATA[<p>领域驱动、测试驱动、风险驱动；面向对象、面向组件、面向服务。这些说法我们都已经很熟悉了，大家研究的重点往往是其中的那个名词。名词是关键没错，但那已经说得够多了。今天来聊聊其中的动词，“驱动”与“面向”。</p>

<!-- more -->


<p>“驱动”，作用于问题空间，讲的是拆分问题的单位。领域驱动，是以领域结构为依据拆分问题；测试驱动，就是将问题拆分为一个个测试案例，等等。拆分后的小问题，就是应对问题的单位、解决问题、验证解答的单位，这些后续的活动都挂载在这个小问题上，同时这个小问题也是将任务、资源、进度、协同等等这些过程要点牵引起来的那个由头，就像火车头“驱动”着一串车厢一样。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>“面向”，作用于解空间，讲的是构建答案的单位。面向对象，就是以对象作为答案的搭建单元；面向服务，就是以服务作为构建答案的搭建单元。这种单位，往往把整个构建工作分成两部分，先要建造这些单位，然后组合这些单位。就像面向砖瓦的建筑，就分成了制造砖瓦和砌砖。当然过程中可能不只有一种单位，在不同的阶段、不同的层次上有不同的单位，比如服务也是由对象、组件这些单位构成的。</p>

<p>在“问题空间与解空间”<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>这个一般思维框架中，“驱动”与“面向”两个动词，基本上涉及了从问题分析解决的整个过程。</p>

<p>那什么样的东西适于驱动，什么样的东西适于面向呢？正在做一些思考总结，此处先挖坑待填。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>类似的观点在之前的博文中已有谈及，但没有明确谈为什么用“驱动”这个词。——<a href="/blog/filter/filter.html?filterName=series&amp;filterValue=%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E8%BF%87%E7%A8%8B%E7%9A%84%E9%A9%B1%E5%8A%A8%E6%8A%80%E6%9C%AF&amp;filterDes=Series%3A%20%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E8%BF%87%E7%A8%8B%E7%9A%84%E9%A9%B1%E5%8A%A8%E6%8A%80%E6%9C%AF">《架构设计过程的驱动技术》</a>、 <a href="/blog/2016/08/14/question2/">《问题空间与解空间》</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="/blog/2016/08/14/question2/">《问题空间与解空间》</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
