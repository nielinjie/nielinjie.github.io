<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 架构 | 聂同学]]></title>
  <link href="http://www.nietongxue.xyz/blog/categories/jia-gou/atom.xml" rel="self"/>
  <link href="http://www.nietongxue.xyz/"/>
  <updated>2015-10-14T13:59:29+08:00</updated>
  <id>http://www.nietongxue.xyz/</id>
  <author>
    <name><![CDATA[nielinjie]]></name>
    <email><![CDATA[nielinjie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[架构设计过程的驱动技术（上）]]></title>
    <link href="http://www.nietongxue.xyz/blog/2015/10/09/driving/"/>
    <updated>2015-10-09T21:31:05+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2015/10/09/driving</id>
    <content type="html"><![CDATA[<p>驱动技术是方法论的第一步，是对目标问题进行分割，并分别进行管理跟进的技术。</p>

<p>我们常说“这个问题从何处着手呢？”——驱动技术要做的就是：找到从何着手，跟进着手过程，评估着手效果，归纳着手结论。</p>

<!--more-->


<p>具体到架构设计方法论，驱动技术要解决的就是：</p>

<ol>
<li>如何将目标系统分解为可以应对的问题。</li>
<li>如何跟进应对这些问题的过程。</li>
<li>如何评价问题被应对的程度。</li>
<li>如何归纳所有应对结果并形成架构设计。</li>
</ol>


<p>其中第一条，是区别各驱动技术的要点。也是理解和选择各驱动技术的要点。分解依据不同，跟进、评价、归纳等机制也相应不同。</p>

<p>从这个角度看，架构设计中常见的驱动技术有：</p>

<ol>
<li><p>特征驱动，或者叫需求驱动。分解依据是目标系统的特征。特征驱动是收集筛选系统的特征，并跟进特征的实现措施的驱动技术。经典的架构设计方法论多采用这种驱动技术。</p>

<p> 特征驱动将系统特征分为功能、质量、约束三个类型，从中选取“典型”的作为架构设计应对的问题。通过应用不同的架构技术，对每个选定特征制定实现策略。</p></li>
<li><p>风险驱动。分解依据是目标系统生命周期中蕴藏的风险。风险驱动是发现生命周期中的风险，并跟进风险的控制措施的驱动技术。风险驱动是“不完备架构设计方法”的主要驱动技术。作为本人团队最常用的驱动技术，前期博客已经做了阐述<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p></li>
<li><p>模式驱动。分解依据是根据团队积累的架构模式（也包括反模式）。模式驱动是筛选适用的模式，并跟进模式的应用措施的驱动技术。</p>

<p> 严格的说，模式驱动不是一种顶层的驱动技术，因为模式本身，并不是对目标系统本身的分解（而特征和风险则是）。如果我们说得完整一点，应该是：“为了实现xx特征（或者控制xx风险），我们应用xx模式。”。所以模式驱动其实是在特征驱动或风险驱动之后接着应用的驱动技术。但实际很多情况下，团队只要稍微知道要设计的系统的类型，脑中已经冒出了许多模式，后续也是依据这些模式的应用来跟进，可以说淡化了原有的顶层驱动技术。</p></li>
<li><p>直觉驱动。或者说不使用任何驱动技术。当团队处于非常熟悉的领域、平台、技术栈的时候，直觉驱动确实存在。这种情况下架构设计基本已不需要“过程”来管控。不需要过程管控的架构设计是否合理，团队中意见并不一致，个人认为要慎重<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</p></li>
</ol>


<p>（下篇讲讲何时使用何种驱动技术，待链接）</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="/blog/filter/filter.html?filterName=series&amp;filterValue=%E6%95%8F%E6%8D%B7%E7%9A%84%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1&amp;filterDes=Series%3A%20%E6%95%8F%E6%8D%B7%E7%9A%84%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1">系列：敏捷的架构设计</a><br/><a href="/blog/2015/08/13/scenario/">以场景思维辅助风险驱动架构设计</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="/blog/2015/10/04/process/">架构设计不能忽视过程产出</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[架构设计不能忽视过程产出]]></title>
    <link href="http://www.nietongxue.xyz/blog/2015/10/04/process/"/>
    <updated>2015-10-04T10:25:03+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2015/10/04/process</id>
    <content type="html"><![CDATA[<p>跟开发过程中其他环节相比，架构设计往往更加依赖于架构师个人的经验和决定。
有些架构师和团队对架构设计过程比较随意。
我们常看到的介绍架构设计的文章，也多侧重于介绍设计结论。这些都似乎使得架构设计倾向强调最终结论，不太重视中间过程和过程产出。</p>

<p>最终结论固然是重要的，但过程产出也有重要意义。从几个方面来看：</p>

<!--more-->


<ol>
<li>架构设计需要迭代和回朔。在架构设计和执行的整个过程中，往往需要反复迭代，逐次逼近理想结论。期间有很多的回溯反复过程。如果没有必要的过程产出，很难有效地进行这种迭代。</li>
<li>架构设计需要沟通和协作。架构设计作为开发工作的一个环节，与其他环节有许多沟通协作。特别是，实现环节将直接使用架构设计结论。这些沟通协作要求交付物<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> 有说服力，合作团队希望接受包括来龙去脉和前因后果的设计产出，而不仅仅是一个最终结论。过程产出能支持设计结论，提供说服力。</li>
<li>架构设计需要积累和分享讨论。架构设计结论作为组织内的高价值知识，需要有效地积累和分享讨论。这同样要求设计结论有系统性、有说服力，需要有过程产出。</li>
</ol>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>交付物，不一定是书面交付物。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技术栈是架构设计的目的么？]]></title>
    <link href="http://www.nietongxue.xyz/blog/2015/10/02/techstack/"/>
    <updated>2015-10-02T22:46:38+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2015/10/02/techstack</id>
    <content type="html"><![CDATA[<p>不是。</p>

<p>相比于架构设计的目的，技术栈更像是架构执行的手段。</p>

<p>“为了实现那样的架构设计，我们将使用这些的技术。……”</p>

<!--more-->


<p>既然架构设计和执行是连贯不分的一个整体，那么区分前者的输出和后置的输入有什么意义呢？我认为是有意义的。这是孰本孰末，孰因孰果的问题。试想这样的情况：架构执行过程中，如果发现栈中某技术不适用，是否可以更改？如果是执行的手段，我们可以便宜更改，只要不偏离设计结论；如果是设计的目的，我们不能随意更改，因为要改结论需要从论点、论据、论证一一检视更改。</p>

<p> <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>另一个角度说来，技术栈也确实常作为架构设计的重要产出物，体现着设计结论的一些方面。所以类似“XX技术在XX公司的应用”这样的句型，作为架构分享文章的标题经常出现。读到这样的文章，希望同学们以正确的姿势打开，从技术栈的展示中，窥见架构设计的来龙去脉。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[“别让牛人写代码”]]></title>
    <link href="http://www.nietongxue.xyz/blog/2015/09/27/nocoolcode/"/>
    <updated>2015-09-27T16:51:48+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2015/09/27/nocoolcode</id>
    <content type="html"><![CDATA[<p>同意。</p>

<!--more-->


<p>牛人写的代码固然威力无穷，奈何太贵。不仅现在贵，将来更贵。</p>

<p>一般人看不懂，改不动，又不敢丢。活活贵死整个团队。</p>

<p>如果有别的办法，不要依赖于牛人写代码。</p>

<p><img src="/images/nocoolcode/nocoolcode.jpg" width="350"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[“伪代码是好代码”]]></title>
    <link href="http://www.nietongxue.xyz/blog/2015/09/25/fakecode/"/>
    <updated>2015-09-25T20:51:27+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2015/09/25/fakecode</id>
    <content type="html"><![CDATA[<p>可以这么说。</p>

<!-- more -->


<p>通常伪代码都直接描述了某个层面的业务逻辑，是比较典型的领域特定语言（DSL）。同时，也往往符合DDD中对统一语言的期望。</p>

<p>在系统中，如果有一个层次的代码可以集中精力于表达业务逻辑，而不用操心各种质量约束，无疑是理想的。</p>

<p>伪代码确实是好代码，如果它能如愿运行的话。</p>

<p><img src="/images/fakecode/fakecode.jpg"></p>
]]></content>
  </entry>
  
</feed>
