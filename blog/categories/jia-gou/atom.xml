<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 架构 | 聂同学]]></title>
  <link href="http://nielinjie.github.io/blog/categories/jia-gou/atom.xml" rel="self"/>
  <link href="http://nielinjie.github.io/"/>
  <updated>2015-09-27T17:38:38+08:00</updated>
  <id>http://nielinjie.github.io/</id>
  <author>
    <name><![CDATA[nielinjie]]></name>
    <email><![CDATA[nielinjie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[同学说：伪代码是好代码]]></title>
    <link href="http://nielinjie.github.io/blog/2015/09/27/fakecode/"/>
    <updated>2015-09-27T16:51:27+08:00</updated>
    <id>http://nielinjie.github.io/blog/2015/09/27/fakecode</id>
    <content type="html"><![CDATA[<p>基本上，是同意的。</p>

<!-- more -->


<p>通常伪代码都直接描述了某个层面的业务逻辑，是比较典型的领域特定语言（DSL）。同时，也往往符合DDD中对统一语言的期望。</p>

<p>在系统中，如果有一个层次的代码可以集中精力于表达业务逻辑，而不用操心各种质量约束，无疑是理想的。</p>

<p>所以，伪代码确实是好代码，如果它能如愿运行的话。</p>

<p><img src="/images/fakecode/fakecode.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[以场景思维辅助风险驱动架构设计]]></title>
    <link href="http://nielinjie.github.io/blog/2015/08/13/scenario/"/>
    <updated>2015-08-13T15:15:34+08:00</updated>
    <id>http://nielinjie.github.io/blog/2015/08/13/scenario</id>
    <content type="html"><![CDATA[<p>“风险驱动架构设计”<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>需要架构师和团队及时发现风险。这一点是依赖团队经验的。这样的依赖常常引发人们的焦虑：是否所有的风险都被及时发现进而处理了？</p>

<p>不用说缺乏相关经验的团队，即使是经验丰富的团队，随着进入陌生的业务领域或技术环境，也不能避免再次陷入到这样的焦虑之中。</p>

<!-- more -->


<p>如何缓解焦虑，建立大家的信心呢？我们做了一些尝试——</p>

<p>每当我们害怕遗漏的时候，我们有个朴素的方法：列出所有可能，一一检视，从中挑出那些需要处理的。</p>

<p>怎么才能列出“所有”可能的工程风险呢？我们尝试的是场景思维：我们以软件工程中常见的场景为线索——</p>

<ul>
<li>系统处理典型需求的场景</li>
<li>发布新功能的场景</li>
<li>业务量发生显著变化的场景</li>
<li>常见故障和应对的场景</li>
</ul>


<p>根据业务领域、技术环境以及团队结构等因素的不同，这些场景中会发生不同的事件。通过虚拟这些场景和其中的事件，一一检视这些事件中可能蕴含的风险，就可以使我们发现风险的工作系统化。</p>

<p>有同学问到：去寻求一个“完整的”风险列表，不是跟“恰如其分的、不完备的”原则矛盾了么？并不是这样的。我们说的要恰如其分和不完备，指的是架构活动不追求全面，而不是说考虑范围不考虑全面。通过场景思维剪除掉不必要应对的风险，以后的架构活动仍然是恰如其分的。</p>

<p>我们可以从另一个角度来概述这件事情——</p>

<p>“不能发现所有风险”这个风险，是我们可能需要应对的第一个风险。如果需要应对，那我们的措施就是“场景思维法”。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="/blog/2014/03/31/aa1/">“风险驱动架构设计”</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[言论：雪人（五）]]></title>
    <link href="http://nielinjie.github.io/blog/2015/08/04/said-xueren4/"/>
    <updated>2015-08-04T21:10:16+08:00</updated>
    <id>http://nielinjie.github.io/blog/2015/08/04/said-xueren4</id>
    <content type="html"><![CDATA[<p>“最近好多展览，这些雪人真是太漂亮了！”<br/>
“是的。可惜不能看到建造和维护这些雪人的展览。”</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[架构工作中的三个关键词]]></title>
    <link href="http://nielinjie.github.io/blog/2015/07/29/3words/"/>
    <updated>2015-07-29T10:21:30+08:00</updated>
    <id>http://nielinjie.github.io/blog/2015/07/29/3words</id>
    <content type="html"><![CDATA[<p>这里是我在架构工作中强调的三个关键词。是我工作桌面上保留时间最长的一个Post，也许会一直保留下去吧。</p>

<!-- more -->


<h4>Structure</h4>

<p>结构。在有些观点中，结构就是架构的定义，比如：“架构就是系统中的元素以及它们之间的关系”。<br/>
架构的结果最终被体现为系统中的结构，架构的价值，也是通过系统中的结构体现。</p>

<h4>Risk</h4>

<p>风险。解决风险是架构的目的。所有的架构活动，都是为了消除或者减轻工程风险。<br/>
把风险作为架构过程的驱动力，是进行“恰如其分”的架构过程的有效选项。</p>

<h4>View</h4>

<p>视野。架构师需要随时与开发团队共享视野。<br/>
一方面保证开发团队对架构的认识和认同，另一方面保证架构师对需求的了解。</p>

<h4>最后</h4>

<p>来个靓照。是的，它有些沧桑了。:-D</p>

<p><img src="/images/3words/post.jpg" width="300"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[问架构师候选人什么问题？]]></title>
    <link href="http://nielinjie.github.io/blog/2015/07/25/questions/"/>
    <updated>2015-07-25T09:57:11+08:00</updated>
    <id>http://nielinjie.github.io/blog/2015/07/25/questions</id>
    <content type="html"><![CDATA[<p>面试时交流时间有限，应该问你的架构师候选人什么问题？</p>

<!--more-->


<h4>Q1：架构工作有些什么步骤？架构工作与其它开发工作的关系如何？……</h4>

<p>有些架构师认为此类问题比较重要。只有弄清楚了这些问题，才能算是掌握了架构方法论，能够保证可控可重复地进行架构设计。而另一些架构师则认为，只要能产出切实可用的系统，架构设计是什么，它如何达成的都不重要。</p>

<p>个人认为方法论是重要的。你团队中的架构过程和成果需要积累和传承，适当的方法论可以在架构师（包括开发团队）之间统一讨论语言和产出物，利于积累和传承。</p>

<p>特别是，如果你认为你的架构师应该负责建立或提高架构和开发的团队和流程，你需要问此类问题。</p>

<h4>Q2：假设现在需要搭建XX类型的系统，你如何思考？</h4>

<p>这类问题是开放式的主观题。涵盖范围很广，可以全面地考察架构师的思维方式、方法论、知识、经验，所以被广泛使用。这类问题很好用，但需要注意。它常常引来候选人的长篇大论，从方法到模式，从前台到后台，从需求到设计，…… 所以交流过程中需要控制和引导，避免被淹没在回答当中，当候选人提到了想要重点考察的领域，需要有针对性地进行专门的提问和讨论。</p>

<h4>Q3：假设现在遇到X问题，解决方案是什么？</h4>

<p>这类问题考察的是架构师的经验。如果他<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>遇到和解决过同类问题，并且记住了解决方案，他就能回答，如果没有，就不能回答。因为没有人能够在四目相对的几秒十几秒时间里解决一个陌生的架构问题。要知道架构决策和设计不是一个靠急智能够胜任的工作。</p>

<p>所以如果你需要架构师招聘进来以后能够立即解决一个问题——也就是你提问中的那个问题，你需要问这类问题。个人认为这种情况要尽量避免，因为这样就放弃了对其它方面素质的考量和选择。</p>

<h4>Q4：AA设计模式中……、BB数据库中……、CC算法中……、DD类里面……</h4>

<p>这类是涉及到某些领域的细节问题，如果你需要架构师兼任此领域的技术专家（这种情况常见），那你需要问这类问题。</p>

<p>有些架构师可能对某些领域的细节问题解决能力不足，但他隔离和描述问题的能力很强，进而可以很快从外部找到并应用现成的解决方案。这样的架构师虽然称不上技术专家，但一定程度上其实可以解决大量的具体问题。</p>

<p>依据你面对的问题、团队规模及可以负担的成本，你需要判断是否需要真正的技术专家。</p>

<h4>Q5：在你做过的YY事情中，是如何考虑ZZ问题的？</h4>

<p>这类问题跟Q2问题功能相似。同时它可以避免Q2问题的一个弱点：万一候选人没有XX类型系统的工作经验，考察就没办法进行下去。除非：你的职位必需这类系统的知识和经验。这种情况常见，比如招聘互联网产品的架构师往往认为必需“大并发系统”的知识和经验。</p>

<h4>Q6：最近在干什么？学什么？比较关注什么？</h4>

<p>个人比较喜欢此类问题。但这类问题完全没有参考答案，需要提问人注意从回答中挖掘想要的信息。比如候选人对职业生涯的规划、对技术走势的判断等等。否则问答完了之后，对候选人是否适合职位的判断帮助不大。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>文中所有的“他”，均不特指男性。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
