<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 架构 | 聂同学]]></title>
  <link href="http://nielinjie.github.io/blog/categories/jia-gou/atom.xml" rel="self"/>
  <link href="http://nielinjie.github.io/"/>
  <updated>2015-05-24T01:48:07+08:00</updated>
  <id>http://nielinjie.github.io/</id>
  <author>
    <name><![CDATA[nielinjie]]></name>
    <email><![CDATA[nielinjie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[节选译：迁移至云架构（一）]]></title>
    <link href="http://nielinjie.github.io/blog/2015/05/23/cloud/"/>
    <updated>2015-05-23T11:15:31+08:00</updated>
    <id>http://nielinjie.github.io/blog/2015/05/23/cloud</id>
    <content type="html"><![CDATA[<p>原文：<a href="http://pivotal.io/platform-as-a-service/migrating-to-cloud-native-application-architectures-ebook">Migrating to Cloud-Native Application Architectures</a></p>

<p>本文为”节选译“，不是逐句逐段翻译，是意译和无废话译。</p>

<!--more-->


<h1>云架构的兴起</h1>

<p>创新型公司遇到的问题是：</p>

<ul>
<li>创新的速度</li>
<li>总是可用的服务</li>
<li>Web的伸缩</li>
<li>移动为中心的用户体验</li>
</ul>


<p>迁移到云是一个自然地选择，”云架构“是这些公司获得搅局能力的关键。</p>

<p>“云”指的是：任何计算环境，其中的资源（比如计算、网络、存储等）可以随时按需、自助地提供和释放。</p>

<h2>为什么需要“云架构”？</h2>

<h3>速度</h3>

<p>互联网公司声称每天部署几百次，为何需要频繁部署？如果你可以每天部署几百次，那么你可以几乎实时纠正错误；如果你可以实时纠正错误，那你可以进行更多的试错；如果你可以更多的试错，那你可以进行更广泛地实验。这很可能带来下一个竞争优势。</p>

<p>云基础设施灵活和自助的特性正好满足要求。就提供一个新的应用环境来说，调用一个云服务的API当然比传统流程快得多。再加上可以在持续集成\构建环境中加入钩子和其他联动，可以进一步加快速度。</p>

<h3>稳定</h3>

<p>云架构平衡了快速和稳定、可用、持久。</p>

<p>前面已经提到，云架构提供了迅速纠正错误的能力。注意，这里<strong>不是指防止错误</strong>。</p>

<p>那么我们如何即快速又稳定呢？</p>

<ul>
<li><p>可视化<br/>
我们的架构必须提供工具来及时发现失败。我们需要监测整个系统：定义一个”正常状态“，及时发现偏差，并能找到导致偏差的部件。功能丰富的测量、监控、报警、数据可视化框架和工具是云架构的重要组成部分。</p></li>
<li><p>缺陷隔离<br/>
为了控制失败带来的风险，我们需要限制被失败影响的部件或者特性。如果仅仅因为推荐引擎失效就导致所有人不能买东西，那肯定是灾难性的。单体架构的系统往往是这种情形。云架构系统经常采用”微服务“<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，通过采用微服务构建系统，我们可以把失败限制在单个微服务中。当然，需要”缺陷容忍“特征的配合。</p></li>
<li><p>缺陷容忍<br/>
将系统解构为独立部署的部件还不够。我们还必须防止一个部件中的失败在部件的依赖者中变成一个连环失败。Mike Nygrad描述了<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>几种缺陷容忍的模式，其中最常用的是”断流器“。软件断流器跟电路断流器非常相似：通过断开部件之间的连接来阻止连环失败的产生发展。断流器往往还能在断开的时候提供合适的默认行为。后续会进一步讨论。<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p></li>
<li>自动恢复<br/>
如果发现某些地方有问题，那我们一般简单重启或者重新部署相关的服务。云架构一般不需要人工干预，我们采用自动发现和恢复。<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></li>
</ul>


<h3>伸展</h3>

<p>当需求增长，我们需要伸展我们的容量来服务需求。以前我们更多地采用纵向伸展：买更强大的服务器。</p>

<p>创新公司使用两个创新性的办法来解决问题：</p>

<ul>
<li>不买强大的服务器，而是把应用实例横向伸展到大量的便宜机器上去。这些机器容易得到而且到位很快。</li>
<li>将没有充分利用的强大服务器虚拟化成多个小服务器，在上面部署独立的负载。</li>
</ul>


<p>当公用云出现，这两个办法得到了发展：虚拟化方面由云供应商来处理，用户专心处理横向伸展。最近另一个趋势出现：作为应用部署的单元，虚拟服务器正在往“容器”转变。后续进一步讨论。<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></p>

<p>这种转变进一股降低了创新门槛。部署和维护软件的成本都降低了。迎合需求改变软件的速度也非常快。</p>

<p>这些收益的代价就是，我们必须面向横向伸展来架构我们的应用。云的灵活性要求“生命短促”，不仅要能快速建立应用实例，还必须能快速安全地销毁实例。这是一个“状态管理”的问题，可销毁和可持续性的关系如何？传统的方法比如“集群会话”和“共享文件系统”都不能很好地伸展。</p>

<p>云架构的另一个特点是状态外化，将状态交给外部状态管理服务（比如数据网格、缓存、对象存储等），同时保持应用实例本身是“无状态”的。无状态的应用实例可以快速地创建和销毁，跟外部状态管理服务也可以快速连接和分开，这样就可以快速响应需求的变化。当然这也要求外部状态管理服务本身是可以伸展的。多数的云服务商已经意识到这一点，提供了很健壮的类似服务。</p>

<h3>移动应用和客户端多样性</h3>

<p>应用需要”随时随地“满足需求。访问成几何级数增长。云架构予以支持。</p>

<p>移动平台是多样化的，移动应用经常需要跟遗留服务或者云中的微服务打交道。这些服务不可能满足各种移动平台的用户的不同需求。将整合多样性的任务交给移动开发会增加网络延迟和流量，带来响应慢和电池消耗。云架构可以将整合任务放到服务器端，比如通过模式”API GateWay"。后续进一步讨论。<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>见“微服务”（链接待建）<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>书：<em>Release It!</em><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>见“断流器”（链接待建）<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>要求微服务的一些特性，见“十二因子应用”（链接待建）。<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>见“容器化”（链接待建）<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p>见“API GateWay和边界服务“（链接待建）<a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[质量保障措施参考清单（三）]]></title>
    <link href="http://nielinjie.github.io/blog/2015/04/10/resilient3/"/>
    <updated>2015-04-10T10:18:14+08:00</updated>
    <id>http://nielinjie.github.io/blog/2015/04/10/resilient3</id>
    <content type="html"><![CDATA[<p>（<a href="/blog/2015/04/10/resilient2/">接上篇</a>）</p>

<!-- more -->


<h2>业务正确性和容错性</h2>

<p>系统不仅需要业务功能结果正确，还需要在业务发生问题的时候能够尽量多的提供诊断和恢复支持。</p>

<h3>设计时</h3>

<p>设计时可以识别的设计要求大致有：</p>

<ul>
<li>业务错误可以回查。</li>
<li>业务过程可以回查。</li>
<li>业务操作可以回查。</li>
<li>系统故障情况下业务（一定程度上）可以持续。</li>
</ul>


<p>为满足此要求，需要：</p>

<ul>
<li>定义业务过程、业务状态。</li>
<li>记录业务过程和状态的变化。</li>
<li>为各个状态定义业务备案。</li>
<li>记录业务操作。</li>
</ul>


<h3>业务接入时</h3>

<ul>
<li>业务被误用。

<ul>
<li>明确的业务定位</li>
</ul>
</li>
<li>系统之间业务状态不正确或不明确。

<ul>
<li>记录业务进出口状态。</li>
</ul>
</li>
</ul>


<h3>日常趋势</h3>

<ul>
<li>事故趋势恶化

<ul>
<li>业务逻辑有问题？</li>
<li>用户体验有问题？

<ul>
<li>用户体验数据</li>
</ul>
</li>
<li>需要事故记录</li>
</ul>
</li>
</ul>


<h3>事故时</h3>

<ul>
<li>系统操作中断，比如可用性事故引起。

<ul>
<li>需要各个状态定义业务备案。</li>
</ul>
</li>
<li>事后发现业务结果不正确。

<ul>
<li>记录业务过程状态变化。</li>
</ul>
</li>
<li>系统错误

<ul>
<li>大范围错误 &ndash; 归结为<a href="/blog/2015/04/10/resilient2/">可用性事故</a>。</li>
<li>局部错误 &ndash; 归结为bug。</li>
<li>需要系统错误率实时监控和报警。</li>
<li>需要系统错误持续记录和分析。</li>
</ul>
</li>
</ul>


<h3>小结</h3>

<p>综上，为持续保障系统正确性，需要采取的措施有：</p>

<ul>
<li><strong>明确的业务定位。</strong>以及定期review。</li>
<li><strong>定义各个业务过程、业务状态。</strong></li>
<li><strong>业务过程和业务状态的变化的记录。</strong></li>
<li><strong>各个状态定义业务备案。</strong></li>
<li><strong>业务操作的记录。</strong></li>
<li><strong>业务进出口状态的记录。</strong></li>
<li><strong>用户体验数据持续记录和分析。</strong></li>
<li><strong>系统错误率持续监控和阙值报警。</strong></li>
<li><strong>系统错误持续记录和分析。</strong></li>
<li><strong>事故记录与分析。</strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[质量保障措施参考清单（二）]]></title>
    <link href="http://nielinjie.github.io/blog/2015/04/10/resilient2/"/>
    <updated>2015-04-10T10:18:14+08:00</updated>
    <id>http://nielinjie.github.io/blog/2015/04/10/resilient2</id>
    <content type="html"><![CDATA[<p>（<a href="/blog/2015/04/09/resilient/">接上篇</a>）</p>

<!-- more -->


<h2>可用性</h2>

<p>可用性风险通常比较被重视，企业默认架构中往往有较多应对措施。而且很多可用性风险与<a href="/blog/2015/04/09/resilient/">性能与容量风险</a>有关，所以这里总结的风险和保障措施显得比较少。</p>

<h3>设计时</h3>

<p>企业默认架构中一般包含可用性的基本应对：</p>

<ul>
<li>HA方案，比如热备冷备及相关切换方案等。</li>
<li>容灾方案</li>
</ul>


<h3>业务接入时</h3>

<p>一般不会产生可用性风险。除非超过系统容量造成系统不可用。这个风险<a href="/blog/2015/04/09/resilient/">在“性能与容量”部分讨论</a>。</p>

<h3>日常趋势</h3>

<ul>
<li>事故趋势恶化。</li>
<li>资源消耗异常。（<a href="/blog/2015/04/09/resilient/">在“性能与容量”部分讨论</a>。）</li>
</ul>


<h3>事故时</h3>

<p>可用性事故一般有：</p>

<ul>
<li>系统失去响应

<ul>
<li>容量问题造成的。（<a href="/blog/2015/04/09/resilient/">在“性能与容量”部分讨论</a>。）</li>
<li>某个（某些）节点失去响应造成。

<ul>
<li>需要各节点可用性数据。</li>
<li>节点可拔插。</li>
</ul>
</li>
</ul>
</li>
<li>系统大范围报错

<ul>
<li>诊断用现场实时数据。（<a href="/blog/2015/04/09/resilient/">在“性能与容量”部分讨论</a>。）</li>
</ul>
</li>
</ul>


<p>为及时发现可用性事故，我们需要：</p>

<ul>
<li>可用性数据实时监控和报警</li>
</ul>


<h3>小结</h3>

<p>综上，为持续保障系统可用性，需要采取的措施有：</p>

<ul>
<li><strong>预先设计的HA和容灾方案。</strong></li>
<li><strong>事故记录与分析。</strong></li>
<li><strong>可用性数据持续监控与阙值报警。</strong></li>
<li><strong>各节点可用性实时数据。</strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[“服务化”]]></title>
    <link href="http://nielinjie.github.io/blog/2015/04/09/service/"/>
    <updated>2015-04-09T11:11:07+08:00</updated>
    <id>http://nielinjie.github.io/blog/2015/04/09/service</id>
    <content type="html"><![CDATA[<p>“服务化”，就是既有系统进化为“服务”的努力。</p>

<p>什么是服务？每个架构师都有不同的定义，在不同的场景下可能也有不同的定义。</p>

<!-- more -->


<p>在各系统“服务化”的场景中，我们对“服务”的定义是：</p>

<blockquote><p><strong>自管理的业务能力。</strong></p></blockquote>

<p>这个定义里有两个要点：</p>

<ol>
<li>自管理。自管理意味着服务自身对服务内容和服务质量负责。而不是用户负责或者双方共同负责。同时，也意味着对服务内容和质量有定义和进化的权利。</li>
<li>业务：服务合同以业务为依据制定。比如：

<ul>
<li>服务内容，只包括某领域业务范围的服务，而不传递其他领域的服务。</li>
<li>服务粒度，以业务场景为依据划分服务和设计交互。</li>
<li>服务形式，以最大限度支持业务的变化为依据制定。</li>
</ul>
</li>
</ol>


<p>系统“服务化”实践中，我们用三个线索来思考改善这两个要点：</p>

<ol>
<li>系统应该/可以提供何种服务？：

<ol>
<li>系统的业务定位如何？即它在所参与的企业活动中的位置如何？</li>
<li>这种定位是否理想？可能如何进化？</li>
</ol>
</li>
<li>系统以何种形式提供服务？

<ol>
<li>基于所处的业务定位，何种服务形式可以适应业务快速发展？</li>
<li>基于所处的企业IT环境，何种服务形式便于其他系统使用？</li>
</ol>
</li>
<li>系统如何实现（或改善）自管理能力？<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>

<ol>
<li>“服务”对系统各方面质量特别是运行时质量提出了不一样的要求。</li>
<li><a href="blog/filter/filter.html?filterName=series&amp;filterValue=%E8%B4%A8%E9%87%8F%E4%BF%9D%E9%9A%9C%E6%8E%AA%E6%96%BD%E5%8F%82%E8%80%83%E6%B8%85%E5%8D%95&amp;filterDes=Series%3A%20%E8%B4%A8%E9%87%8F%E4%BF%9D%E9%9A%9C%E6%8E%AA%E6%96%BD%E5%8F%82%E8%80%83%E6%B8%85%E5%8D%95">系列：质量保障措施参考清单</a></li>
</ol>
</li>
</ol>


<h4>ps: FAQ</h4>

<p>Q：“服务化”是为了减小系统开发维护成本么？<br/>
A：可能碰巧有这个效果，但目标不是减小单个系统的成本，而是减小企业范围的总成本。减小的是：业务变化时，IT系统适应业务并支持业务所需的成本。</p>

<p>Q：“服务化”是“组件化”么？<br/>
A：“服务化”是使既有既有系统形成适当的“组件”的过程。可以说“服务化”是为了“组件化”。“组件化”包括两个方面：</p>

<ol>
<li>形成适当的“组件”</li>
<li>形成“组件”间有效组合并管理的机制。</li>
</ol>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>主要考虑服务质量部分，服务内容部分已在1.中考虑。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[质量保障措施参考清单（一）]]></title>
    <link href="http://nielinjie.github.io/blog/2015/04/09/resilient/"/>
    <updated>2015-04-09T10:18:14+08:00</updated>
    <id>http://nielinjie.github.io/blog/2015/04/09/resilient</id>
    <content type="html"><![CDATA[<p>为更好的应对业务快速变化带来的挑战，许多系统正在从“关联系统”角色向着“<a href="/blog/2015/04/09/service/">服务</a>”角色转变。这样的转变对系统各方面质量特别是运行时质量提出了不一样的要求。如何管理并始终满足这些要求，打造弹性、容错、可管理的服务，是我们需要重点考虑的问题。</p>

<!-- more -->


<p>作为“<a href="/blog/2014/03/31/aa1/">风险驱动的架构设计</a>”的实践者，我们以系统运行过程各个阶段可能遇到的风险为线索，整理我们可能采取的保障措施。——</p>

<ul>
<li>设计时</li>
<li>业务接入时</li>
<li>日常趋势</li>
<li>事故时</li>
</ul>


<h2>性能和容量</h2>

<h3>设计时</h3>

<p>需要根据业务目标确定适当性能理想值。比如：</p>

<ul>
<li>响应时间</li>
<li>吞吐量</li>
</ul>


<h3>业务接入时</h3>

<p>新的业务接入，不论是新的系统接入还是旧有接入系统业务量发生变化。</p>

<ul>
<li>新系统接入时应该声明业务量和变化趋势。</li>
<li>接入系统业务量（即将）发生显著变化时应该声明。</li>
<li>需要知晓当前系统可以承受的业务量。</li>
</ul>


<h3>日常趋势</h3>

<p>系统运行中，几个方面的风险需要持续防范：</p>

<ul>
<li>性能表现恶化</li>
<li>业务量异常变化</li>
<li>资源消耗异常变化</li>
</ul>


<p>为此，我们需要：</p>

<ul>
<li>性能指标的周期性监控记录。</li>
<li>业务总量的周期性监控记录。</li>
<li>各接入系统业务量周期性监控记录。</li>
<li>资源消耗量周期性监控记录。</li>
</ul>


<h3>事故时</h3>

<p>性能事故指的是性能表现发生急剧恶化，用户受到明显影响。性能事故的原因可以分两种情况分析——</p>

<ul>
<li>业务量发生变化

<ul>
<li>各接入系统业务量及调用量。</li>
<li>隔离、特别是热隔离。</li>
<li>扩展性，特别是横向扩展。</li>
</ul>
</li>
<li>业务量没有明显变化

<ul>
<li>受依赖系统拖累

<ul>
<li>依赖系统调用记录。</li>
<li>替代方案或后备方案。</li>
</ul>
</li>
<li>某（些）节点性能异常

<ul>
<li>各节点的性能数据。</li>
<li>节点可（热）拔插。</li>
</ul>
</li>
<li>变更 &ndash; 环境、代码

<ul>
<li>诊断用现场数据</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>为及时发现性能事故和区分两种情况，我们需要：</p>

<ul>
<li>性能数据，实时监控和阙值报警。</li>
<li>总业务量，包括时间和功能分布。</li>
</ul>


<h3>小结</h3>

<p>综上，为持续保障系统性能表现，需要采取的措施有：</p>

<ul>
<li><strong>根据业务目标有适当的性能和容量的理想值。</strong>影响因素变化后或者周期性地需要review。</li>
<li><strong>明确当前系统最大承受业务量。</strong>影响因素变化后或者周期性地需要review。</li>
<li><strong>确保新系统接入或接入系统业务量变化时声明业务量和变化趋势。</strong>建立机制，包括事后回朔机制。</li>
<li><strong>系统性能指标的阙值报警。</strong></li>
<li><strong>系统性能指标的持续监控记录和分析。</strong></li>
<li><strong>业务总量的持续监控和分析。</strong></li>
<li><strong>各接入系统业务量持续监控和分析。</strong></li>
<li><strong>资源消耗量持续监控和分析。</strong></li>
<li><strong>各接入系统业务量及调用量实时数据。</strong></li>
<li><strong>有能力实时隔离接入系统。</strong></li>
<li><strong>容量可扩展性，特别是横向扩展。</strong></li>
<li><strong>依赖系统调用记录的实时数据。</strong>包括调用量和性能。</li>
<li><strong>依赖系统替代方案或后备方案。</strong>至少有业务层面后备方案。</li>
<li><strong>各节点的性能指标的实时数据。</strong></li>
<li><strong>各节点可（热）拔插。</strong>拔出后性能和容量可接受。</li>
<li><strong>诊断用现场实时数据。</strong>各节点都需要此类数据，比如线程dump。</li>
</ul>

]]></content>
  </entry>
  
</feed>
