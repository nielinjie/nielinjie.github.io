<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 架构 | 聂同学]]></title>
  <link href="http://www.nietongxue.xyz/blog/categories/jia-gou/atom.xml" rel="self"/>
  <link href="http://www.nietongxue.xyz/"/>
  <updated>2015-11-07T01:48:13+08:00</updated>
  <id>http://www.nietongxue.xyz/</id>
  <author>
    <name><![CDATA[nielinjie]]></name>
    <email><![CDATA[nielinjie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[读TOGAF（一）：企业大火锅]]></title>
    <link href="http://www.nietongxue.xyz/blog/2015/11/07/togaf/"/>
    <updated>2015-11-07T00:05:18+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2015/11/07/togaf</id>
    <content type="html"><![CDATA[<p>Enterprise Continuum， 我称作企业大火锅。</p>

<!--more-->


<p>热气腾腾地沸着。各种物料在里面翻滚，碰撞，成熟，积累。</p>

<p>食客不用看见那么多，眼中只有这一刻的这一坨，先捞去也……</p>

<p><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p><img src="/images/togaf/hot.jpg" width="500"></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>比喻有风险。如有跑偏，概不负责。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[架构设计过程的驱动技术（二）]]></title>
    <link href="http://www.nietongxue.xyz/blog/2015/10/28/driving2/"/>
    <updated>2015-10-28T09:06:49+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2015/10/28/driving2</id>
    <content type="html"><![CDATA[<p>模式驱动不是一种顶层的驱动技术。因为架构模式本身，严格来讲并不是对目标系统本身的分解（而特征和风险则是）。<!--more-->如果说得完整一点，应该是：“为了实现xx特征（或者控制xx风险），我们应用xx模式。”。所以模式驱动其实是在特征驱动或风险驱动之后接着应用的驱动技术。但实际很多情况下，团队只要稍微知道要设计的系统的类型，脑中已经冒出了许多模式，后续也是依据这些模式的应用来跟进，可以说淡化了原有的顶层驱动技术。</p>

<p>由于不是顶层驱动技术，模式驱动很难验证最终解决了问题，比如不能说：“由于我们使用了xx、yy、zz模式，所以我们能完成XX系统。”反过来，对于顶层的驱动技术，就可以说：“由于我们实现了所有典型的特征，所以我们能实现XX系统”，或者，“由于我们遏制了所有（发现了的）风险，所有我们能完成XX系统”。所以如果使用模式驱动，应该要回过头来，借助顶层驱动技术来验证问题的解决。从这个意义上来讲，可以说模式驱动是被顶层驱动嵌套使用的。</p>

<p>特征驱动和风险驱动分解问题时，也会频繁使用模式思维，但这不是模式驱动。比如说特征驱动，整理系统的质量需求的时候，我们常常使用一个“质量需求检查表”。其中列举了特定类型系统常见的质量需求。我们对此一一检视，判别目标系统是否有此需求。这是典型的模式思维。但这里的模式不是架构设计模式，这里也不是将目标系统分解为模式进行跟进。所以不是模式驱动的架构设计。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[方法论]]></title>
    <link href="http://www.nietongxue.xyz/blog/2015/10/26/method/"/>
    <updated>2015-10-26T21:24:20+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2015/10/26/method</id>
    <content type="html"><![CDATA[<p>方法论是路线图，不是轨道。</p>

<!--more-->


<p>想要像火车司机那样一趟又一趟，恐怕不能如愿。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[“架构是进化来的，不是设计来的。”]]></title>
    <link href="http://www.nietongxue.xyz/blog/2015/10/24/evolve/"/>
    <updated>2015-10-24T17:21:53+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2015/10/24/evolve</id>
    <content type="html"><![CDATA[<p>当然。</p>

<!--more-->


<p>但是，每一步的进化都是设计来的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[架构设计过程的驱动技术（一）]]></title>
    <link href="http://www.nietongxue.xyz/blog/2015/10/09/driving/"/>
    <updated>2015-10-09T21:31:05+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2015/10/09/driving</id>
    <content type="html"><![CDATA[<p>驱动技术是方法论的第一步，是对目标问题进行分割，并分别进行管理跟进的技术。</p>

<p>我们常说“这个问题从何处着手呢？”——驱动技术要做的就是：找到从何着手，跟进着手过程，评估着手效果，归纳着手结论。</p>

<!--more-->


<p>具体到架构设计方法论，驱动技术要解决的就是：</p>

<ol>
<li>如何将目标系统<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>分解为可以应对的问题。</li>
<li>如何跟进应对这些问题的过程。</li>
<li>如何评价问题被应对的程度。</li>
<li>如何归纳所有应对结果并形成架构设计。</li>
</ol>


<p>其中第一条，是区别各驱动技术的要点。也是理解和选择各驱动技术的要点。分解依据不同，跟进、评价、归纳等机制也相应不同。</p>

<p>从这个角度看，架构设计中常见的驱动技术有：</p>

<ol>
<li><p>特征驱动，或者叫需求驱动。分解依据是目标系统的特征。特征驱动是收集筛选系统的特征，并跟进特征的实现措施的驱动技术。经典的架构设计方法论多采用这种驱动技术。</p></li>
<li><p>风险驱动。分解依据是目标系统生命周期中蕴藏的风险。风险驱动是发现生命周期中的风险，并跟进风险的控制措施的驱动技术。风险驱动是“不完备架构设计方法”的主要驱动技术。作为本人团队最常用的驱动技术，前期博客已经做了阐述<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</p></li>
<li><p>模式驱动。分解依据是团队积累的架构模式（也包括反模式）。模式驱动是筛选适用的模式，并跟进模式的应用措施的驱动技术。</p></li>
<li><p>直觉驱动。或者说不使用任何驱动技术。当团队处于非常熟悉的领域、平台、技术栈的时候，直觉驱动确实存在。这种情况下架构设计基本已不需要“过程”来管控。不需要过程管控的架构设计是否合理，团队中意见并不一致，个人认为要慎重<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。</p></li>
</ol>


<p>（<a href="/blog/2015/10/28/driving2/">后一篇</a>）</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>本篇中以新系统架构设计为例，但所谈适合其他架构设计，比如架构重整改进、仅设计一个模块等。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="/blog/filter/filter.html?filterName=series&amp;filterValue=%E6%95%8F%E6%8D%B7%E7%9A%84%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1&amp;filterDes=Series%3A%20%E6%95%8F%E6%8D%B7%E7%9A%84%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1">系列：敏捷的架构设计</a><br/><a href="/blog/2015/08/13/scenario/">以场景思维辅助风险驱动架构设计</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p><a href="/blog/2015/10/04/process/">架构设计不能忽视过程产出</a><a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
