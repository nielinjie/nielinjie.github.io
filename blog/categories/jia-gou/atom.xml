<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 架构 | 聂同学]]></title>
  <link href="http://www.nietongxue.xyz/blog/categories/jia-gou/atom.xml" rel="self"/>
  <link href="http://www.nietongxue.xyz/"/>
  <updated>2016-06-13T23:16:12+08:00</updated>
  <id>http://www.nietongxue.xyz/</id>
  <author>
    <name><![CDATA[nielinjie]]></name>
    <email><![CDATA[nielinjie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FAQ：应用架构与技术架构]]></title>
    <link href="http://www.nietongxue.xyz/blog/2016/05/28/avst/"/>
    <updated>2016-05-28T17:15:59+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2016/05/28/avst</id>
    <content type="html"><![CDATA[<p><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>应用架构产出结构。技术架构产出技术。</p>

<p>应用架构的职责是产出并维护一个合理健康的结构。而技术架构所产出技术，则被用作支持这个结构的手段。技术就是手段。</p>

<!--more-->


<p>技术的进化有时候会直接导致结构的变革，这就是技术驱动的团队的情况。而其他情况，可能是大部分情况，技术是在结构的框架和需求中发展。</p>

<p>大部分的团队的技术，来自于“选型”，即从已有技术选择适合自己的，而这个“适合自己”，最重要的标准之一就是适合自己的结构。</p>

<p>技术是局部的，而结构是广泛的。但局部与广泛是相对的。在更宏观层面来看，更微观的结构可能就是技术。任何一项局部技术，它的存在和种种特性，可能需要复杂和高妙的内部结构来支撑。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>通篇以一名应用架构师的视角。我肯定别的架构师有他们自己的看法。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重构，以知识结构为中心（四）]]></title>
    <link href="http://www.nietongxue.xyz/blog/2016/04/16/dev-dc4/"/>
    <updated>2016-04-16T11:10:01+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2016/04/16/dev-dc4</id>
    <content type="html"><![CDATA[<p>为了帮助领域团队凝聚和守护领域知识，我们设计和使用了一些工具。</p>

<!--more-->


<h3>领域模型</h3>

<p>最首要的工具当然是领域模型。但从零开始建立一个有些远水解不了近渴。
我们的想法是识别一点建立一点使用一点，持续地延伸和细化。</p>

<p>当前是划分上下文、区别领域与应用、建立团队的阶段，我们关注点就在上下文之间的边界上和领域与应用的边界上。
那么我们就以上下文之间的边界处和领域与应用之间的边界处作为我们领域模型建立的起点。</p>

<h3>领域边界跟踪表<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></h3>

<p>上下文之间的关系非常重要，关系到知识的依赖类型，也关系到领域团队间的沟通和协作。所以我们特别关注厘清边界处的概念和它们的属主。</p>

<p>团队认识到的边界，往往描述为领域之间的交互场景。这时候需要从中提炼出业务概念和规则。一般以领域实体和领域事件为代表。</p>

<h3>应用差异跟踪表</h3>

<p>领域团队职责是维护业务的一致性。
这要求领域团队除了控制领域知识以外，对领域知识的各种应用形式必须有足够的认识和应对。
这一点在当前领域与应用的边界尚未完全明确的情况下尤为必要。</p>

<p>我们的切入点是总结应用形式之间的差异并制定对差异的应对策略<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</p>

<p>（还有一些其他层面的工具，待续）</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>“领域边界”其实是上下文边界的俗成说法，老司机也阻止不了——上下文这个名词确实不够简明。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="/attachment/app-diff.html/">《领域知识在各应用的形态差异及如何处理》（已打码）</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一帮成功的微服务]]></title>
    <link href="http://www.nietongxue.xyz/blog/2016/04/13/good-ms/"/>
    <updated>2016-04-13T13:39:21+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2016/04/13/good-ms</id>
    <content type="html"><![CDATA[<p>一帮（可能比较）成功的微服务<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。Enjoy 😂</p>

<!--more-->




<iframe height=498 width=510 src="http://player.youku.com/embed/XMTY5NjA5NTUy" frameborder=0 allowfullscreen></iframe>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="/blog/2015/11/29/oc/">Orchestration 和 Choreography</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重构，以知识结构为中心（三）]]></title>
    <link href="http://www.nietongxue.xyz/blog/2016/04/09/dev-dc3/"/>
    <updated>2016-04-09T11:09:57+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2016/04/09/dev-dc3</id>
    <content type="html"><![CDATA[<p>团队和过程是维护知识结构的必需。</p>

<!--more-->


<h3>团队：“知识 - 团队 - 沟通”的闭环</h3>

<p>团队结构与沟通结构，显然是一个映射关系。相比于团队内部，不同团队之间的沟通肯定相对不便，效率和准确性都显著较低。</p>

<p>而知识结构和沟通结构，也是一种相互制约的关系。这个关系就是康威定理<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>描述的关系，定理中所说的产出结构，其实就是按照知识结构形成的。</p>

<p>知识、团队、沟通三者的关系，形成了某种循环。通过改善团队和沟通结构，可以帮助知识结构的改善。同时逐渐改善的知识结构，也会促成沟通和团队的进一步改善。如下图所示。</p>

<p>所以我们认为，根据“产品线”制定的团队结构需要重新安排。根据上下文定义、应用与领域分离的原则，我们重新设计了团队结构，并开始了“团队种子->虚拟团队->实体团队”的团队构建之路。</p>

<p><img src="/images/domain/TCK.png" width="300"></p>

<h3>过程：知识需要重整</h3>

<p>知识的来源是我们的产品同学。产品同学产出的知识，与开发需要的知识，结构上并不一致<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</p>

<ol>
<li>产品同学描述局部。较少归纳与系统其他部分的关联。</li>
<li>产品同学描述过程。较少定义涉及的概念和规则。</li>
<li>产品同学描述增量。他们关注功能的增加和变化，较少关注遗留和现状。</li>
</ol>


<p>这样的关注角度和知识结构有它的价值，但对研发来说是不适合的。
我们需要一个重整知识结构的过程，将产品同学输入的片段知识，重新整理并归纳到我们，这个过程就是“需求分析”。根据我们的团队结构和与产品同学的合作模式，我们认为这个“需求分析”应该是：“应用触发领域驱动的需求分析”。</p>

<p>也就是说：需求分析由应用团队触发，因为产品同学的输入在应用（也就是目前大家都习惯的“产品线”概念）；但随即转交给相应的领域团队，由领域团队作为中枢推进和控制后续分析工作的进行。这个过程跟我们此前谈到的，应用知识与领域知识的关系相匹配——<a href="/blog/2016/04/02/dev-dc2/#ad">区别应用知识与领域知识</a>。</p>

<p>（<a href="/blog/2016/04/09/dev-dc4/">后文继续，讲讲领域团队的工具</a>）</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="https://en.wikipedia.org/wiki/Conway%27s_law">Conway&rsquo;s law</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>这里说的是本团队的情况，并不是说业界普遍情况。个人对产品业界了解不多。<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重构，以知识结构为中心（二）]]></title>
    <link href="http://www.nietongxue.xyz/blog/2016/04/02/dev-dc2/"/>
    <updated>2016-04-02T15:30:25+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2016/04/02/dev-dc2</id>
    <content type="html"><![CDATA[<p>我们认为两个方面的措施可以改善我们的知识结构。</p>

<!--more-->


<h3>一、设计和维护知识结构</h3>

<p>知识结构必须有意识地设计和维护。</p>

<p>我们使用上下文（Context）和上下文地图（Context Map）来结构化我们的知识，这两个概念都来自于DDD战略设计<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。
简单讲上下文就是知识一致性的单元。上下文地图就是上下文之间的关系。</p>

<p>上下文如下图示意，是一个有明确边界的单元，知识是其核心，也是其价值。边界中的其他元素是维持知识的手段。左边的是知识的描述，比如模型。右上是知识的守护和传承者：团队。右下是知识的体现形式——各种组件，比如后台的服务，前台的Android App，数据库Schema等。</p>

<p>而上下文地图，是描述和维护上下文之间的关系的一个图。上下文与上下文地图加在一起，体现了全局范围内对知识结构的设计。</p>

<p><img src="/images/domain/context.png" width="400"></p>

<h3><a name="ad"></a>二、区别应用知识与领域知识</h3>

<p>应用知识描述的是如何（使用业务来）达成功能，领域知识描述的是业务本身。明确这两种知识的差别，除了一般的划分知识制造隔离的目的外，主要的是两个目的：</p>

<ol>
<li>解决前文提到的“补丁”和“碎片”问题。应用和领域分开演化，解决“补丁”问题；领域负责维护业务一致性，解决“碎片”问题。</li>
<li>建立明确稳定的知识关联。如果没有领域，应用之间直接关联，在不同的时段不停变化，今天由于这项业务跟这个应用关联，明天又由于那项业务跟那个应用关联。关联不稳定，如下图左方所示。而有了领域作为关联枢纽，应用之间不需要直接关联，同时应用与领域的关联不会经常变化。</li>
</ol>


<p><img src="/images/domain/ad.png" width="400"></p>

<p>（<a href="/blog/2016/04/09/dev-dc3/">后文继续，讲讲维护知识的手段</a>）</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Eric Evans《领域驱动设计——软件核心复杂性应对之道》<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
