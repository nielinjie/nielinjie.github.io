<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 架构 | 聂同学]]></title>
  <link href="http://www.nietongxue.xyz/blog/categories/jia-gou/atom.xml" rel="self"/>
  <link href="http://www.nietongxue.xyz/"/>
  <updated>2016-04-02T15:21:31+08:00</updated>
  <id>http://www.nietongxue.xyz/</id>
  <author>
    <name><![CDATA[nielinjie]]></name>
    <email><![CDATA[nielinjie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[架构是一种管理手段]]></title>
    <link href="http://www.nietongxue.xyz/blog/2016/03/19/am/"/>
    <updated>2016-03-19T09:59:18+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2016/03/19/am</id>
    <content type="html"><![CDATA[<p>是的。如果不是最重要的那一种的话。</p>

<!--more-->


<p>架构同时也是管理的目的。既是目的又是手段。有点像是修金字塔，基础部分的修建既是目的又是手段。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重构，从知识结构开始（一）]]></title>
    <link href="http://www.nietongxue.xyz/blog/2016/02/20/dev-dc/"/>
    <updated>2016-02-20T14:17:28+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2016/02/20/dev-dc</id>
    <content type="html"><![CDATA[<p>在知识结构层面，我们认识到有两个问题：</p>

<!--more-->


<ol>
<li>没有意识到知识需要拆分。</li>
<li>知识的结构来自于“产品线”。</li>
</ol>


<h3>一、没有意识到知识需要拆分</h3>

<p>大家有个印象，认为对业务知识掌握越全面越好。没有意识到这里面其实有个陷阱。业务知识越全面越好，其实指的是“了解”得越全面越好，而不是“掌握”得越全面越好。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>所以大家没有想到需要对知识进行有意识地拆分。也就是说没有想到：</p>

<p><strong>知识需要结构。而且这个结构需要设计。</strong></p>

<p>我们来看看我们需要什么样的知识结构。</p>

<p>首先，我们的知识结构要能降低负担，使人集中精力。每个人掌握的知识刚好可以完成手边的工作。而不需要掌握所有的知识，就像造车轮胎的工程师不需要关心车身油漆的工艺，更不需要关心油漆工业发展趋势。</p>

<p>其次，我们的知识结构要能制造适当的隔离。这样我们能解开知识间的耦合，有助于解决知识在全局的概念不一致，也有助于协调知识演进的步调。</p>

<p>第三，我们的知识结构要能减少关联风险。知识不可能不与其他知识关联，那么我们希望关联越明确越稳定越好。如果关联不停产生不停终结不停变化，那么谁也没办法保证每次都能正确完整地识别。</p>

<h3>二、知识的结构来自于“产品线”</h3>

<p>虽然大家并没有意识到需要关注知识结构。但知识结构其实已经自然存在了。我们团队的结构和需求驱动的研发过程决定了我们的知识结构直接来自于我们的“产品线”结构。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<p>以“产品线”分布的知识有显著的特点：</p>

<ul>
<li>“补丁”： 补丁指的是一个产品线涉及到的业务知识方面很多，而且在无法控制地不断堆积。只要功能集发生变化，更多业务知识就要堆积上来。</li>
<li>“碎片”： 碎片是指一个方面的业务知识分散在不同的产品线上，这些业务知识的一致性很难保证。要想维护一套完整的业务规则，往往需要在各个产品线穿梭，不时进行跨产品线归纳。</li>
</ul>


<p>以上面我们谈到的好的知识结构的要求来看。来自于“产品线”的知识结构，一个要求都不能满足。</p>

<p>（待续，下一篇讲讲我们的解决思路）</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>所谓“掌握”，指的是可以直接指导研发，并使其产生业务价值的程度。而“了解”，指的是明了其大致原理的程度。举个时髦的例子，你能明白《时间简史》，大概可以算是了解相对论。但你能设计探测引力波的方案，才能算掌握相对论。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>我们这里的“产品线”可能跟很多团队的“产品线”概念不一样。我们的产品线大部分其实是同一套业务的不同功能集。比如有面向不同用户角色的不同功能集，体现在不同客户端的不同功能集等等。<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[领域对象的没落？]]></title>
    <link href="http://www.nietongxue.xyz/blog/2016/01/19/do-die/"/>
    <updated>2016-01-19T09:21:19+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2016/01/19/do-die</id>
    <content type="html"><![CDATA[<p>最近，网红架构师学镛老师提出了观点，说用对象模型来体现领域已不太适用于现代系统环境，比如分布式和高并发。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<!--more-->


<p>我是同意这个观点的。</p>

<p>我认为究其原因，主要是因为目前的服务<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>提供方式。不是以对象为单位包装为服务。由于性能、容错、可伸缩、可扩展等质量要求，人们常使用分布式和松耦合的接口，比如REST风格的HTTP接口、Reactive风格的消息接口。而曾经流行的对象风格的接口，比如EJB，由于不适应这些现代质量要求，已经逐渐淡出了视线。</p>

<p>如果服务不以对象的方式提供，则领域对象无法直接映射为服务。那么领域对象的意义就局限到服务内部。而在更重要的、有全局意义的服务设计和跨服务过程设计中，就不再有使用领域对象的理由。</p>

<p>体现在实践中，领域过程仍然是最重要的知识，只是现在更多的领域过程被分解为子过程的调用和信息的流动，而不是对象和对象间的协作。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>原话在<a href="http://weibo.com/rebol">这里</a>。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>这里通篇使用的是“服务”这个词语，但指的是广义的可重用组件。<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在发展中团队：微服务？]]></title>
    <link href="http://www.nietongxue.xyz/blog/2016/01/05/dev-micro/"/>
    <updated>2016-01-05T10:08:59+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2016/01/05/dev-micro</id>
    <content type="html"><![CDATA[<p>当系统成长的时候，大家都想到“微服务”。</p>

<!--more-->


<p>微服务太火，好像成了理所当然。但应该考虑微服务是否适于这个团队。</p>

<p>对于微服务本身，正反两方驱动力讲得比较多了<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p>

<p>而微服务落实到团队，需要考虑更多：文化需要推广？团队需要重组？技能需要学习？过程可能调整？平台需要验证？……</p>

<p>对照团队现状和发展步调，我们必须知道能得到什么，又需要付出什么。</p>

<p>想要提高可用性？可能只需要多份部署。</p>

<p>想要改善逻辑结构？可能只需要开发时模块化。</p>

<p>想要错误隔离？可能只需要分布式。</p>

<p>想要解耦和可重用化？可能只需要服务化。</p>

<p>……</p>

<p>微服务是一套工具，而不是一件。团队可以做出裁剪，也可以做出渐进策略。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="/blog/2015/12/01/micro/">微服务的“微”</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在发展中团队：领域管理]]></title>
    <link href="http://www.nietongxue.xyz/blog/2015/12/31/developing-domain/"/>
    <updated>2015-12-31T09:54:24+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2015/12/31/developing-domain</id>
    <content type="html"><![CDATA[<p>度过初创期，业务复杂性明显发展，系统结构和质量越来越受到重视。</p>

<p>需要考虑如何管理领域<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p>

<!--more-->


<h3>什么是领域？</h3>

<p>领域是业务概念和他们之间的关系与协作。系统的目的就是实现这些概念和协作。</p>

<h3>领域有什么用？</h3>

<ol>
<li>领域决定系统的业务特征。领域的现状就是系统的业务现状，领域的历史就是系统的业务历史。或者说，领域体现了业务与系统特征间的因果关系。</li>
<li>领域是通用语言。在产品团队与开发团队间，各产品线之间，各开发团队之间或者开发团队内部。领域是沟通的语言，也是发布和积累的语言，是协作的首要工具。</li>
<li>领域是系统结构的依据。以领域驱动设计<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>是应对系统复杂性的常见手段。领域的结构深刻影响系统结构。</li>
</ol>


<p>这些用途决定了对领域管理的要求，比如：容易阅读，容易查找，容易控制，容易共享，容易跟踪变化。</p>

<h3>如何管理领域？</h3>

<ol>
<li>从静态、动态两个角度描述领域。静态体现领域实体和他们的关系，动态体现领域实体的行为和协作。可以借用UML类图和序列图的形式<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>，也可以使用伪代码。</li>
<li>形式化、结构化的描述体系。形式化的语言去除二义性，知识在各团队各角色之间不会产生歧义。结构化的语言体现层次，不同角色可以关注不同层面。 这一点上，UML相关约定完全够用。如果结合文件系统的树形结构，可以实现足够丰富的层次。</li>
<li>使用git或其他SVC。便于共享和跟踪变化。这要求使用尽量简单的描述语言。在这里，一般的UML图不太理想，人类无法阅读UML图的diff。同样的，各种其他图、doc文档之类也不理想。可以借用马丁大叔UmlAsSketch<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>的想法，使用纯文本形式的UML。</li>
<li>使用中文。英文翻译是引入歧义的重要途径，在尽量少的地方使用英文，而不是相反。</li>
<li>与开发共享周期。领域变化的步调一般与系统的设计开发一致，可以借用设计开发的版本和迭代周期。</li>
</ol>


<p>另外，一些可能的问题——</p>

<p>Q：领域是需求么？<br/>
A：对于开发团队来说，可以说领域来源于需求。区别是：</p>

<ol>
<li>需求从产品和用户的角度，以交互驱动；领域从设计和开发的角度，以结构和逻辑驱动。</li>
<li>需求是增量，领域是全量。需求描述的是每次改动，一般以版本、迭代作为组织单位。如果想从需求知道系统体现业务现状，就必须将历史中所有相关需求找出来进行归纳，这无疑非常困难。而领域持续维护，随时体现当前现状。</li>
<li>需求关心局部，领域关心全局。需求强调体验，往往专注于局部，以一个场景一次交互为单位进行描述。而领域强调整体，需要负责跨产品线跨系统保持一致性。</li>
<li>需求包括功能、质量、约束，领域只涉及到功能。</li>
</ol>


<p>Q：领域是设计（类图、ER图……）么？<br/>
A：领域是设计的依据（之一）。设计的目的是实现领域，但设计需要同时考虑其他架构策略，比如由质量要求引发的技术方案。如图：</p>

<p><img src="/images/dev/domain.png" width="550"></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>本文中的“领域”都是指“领域模型”或者其他形式的领域知识，而不是领域本身。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>此处的“以领域驱动设计”不完全等于DDD。<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>是不是任何事物都可以从静态和动态两角度描述，进而都使用类图和序列图？<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p><a href="http://martinfowler.com/bliki/UmlAsSketch.html">UmlAsSketch</a><a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
