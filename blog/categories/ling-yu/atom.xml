<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 领域 | 聂同学]]></title>
  <link href="http://www.nietongxue.xyz/blog/categories/ling-yu/atom.xml" rel="self"/>
  <link href="http://www.nietongxue.xyz/"/>
  <updated>2018-03-26T22:41:26+08:00</updated>
  <id>http://www.nietongxue.xyz/</id>
  <author>
    <name><![CDATA[nielinjie]]></name>
    <email><![CDATA[nielinjie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[领域驱动作为一种驱动技术]]></title>
    <link href="http://www.nietongxue.xyz/blog/2018/02/04/dd-as-d/"/>
    <updated>2018-02-04T14:35:34+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2018/02/04/dd-as-d</id>
    <content type="html"><![CDATA[<p>之前就“驱动”、“领域驱动”这些主题做了一些讨论，现在看看作为一种架构设计的驱动技术，“领域驱动”有何特点。</p>

<!-- more -->


<p>乍看之下，领域驱动与特征驱动有些关系。那我们就从跟特征驱动的区别说起。</p>

<p>首先，两者的起点是不一样的 -</p>

<ol>
<li>一般来说，特征驱动中所谈的特征，也可以说是“需求”。讲的是需要实现的系统的特征，而不是业务问题本身的特征，需求已经是产品同学（或业务分析同学）的设计结果，体现系统的边界和职责。它已经是对业务问题的部分应对了。</li>
<li>领域驱动所做的，是对业务问题的直接建模与拆分。更多的讲的是业务本身的特征特点，没有涉及到系统，也没有涉及到的系统的边界与职责。</li>
<li>所以两者的起点是不同的。可以说，一个从经过设计的需求开始，一个从未经设计的问题本身开始。</li>
</ol>


<p>其次，通常来讲，特征包括功能、质量、约束。领域驱动几乎完全没涉及到质量、约束方面的特征。功能方面，如前所述，也不是直接对应。</p>

<p>作为一种驱动技术，我们按照对驱动者的一般要求，来看一下领域驱动的能力。</p>

<ol>
<li>首先看拆分问题。DDD维护一个分析模型到设计模型的机械映射，只要拆分分析模型，就完成了问题的拆分。分析模型本身有结构，所以拆分是比较容易的。但是，不论是分析模型，还是其映射而成的设计模型，都很难直接验证。一般只有通过对模型的使用，才能间接验证。</li>
<li>其次看推动问题的解决，由于机械映射的存在，基本上完成了分析模型，就完成了设计模型。大部分的工作，都集中在分析模型方面。而分析模型的完成程度，可以说是很难衡量和可视化的。</li>
</ol>


<p>如上特点，决定了使用领域驱动时的一些注意事项</p>

<ol>
<li>一个系统的架构设计中不能只有领域驱动。领域驱动考虑的只是问题的一部分或者说一个方面。其他方面需要其他驱动技术来考虑。比较典型的是质量方面，比如性能、可用性等。</li>
<li>需要通过对模型的使用来间接验证领域驱动的设计。比如通过功能/UseCase来验证，看这个模型上面能否满足功能的逻辑。而功能/UseCase，通常是依赖于对系统特征的定义。</li>
</ol>


<p>领域驱动与特征驱动，常常伴生。领域驱动在时间、空间上的广度视野，与特征驱动在细节、具体层面的管理能力，可以相互补充。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DDD的D、D、D]]></title>
    <link href="http://www.nietongxue.xyz/blog/2018/01/20/d-d-d/"/>
    <updated>2018-01-20T14:34:51+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2018/01/20/d-d-d</id>
    <content type="html"><![CDATA[<p>DDD就是领域驱动设计，这里想要分别谈一下DDD里面的三个D。兼谈一点我们实际的开发团队的DDD实践活动，我们的收获和教训。</p>

<!-- more -->


<h3>第一个D，说的是领域。</h3>

<p>是识别和定义问题，这个活动交付给下个阶段的交付物是领域模型。我有个比喻说建模就是在知识的液体海洋中析出晶体。在业界的大量讨论中，讲得比较多的是这个晶体是什么样的，而对于如何析出这样的晶体，却较少有讨论。有人讲了敏捷建模<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，但那个也是侧重的是活动安排，不是建模本身的方法论。当然业界也有些建模方法的讨论，比如四色建模法、EventStorm建模法，但这些算是一些局部的方法模式，还没有形成成套路的方法论。</p>

<p>实践中，我们较多的采用功能驱动建模，以功能（或者说UseCase/UseStory）作为起始点，围绕功能提及的业务概念，去逐渐析出周边与之关联的概念。</p>

<p>这里似乎有个“悖论”，我们说领域驱动的好处，就是要跳出功能、迭代的小框框，以更大的时间、空间维度去研究整个业务的总体结构。我们用功能去驱动领域建模，似乎是走回到老路去了。</p>

<p>其实不存在这个悖论，我们举个例子，类比画地图，每个地形采集员他能看到的是当前的一个局部，但这些局部通过地图这个模型逐渐积累起来，再借助一些高层面的观察（比如航拍），就逐渐提供了全局的完备的视野。我们用局部功能去驱动领域建模，也是类似的原理。</p>

<h3>第二个D，说的是驱动。</h3>

<p>我们之前讨论了什么是驱动，什么样的东西适于驱动<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。在DDD的体系中，驱动讲的是MDD，即模型驱动，说的是有一套机械可重复的方法，将领域模型中体现的各个结构，映射为可以解决的问题，也就是可以去开发实现的结构。</p>

<p>实践过程中我们发现。开发团队对第二个D非常敏感，有些同学认为DDD的意义其实就是战术层的一些设计模式，比如工厂、聚合、实体等，认为DDD的存在就是为了“克服贫血的DTO”，使用“充血的实体”。这当然是对DDD的严重误解，完全没有认识到DDD的价值。</p>

<p>就第二个D来说，DDD的好处，要点在“机械、可重复”的映射，这保证了分析与设计的稳定衔接。至于结构性的设计模式，比如聚合、实体这些，只是一个副产物。如果我们能够为这种映射，找到另外一套设计模式，只要能做到“机械、可重复”那也是完全没有问题的。</p>

<p>另外要提醒大家注意的是，这种映射不仅仅是在战术层面，在战略层面同样存在，而且在我们看来具有更为重大的意义。比如子域映射为上下文，上下文之间的关系映射为一些集成模式等等。</p>

<h3>第三个D，说的是设计。</h3>

<p>紧跟着第二个D，领域模型映射出来的就是设计模型。设计模型作为开发实现的依据。</p>

<p>在实际开发过程中，真正做到依据设计模型进行开发实现，并不是一件理所当然的简单事。因为设计模型不是实现模型，这里是需要一个转换的。</p>

<p>为了解决各种问题，陆陆续续会得到各种设计模型。由于这些解决都需要落实到同一个系统中，它们需要在实现时进行综合。这就是解空间上构建实现模型需要做的事情。从DDD来的设计模型，需要跟应对其他问题来的设计模型进行综合，共同导出实现模型。比如在DDD的同时，我们可能还需要应对分布式带来的容错熔断问题，这就要求我们要作的“防腐层”，兼具在演进时和运行时的隔离功能。</p>

<p>在实际开发过程中容易犯的错，一是没有意识到设计模型与实现模型的区别；二是不能做到正确的综合，容易造成实现模型扭曲了设计模型。</p>

<h3>另外</h3>

<p>一个图，一个比喻。</p>

<p><img src="http://www.nietongxue.xyz/images/ddd/ddd.png" width="80%"/></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://agilemodeling.com">http://agilemodeling.com</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="/blog/2018/01/14/driver/">《“驱动者”说》</a>、<a href="/blog/2017/12/14/d-o/">《“驱动”与“面向”》</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微服务划分：按业务能力 vs 按子域]]></title>
    <link href="http://www.nietongxue.xyz/blog/2017/06/11/ms-split/"/>
    <updated>2017-06-11T16:15:44+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2017/06/11/ms-split</id>
    <content type="html"><![CDATA[<p>微服务的划分方法，常见的是两种，按业务能力和按子域<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。<!-- more--></p>

<p>“子域”，就是DDD中的"子域"。</p>

<p>“业务能力”，是一个专用名词，指的是一个连续的业务过程，其中不需要中断，也不需要别的业务过程的参与。这些业务过程自然组织起来，比如首尾相连，或者，由用户参与来自然连接。</p>

<p>两种不同的服务划分风格，反映了对业务本身的不同的描述与划分的风格。</p>

<p>比较形象地讲，按子域划分，就是把业务划成一块一块的。按业务能力划分，就是把业务划成一段一段的。一块一块的，描述业务概念和它们之间的关系。一段一段的，描述业务执行的步骤和过程。</p>

<p>按业务能力划分的优势主要在运行时。各个服务的运行时依赖被尽量减少。在服务性能、可用性方面不会相互牵绊，可以做到最好。</p>

<p>而按子域划分的优势主要在设计时和演进时。有利于应对业务的规模发展、复杂性增加和分别演进。</p>

<p>这样看来，按业务能力划分的微服务是不是类似于一种事务脚本？只不过它的粒度更大，以服务为单元？</p>

<p>是时候又贴出这张图，事务脚本的优势与劣势在图里体现得很明显，按业务能力划分的微服务，是否有同样的优势与劣势？</p>

<p><img src="http://www.nietongxue.xyz/images/domain/domain.gif" width="80%"/></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>有的观点，认为两种划分可以根据不同的情况进行选择。而有的观点，认为应该这样划分而不要那样划分。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重构，以知识结构为中心（四）]]></title>
    <link href="http://www.nietongxue.xyz/blog/2016/04/16/dev-dc4/"/>
    <updated>2016-04-16T11:10:01+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2016/04/16/dev-dc4</id>
    <content type="html"><![CDATA[<p>为了帮助领域团队凝聚和守护领域知识，我们设计和使用了一些工具。</p>

<!--more-->


<h3>领域模型</h3>

<p>最首要的工具当然是领域模型。但从零开始建立一个有些远水解不了近渴。
我们的想法是识别一点建立一点使用一点，持续地延伸和细化。</p>

<p>当前是划分上下文、区别领域与应用、建立团队的阶段，我们关注点就在上下文之间的边界上和领域与应用的边界上。
那么我们就以上下文之间的边界处和领域与应用之间的边界处作为我们领域模型建立的起点。</p>

<h3>领域边界跟踪表<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></h3>

<p>上下文之间的关系非常重要，关系到知识的依赖类型，也关系到领域团队间的沟通和协作。所以我们特别关注厘清边界处的概念和它们的属主。</p>

<p>团队认识到的边界，往往描述为领域之间的交互场景。这时候需要从中提炼出业务概念和规则。一般以领域实体和领域事件为代表。</p>

<h3>应用差异跟踪表</h3>

<p>领域团队职责是维护业务的一致性。
这要求领域团队除了控制领域知识以外，对领域知识的各种应用形式必须有足够的认识和应对。
这一点在当前领域与应用的边界尚未完全明确的情况下尤为必要。</p>

<p>我们的切入点是总结应用形式之间的差异并制定对差异的应对策略<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</p>

<p>（还有一些其他层面的工具，待续）</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>“领域边界”其实是上下文边界的俗成说法，老司机也阻止不了——上下文这个名词确实不够简明。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="/attachment/app-diff.html/">《领域知识在各应用的形态差异及如何处理》（已打码）</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重构，以知识结构为中心（三）]]></title>
    <link href="http://www.nietongxue.xyz/blog/2016/04/09/dev-dc3/"/>
    <updated>2016-04-09T11:09:57+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2016/04/09/dev-dc3</id>
    <content type="html"><![CDATA[<p>团队和过程是维护知识结构的必需。</p>

<!--more-->


<h3>团队：“知识 - 团队 - 沟通”的闭环</h3>

<p>团队结构与沟通结构，显然是一个映射关系。相比于团队内部，不同团队之间的沟通肯定相对不便，效率和准确性都显著较低。</p>

<p>而知识结构和沟通结构，也是一种相互制约的关系。这个关系就是康威定理<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>描述的关系，定理中所说的产出结构，其实就是按照知识结构形成的。</p>

<p>知识、团队、沟通三者的关系，形成了某种循环。通过改善团队和沟通结构，可以帮助知识结构的改善。同时逐渐改善的知识结构，也会促成沟通和团队的进一步改善。如下图所示。</p>

<p>所以我们认为，根据“产品线”制定的团队结构需要重新安排。根据上下文定义、应用与领域分离的原则，我们重新设计了团队结构，并开始了“团队种子->虚拟团队->实体团队”的团队构建之路。</p>

<p><img src="/images/domain/TCK.png" width="300"></p>

<h3>过程：知识需要重整</h3>

<p>知识的来源是我们的产品同学。产品同学产出的知识，与开发需要的知识，结构上并不一致<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</p>

<ol>
<li>产品同学描述局部。较少归纳与系统其他部分的关联。</li>
<li>产品同学描述过程。较少定义涉及的概念和规则。</li>
<li>产品同学描述增量。他们关注功能的增加和变化，较少关注遗留和现状。</li>
</ol>


<p>这样的关注角度和知识结构有它的价值，但对研发来说是不适合的。
我们需要一个重整知识结构的过程，将产品同学输入的片段知识，重新整理并归纳到我们，这个过程就是“需求分析”。根据我们的团队结构和与产品同学的合作模式，我们认为这个“需求分析”应该是：“应用触发领域驱动的需求分析”。</p>

<p>也就是说：需求分析由应用团队触发，因为产品同学的输入在应用（也就是目前大家都习惯的“产品线”概念）；但随即转交给相应的领域团队，由领域团队作为中枢推进和控制后续分析工作的进行。这个过程跟我们此前谈到的，应用知识与领域知识的关系相匹配——<a href="/blog/2016/04/02/dev-dc2/#ad">区别应用知识与领域知识</a>。</p>

<p>（<a href="/blog/2016/04/09/dev-dc4/">后文继续，讲讲领域团队的工具</a>）</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="https://en.wikipedia.org/wiki/Conway%27s_law">Conway&rsquo;s law</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>这里说的是本团队的情况，并不是说业界普遍情况。个人对产品业界了解不多。<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
