<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 质量 | 聂同学]]></title>
  <link href="http://www.nietongxue.xyz/blog/categories/zhi-liang/atom.xml" rel="self"/>
  <link href="http://www.nietongxue.xyz/"/>
  <updated>2016-02-21T11:39:44+08:00</updated>
  <id>http://www.nietongxue.xyz/</id>
  <author>
    <name><![CDATA[nielinjie]]></name>
    <email><![CDATA[nielinjie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在发展中团队：开发质量问题]]></title>
    <link href="http://www.nietongxue.xyz/blog/2016/01/24/develop-quality/"/>
    <updated>2016-01-24T11:44:37+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2016/01/24/develop-quality</id>
    <content type="html"><![CDATA[<p>随着系统和团队规模逐渐成长，开发质量问题<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>一般有增多趋势。</p>

<!--more-->


<p>错误（包括低级错误）是不能完全避免的。开发人员如何减少错误呢？</p>

<p>有两个方面的事情可以做：</p>

<p>一是依靠团队和合理的过程，相互检查排错。比如结对编程、codereview、代码静态扫描、各种评审会议等等，都是属于这类。</p>

<p>另一个方面，是构建并依靠合理的系统结构。合理的系统结构一来可以分割复杂度，使开发人员面临相对简单的工作，减小错误发生的概率；二来即使错误发生，可以将错误的影响面限制在组件内部，减小全局影响。</p>

<p>可以说前一方面偏于对症治疗，而第二方面偏于对因治疗。对因治疗当然更利于根本性地杜绝错误，但很多时候对症治疗更加直接有效，同时为对因治疗赢得时间和资源。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>这里说的“开发质量问题”，指的是由于局部错误造成的系统问题。特别是那些由开发人员个人错误造成的问题。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实现质量要求的三个考虑方向]]></title>
    <link href="http://www.nietongxue.xyz/blog/2015/12/24/3direct/"/>
    <updated>2015-12-24T13:25:20+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2015/12/24/3direct</id>
    <content type="html"><![CDATA[<p>性能、可用性、可伸缩、可扩展……如何达成这些质量要求，是随时要考虑的问题。
有没有什么“普遍的”考虑方法呢？</p>

<!--more-->


<p>对各个质量要求，具体的考虑方法是各不相同的，但总结起来思考方向一般有几个：<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<h3>正向</h3>

<p>顺着问题发生的因果方向考虑。</p>

<p>列出可能导致问题发生的因素，建立问题场景的模型，研究因素与结果的关系，按优先级评估和排除这些因素。比如对于性能质量风险：对典型请求建模，列出处理请求的步骤，考察它们可能对总体性能的影响，排除可能的瓶颈。</p>

<h3>反向</h3>

<p>将因果关系反过来。</p>

<p>我们从结果出发，基于问题已经发生。考虑如何才能回溯问题的原因并排除。还以性能为例。如果发现系统响应缓慢，我们可以有些什么手段找到缓慢环节，证实它是缓慢的根源？从这个方向考虑，通常会发现要求系统中有足够多的诊断支持，比如日志、现场收集保护、快照分析等等。</p>

<p>值得提醒的是，问题发生有至少两个场景，都是可以利用的：</p>

<ol>
<li>测试，制造问题的发生。</li>
<li>生产中发现已发生的问题。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></li>
</ol>


<h3>横向</h3>

<p>或者说无向。指的是不按因果方向考虑。比如使用“模式”——根据系统特点，列出可能提高性能的模式，看看成本，能用上的都用上吧。这种方法也确实有用。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>本文以性能为例，但方法可以推广到其他质量要求。好吧，貌似也可以推广到其他任何事。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>当然先要救命和减少问题影响。但不属于本文的范围。<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[质量保障措施参考清单（三）]]></title>
    <link href="http://www.nietongxue.xyz/blog/2015/04/10/resilient3/"/>
    <updated>2015-04-10T10:18:14+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2015/04/10/resilient3</id>
    <content type="html"><![CDATA[<p>（<a href="/blog/2015/04/10/resilient2/">接上篇</a>）</p>

<h2>业务正确性和容错性</h2>

<p>系统不仅需要业务功能结果正确，还需要在业务发生问题的时候能够尽量多的提供诊断和恢复支持。</p>

<!-- more -->


<h3>设计时</h3>

<p>设计时可以识别的设计要求大致有：</p>

<ul>
<li>业务错误可以回查。</li>
<li>业务过程可以回查。</li>
<li>业务操作可以回查。</li>
<li>系统故障情况下业务（一定程度上）可以持续。</li>
</ul>


<p>为满足此要求，需要：</p>

<ul>
<li>定义业务过程、业务状态。</li>
<li>记录业务过程和状态的变化。</li>
<li>为各个状态定义业务备案。</li>
<li>记录业务操作。</li>
</ul>


<h3>业务接入时</h3>

<ul>
<li>业务被误用。

<ul>
<li>明确的业务定位</li>
</ul>
</li>
<li>系统之间业务状态不正确或不明确。

<ul>
<li>记录业务进出口状态。</li>
</ul>
</li>
</ul>


<h3>日常趋势</h3>

<ul>
<li>事故趋势恶化

<ul>
<li>业务逻辑有问题？</li>
<li>用户体验有问题？

<ul>
<li>用户体验数据</li>
</ul>
</li>
<li>需要事故记录</li>
</ul>
</li>
</ul>


<h3>事故时</h3>

<ul>
<li>系统操作中断，比如可用性事故引起。

<ul>
<li>需要各个状态定义业务备案。</li>
</ul>
</li>
<li>事后发现业务结果不正确。

<ul>
<li>记录业务过程状态变化。</li>
</ul>
</li>
<li>系统错误

<ul>
<li>大范围错误 - 归结为<a href="/blog/2015/04/10/resilient2/">可用性事故</a>。</li>
<li>局部错误 - 归结为bug。</li>
<li>需要系统错误率实时监控和报警。</li>
<li>需要系统错误持续记录和分析。</li>
</ul>
</li>
</ul>


<h3>小结</h3>

<p>综上，为持续保障系统正确性，需要采取的措施有：</p>

<ul>
<li><strong>明确的业务定位。</strong>以及定期review。</li>
<li><strong>定义各个业务过程、业务状态。</strong></li>
<li><strong>业务过程和业务状态的变化的记录。</strong></li>
<li><strong>各个状态定义业务备案。</strong></li>
<li><strong>业务操作的记录。</strong></li>
<li><strong>业务进出口状态的记录。</strong></li>
<li><strong>用户体验数据持续记录和分析。</strong></li>
<li><strong>系统错误率持续监控和阙值报警。</strong></li>
<li><strong>系统错误持续记录和分析。</strong></li>
<li><strong>事故记录与分析。</strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[质量保障措施参考清单（二）]]></title>
    <link href="http://www.nietongxue.xyz/blog/2015/04/10/resilient2/"/>
    <updated>2015-04-10T10:18:14+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2015/04/10/resilient2</id>
    <content type="html"><![CDATA[<p>（<a href="/blog/2015/04/09/resilient/">接上篇</a>）</p>

<h2>可用性</h2>

<p>可用性风险通常比较被重视，企业默认架构中往往有较多应对措施。而且很多可用性风险与<a href="/blog/2015/04/09/resilient/">性能与容量风险</a>有关，所以这里总结的风险和保障措施显得比较少。</p>

<!-- more -->


<h3>设计时</h3>

<p>企业默认架构中一般包含可用性的基本应对：</p>

<ul>
<li>HA方案，比如热备冷备及相关切换方案等。</li>
<li>容灾方案</li>
</ul>


<h3>业务接入时</h3>

<p>一般不会产生可用性风险。除非超过系统容量造成系统不可用。这个风险<a href="/blog/2015/04/09/resilient/">在“性能与容量”部分讨论</a>。</p>

<h3>日常趋势</h3>

<ul>
<li>事故趋势恶化。</li>
<li>资源消耗异常。（<a href="/blog/2015/04/09/resilient/">在“性能与容量”部分讨论</a>。）</li>
</ul>


<h3>事故时</h3>

<p>可用性事故一般有：</p>

<ul>
<li>系统失去响应

<ul>
<li>容量问题造成的。（<a href="/blog/2015/04/09/resilient/">在“性能与容量”部分讨论</a>。）</li>
<li>某个（某些）节点失去响应造成。

<ul>
<li>需要各节点可用性数据。</li>
<li>节点可拔插。</li>
</ul>
</li>
</ul>
</li>
<li>系统大范围报错

<ul>
<li>诊断用现场实时数据。（<a href="/blog/2015/04/09/resilient/">在“性能与容量”部分讨论</a>。）</li>
</ul>
</li>
</ul>


<p>为及时发现可用性事故，我们需要：</p>

<ul>
<li>可用性数据实时监控和报警</li>
</ul>


<h3>小结</h3>

<p>综上，为持续保障系统可用性，需要采取的措施有：</p>

<ul>
<li><strong>预先设计的HA和容灾方案。</strong></li>
<li><strong>事故记录与分析。</strong></li>
<li><strong>可用性数据持续监控与阙值报警。</strong></li>
<li><strong>各节点可用性实时数据。</strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[质量保障措施参考清单（一）]]></title>
    <link href="http://www.nietongxue.xyz/blog/2015/04/09/resilient/"/>
    <updated>2015-04-09T10:18:14+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2015/04/09/resilient</id>
    <content type="html"><![CDATA[<p>为更好的应对业务快速变化带来的挑战，许多系统正在从“关联系统”角色向着“<a href="/blog/2015/04/09/service/">服务</a>”角色转变。这样的转变对系统各方面质量特别是运行时质量提出了不一样的要求。如何管理并始终满足这些要求，打造弹性、容错、可管理的服务，是我们需要重点考虑的问题。</p>

<!-- more -->


<p>作为“<a href="/blog/2014/03/31/aa1/">风险驱动的架构设计</a>”的实践者，我们以系统运行过程各个阶段可能遇到的风险为线索，整理我们可能采取的保障措施。——</p>

<ul>
<li>设计时</li>
<li>业务接入时</li>
<li>日常趋势</li>
<li>事故时</li>
</ul>


<h2>性能和容量</h2>

<h3>设计时</h3>

<p>需要根据业务目标确定适当性能理想值。比如：</p>

<ul>
<li>响应时间</li>
<li>吞吐量</li>
</ul>


<h3>业务接入时</h3>

<p>新的业务接入，不论是新的系统接入还是旧有接入系统业务量发生变化。</p>

<ul>
<li>新系统接入时应该声明业务量和变化趋势。</li>
<li>接入系统业务量（即将）发生显著变化时应该声明。</li>
<li>需要知晓当前系统可以承受的业务量。</li>
</ul>


<h3>日常趋势</h3>

<p>系统运行中，几个方面的风险需要持续防范：</p>

<ul>
<li>性能表现恶化</li>
<li>业务量异常变化</li>
<li>资源消耗异常变化</li>
</ul>


<p>为此，我们需要：</p>

<ul>
<li>性能指标的周期性监控记录。</li>
<li>业务总量的周期性监控记录。</li>
<li>各接入系统业务量周期性监控记录。</li>
<li>资源消耗量周期性监控记录。</li>
</ul>


<h3>事故时</h3>

<p>性能事故指的是性能表现发生急剧恶化，用户受到明显影响。性能事故的原因可以分两种情况分析——</p>

<ul>
<li>业务量发生变化

<ul>
<li>各接入系统业务量及调用量。</li>
<li>隔离、特别是热隔离。</li>
<li>扩展性，特别是横向扩展。</li>
</ul>
</li>
<li>业务量没有明显变化

<ul>
<li>受依赖系统拖累

<ul>
<li>依赖系统调用记录。</li>
<li>替代方案或后备方案。</li>
</ul>
</li>
<li>某（些）节点性能异常

<ul>
<li>各节点的性能数据。</li>
<li>节点可（热）拔插。</li>
</ul>
</li>
<li>变更 - 环境、代码

<ul>
<li>诊断用现场数据</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>为及时发现性能事故和区分两种情况，我们需要：</p>

<ul>
<li>性能数据，实时监控和阙值报警。</li>
<li>总业务量，包括时间和功能分布。</li>
</ul>


<h3>小结</h3>

<p>综上，为持续保障系统性能表现，需要采取的措施有：</p>

<ul>
<li><strong>根据业务目标有适当的性能和容量的理想值。</strong>影响因素变化后或者周期性地需要review。</li>
<li><strong>明确当前系统最大承受业务量。</strong>影响因素变化后或者周期性地需要review。</li>
<li><strong>确保新系统接入或接入系统业务量变化时声明业务量和变化趋势。</strong>建立机制，包括事后回朔机制。</li>
<li><strong>系统性能指标的阙值报警。</strong></li>
<li><strong>系统性能指标的持续监控记录和分析。</strong></li>
<li><strong>业务总量的持续监控和分析。</strong></li>
<li><strong>各接入系统业务量持续监控和分析。</strong></li>
<li><strong>资源消耗量持续监控和分析。</strong></li>
<li><strong>各接入系统业务量及调用量实时数据。</strong></li>
<li><strong>有能力实时隔离接入系统。</strong></li>
<li><strong>容量可扩展性，特别是横向扩展。</strong></li>
<li><strong>依赖系统调用记录的实时数据。</strong>包括调用量和性能。</li>
<li><strong>依赖系统替代方案或后备方案。</strong>至少有业务层面后备方案。</li>
<li><strong>各节点的性能指标的实时数据。</strong></li>
<li><strong>各节点可（热）拔插。</strong>拔出后性能和容量可接受。</li>
<li><strong>诊断用现场实时数据。</strong>各节点都需要此类数据，比如线程dump。</li>
</ul>

]]></content>
  </entry>
  
</feed>
