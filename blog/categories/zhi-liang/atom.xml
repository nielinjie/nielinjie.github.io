<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 质量 | 聂同学]]></title>
  <link href="http://nielinjie.github.io/blog/categories/zhi-liang/atom.xml" rel="self"/>
  <link href="http://nielinjie.github.io/"/>
  <updated>2015-03-17T11:15:28+08:00</updated>
  <id>http://nielinjie.github.io/</id>
  <author>
    <name><![CDATA[nielinjie]]></name>
    <email><![CDATA[nielinjie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[给老爷爷系统（四）：如何描述系统？（三）]]></title>
    <link href="http://nielinjie.github.io/blog/2014/06/07/view3/"/>
    <updated>2014-06-07T18:06:38+08:00</updated>
    <id>http://nielinjie.github.io/blog/2014/06/07/view3</id>
    <content type="html"><![CDATA[<blockquote><p>这是一个老爷爷系统。</p></blockquote>

<p>这一篇讲讲如何实现的问题。</p>

<!-- more -->


<p>实现方面主要考虑了两个要点：</p>

<ul>
<li>如何构建和维护：要快速地建立和编辑，能够加入版本管理，能够在各方面间共享。</li>
<li>如何展现：各方面要容易地挂载自己的关注点数据，同时跨角色观察的需求要求框架能同时挂载多方面的数据。</li>
</ul>


<p>我们为这两个要点选择了两种不同的形式。</p>

<p>一方面在构建和维护时，特征描述采用纯文本方式，可以说是一种简单地DSL。
DSL文件很方便人和机器阅读，同时放入SCM，实现版本管理和角色间共享。</p>

<p>```
审批/逐个审批</p>

<pre><code>-i 查看签报详细信息
-i 输入审批意见
    -g 使用默认意见
    -g 手工输入意见
    -g 语音输入意见
-i 选择用户
签报
用户
</code></pre>

<p>批量审批</p>

<pre><code>-e 逐个审批
-i 查看待处理文件列表
-i 点击审批按钮
</code></pre>

<p>……
```</p>

<p>另一方面在展现时，我们解析DSL，图形化交互式（并且略显炫酷滴 :-D）地展示。
下面展示的是目前的状况。</p>

<ul>
<li>左边的图，是“系统特征”，由黄色椭圆形表示的领域过程、绿色圆形表示的领域实体，以及他们之间的连线构成。</li>
<li>右边的下拉菜单，是由各方面提供的关注点数据，可以按需要附加到“系统特征”上。比如这个截图上，
左边的图上面有个红色的大圆，就是将代码质量数据叠加上来。还有个深绿色的小点，是将代码结构的数据叠加上来。</li>
<li>除了可以以叠加的方式展示数据，还可以根据关注点数据对图进行过滤。</li>
</ul>


<p><img src="/images/view/view3.png"></p>

<p>最后，代码在此：<a href="http://github.com/nielinjie/developTools">http://github.com/nielinjie/developTools</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给老爷爷系统（三）：如何描述系统？（二）]]></title>
    <link href="http://nielinjie.github.io/blog/2014/06/06/view2/"/>
    <updated>2014-06-06T18:06:38+08:00</updated>
    <id>http://nielinjie.github.io/blog/2014/06/06/view2</id>
    <content type="html"><![CDATA[<blockquote><p>这是一个老爷爷系统。</p></blockquote>

<p>上一篇谈到统一的系统特征描述的形式问题。觉得“功能”或者“领域模型”可能可以承担这个重任。</p>

<!-- more -->


<p>但功能和领域模型都不能直接使用：</p>

<ul>
<li>功能的问题是很难跟代码直接关联起来。</li>
<li>领域模型的问题是只有开发同学熟悉这个概念。SA、测试、开发经理等同学比较熟悉的是“功能”这个概念，
虽然他们对这个概念的定义不尽相同。</li>
</ul>


<p>我们希望我们的特征描述既可以将各方面关注点都联系起来，又可以让各方面都工作在自己熟悉的概念上。
于是我们尝试使用一种二者的混合体。</p>

<ul>
<li>从领域模型出发，以便我们能跟代码产生联系<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。代码非常重要，因为在运行时，代码决定的逻辑基本上是系统的一切。</li>
<li>弱化领域对象的定义，只描述它是否存在和与其他对象的关系<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。领域对象的定义显然是重要的，但我们现在要的是“框架”。</li>
<li>强调领域过程，弱化领域实体。实体常常被认为是分析的结果，看上去和“功能”没有关系，有些方面的同学不关注。</li>
<li>领域过程之间的关系划归为三种：Include、Extend、Generalization<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。</li>
<li>领域过程与实体间，只有一种，引用关系。实体与实体间的关系，不再描述。</li>
</ul>


<p>总的来说，这是领域模型的一种裁剪，或者可能更准确地说法，是一种遮挡：暴露大家的共同关注点，隐藏其他。</p>

<p>（<a href="/blog/2014/06/07/view3">再下篇继续</a>）</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>逻辑按领域结构划分，在这个系统没完全实现：<a href="/blog/2014/06/09/refactory">重构</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>领域模型是一个领域对象的结构，<a href="/blog/2014/06/07/structure">结构的要素</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>没错，跟UML use case图里面的三种关系相同。这并非偶然，我们认为所有的过程之间，都是这三种关系。<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给老爷爷系统（二）：如何描述系统？（一）]]></title>
    <link href="http://nielinjie.github.io/blog/2014/06/05/view/"/>
    <updated>2014-06-05T20:06:38+08:00</updated>
    <id>http://nielinjie.github.io/blog/2014/06/05/view</id>
    <content type="html"><![CDATA[<blockquote><p>这是一个老爷爷系统。</p></blockquote>

<p>对于老爷爷系统，我们发现特别难以回答一个问题：系统是什么样的？它正在如何发展？</p>

<!-- more -->


<p>团队中不同的角色都在尝试解决这个问题。
上次<a href="/blog/2014/04/24/aa3/">有篇blog</a>提到:</p>

<blockquote><p>SA同学正在整理全局“功能地图”、测试同学整理“全量测试案例”</p></blockquote>

<p>而开发团队和架构师，则在整理“领域地图”。</p>

<p>这些不同的角色，对系统有各自不同的关注点。但他们的关注点都需要一个框架组织起来，
这个框架就是系统特征。
上面说的这些各种“整理”，其实都包含了对系统特征进行整理和重建，然后再把自己的关注点挂载上去。
只不过他们从各自的目的出发，从各自的角度下手。</p>

<p>团队意识到：这些各方面的关注者可能需要共用同一个系统特征描述。</p>

<ul>
<li>可以减少分别构建和维护框架带来的工作量。<br/>
如果说分别构建框架只是时间和工作量的问题的话，分别维护和保持同步进化，则是几乎不可能做到的。</li>
<li>可以有机地将各个角色的关注点联系起来，形成对系统全方位、跨角色的观察监控，例如——

<ul>
<li>通过观察代码历史和代码质量，可以帮助划定测试重点覆盖区域。</li>
<li>通过观察相关的代码结构，可以帮助发现功能间关系特别是潜在的相互影响。</li>
<li>通过观察用户使用量数据，可以帮助评估代码重构的风险。</li>
</ul>
</li>
</ul>


<p>“统一系统特征描述”看来很重要，我们需要找到一个形式，可以承担这样的重任。</p>

<p>我们整理了各方面的关注点，大致如下，觉得处于中间位置的“功能”或者“领域模型”可能可以承担这个重任。</p>

<p>（<a href="/blog/2014/06/06/view2/">下篇继续</a>）</p>

<p><img src="/images/view/view.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给老爷爷系统（一）：代码质量守则和工具]]></title>
    <link href="http://nielinjie.github.io/blog/2014/05/26/quality/"/>
    <updated>2014-05-26T20:06:38+08:00</updated>
    <id>http://nielinjie.github.io/blog/2014/05/26/quality</id>
    <content type="html"><![CDATA[<blockquote><p>这是一个老爷爷系统。</p></blockquote>

<p>对于一个历史悠久的老爷爷系统，我们的程序员定下了下面的代码质量守则：</p>

<!-- more -->


<ul>
<li>新增方法复杂度不能大于5。</li>
<li>新增类之间不能出现包循环依赖，同层之间可稍微放宽（如Service之间互相调用）。</li>
<li>新增类和方法避免有重复代码，出现重复或者相似度较高的代码应提炼成函数。</li>
<li>过长的方法，新增方法不能过长，代码行数限定在30。</li>
<li>过大的类，新增类不能过大，尽量体现类的单一职责。</li>
<li>变量、方法和类的命名要体现业务含义，不能用如s=5、getString()等命名。</li>
<li>新增方法需编写自动化测试案例。</li>
</ul>


<p>守则里面有很多“新增”，新增类、新增方法。
因为对于老旧的代码，要求它们的质量不具有可操作性。
我们只能期望通过要求新增的代码符合要求，来改善至少是维持整个系统的代码质量。</p>

<p>如果团队比较有野心，可能想在“新增”里面包括“更新”，也就是所有“触碰过”的类和方法。</p>

<p>有了守则我们需要一个检查工具，让程序员可以快速地检查和自检。
但一般的代码扫描工具不能针对“新增、更新”进行扫描，我们需要自己的工具。
工具的要点在于如何找出所谓的“新增的类和方法”、“更新的类和方法”。</p>

<p>基本思路是：</p>

<ul>
<li>先找出版本之间的diff，新增的文件和修改过的文件。

<ul>
<li>比如svn，可以用svn的命令行客户端，也有一些java的api。比如svnKit。</li>
</ul>
</li>
<li>对于新增的文件：

<ul>
<li>parse这个文件，找到所有的类和方法，即可找到所有的“新增的方法和类”。</li>
<li>parse可以使用这个：<a href="https://code.google.com/p/javaparser/wiki/UsingThisParser">https://code.google.com/p/javaparser/wiki/UsingThisParser</a></li>
</ul>
</li>
<li>对于修改的文件：

<ul>
<li>parse新版本，找到所有类和方法的起止位置。</li>
<li>parse方法同上。</li>
<li>对比文件的diff结果（这个是按行号列出的更改），就可以发现新增的、更新过的类和方法。</li>
</ul>
</li>
<li>当新增、更新的类和方法得到以后，再综合代码扫描（扫描新版本）的结果报告。比如findbugs、jdepend……
即可得出新增、更新的类和方法的质量指标了。</li>
</ul>


<p>关键代码在这里：<br/>
<a href="https://gist.github.com/nielinjie/d8fa324ee0d1d149c5e2">https://gist.github.com/nielinjie/d8fa324ee0d1d149c5e2</a></p>
]]></content>
  </entry>
  
</feed>
