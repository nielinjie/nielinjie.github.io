<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 质量 | 聂同学]]></title>
  <link href="http://nielinjie.github.io/blog/categories/zhi-liang/atom.xml" rel="self"/>
  <link href="http://nielinjie.github.io/"/>
  <updated>2015-07-28T16:53:00+08:00</updated>
  <id>http://nielinjie.github.io/</id>
  <author>
    <name><![CDATA[nielinjie]]></name>
    <email><![CDATA[nielinjie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[质量保障措施参考清单（三）]]></title>
    <link href="http://nielinjie.github.io/blog/2015/04/10/resilient3/"/>
    <updated>2015-04-10T10:18:14+08:00</updated>
    <id>http://nielinjie.github.io/blog/2015/04/10/resilient3</id>
    <content type="html"><![CDATA[<p>（<a href="/blog/2015/04/10/resilient2/">接上篇</a>）</p>

<h2>业务正确性和容错性</h2>

<p>系统不仅需要业务功能结果正确，还需要在业务发生问题的时候能够尽量多的提供诊断和恢复支持。</p>

<!-- more -->


<h3>设计时</h3>

<p>设计时可以识别的设计要求大致有：</p>

<ul>
<li>业务错误可以回查。</li>
<li>业务过程可以回查。</li>
<li>业务操作可以回查。</li>
<li>系统故障情况下业务（一定程度上）可以持续。</li>
</ul>


<p>为满足此要求，需要：</p>

<ul>
<li>定义业务过程、业务状态。</li>
<li>记录业务过程和状态的变化。</li>
<li>为各个状态定义业务备案。</li>
<li>记录业务操作。</li>
</ul>


<h3>业务接入时</h3>

<ul>
<li>业务被误用。

<ul>
<li>明确的业务定位</li>
</ul>
</li>
<li>系统之间业务状态不正确或不明确。

<ul>
<li>记录业务进出口状态。</li>
</ul>
</li>
</ul>


<h3>日常趋势</h3>

<ul>
<li>事故趋势恶化

<ul>
<li>业务逻辑有问题？</li>
<li>用户体验有问题？

<ul>
<li>用户体验数据</li>
</ul>
</li>
<li>需要事故记录</li>
</ul>
</li>
</ul>


<h3>事故时</h3>

<ul>
<li>系统操作中断，比如可用性事故引起。

<ul>
<li>需要各个状态定义业务备案。</li>
</ul>
</li>
<li>事后发现业务结果不正确。

<ul>
<li>记录业务过程状态变化。</li>
</ul>
</li>
<li>系统错误

<ul>
<li>大范围错误 &ndash; 归结为<a href="/blog/2015/04/10/resilient2/">可用性事故</a>。</li>
<li>局部错误 &ndash; 归结为bug。</li>
<li>需要系统错误率实时监控和报警。</li>
<li>需要系统错误持续记录和分析。</li>
</ul>
</li>
</ul>


<h3>小结</h3>

<p>综上，为持续保障系统正确性，需要采取的措施有：</p>

<ul>
<li><strong>明确的业务定位。</strong>以及定期review。</li>
<li><strong>定义各个业务过程、业务状态。</strong></li>
<li><strong>业务过程和业务状态的变化的记录。</strong></li>
<li><strong>各个状态定义业务备案。</strong></li>
<li><strong>业务操作的记录。</strong></li>
<li><strong>业务进出口状态的记录。</strong></li>
<li><strong>用户体验数据持续记录和分析。</strong></li>
<li><strong>系统错误率持续监控和阙值报警。</strong></li>
<li><strong>系统错误持续记录和分析。</strong></li>
<li><strong>事故记录与分析。</strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[质量保障措施参考清单（二）]]></title>
    <link href="http://nielinjie.github.io/blog/2015/04/10/resilient2/"/>
    <updated>2015-04-10T10:18:14+08:00</updated>
    <id>http://nielinjie.github.io/blog/2015/04/10/resilient2</id>
    <content type="html"><![CDATA[<p>（<a href="/blog/2015/04/09/resilient/">接上篇</a>）</p>

<h2>可用性</h2>

<p>可用性风险通常比较被重视，企业默认架构中往往有较多应对措施。而且很多可用性风险与<a href="/blog/2015/04/09/resilient/">性能与容量风险</a>有关，所以这里总结的风险和保障措施显得比较少。</p>

<!-- more -->


<h3>设计时</h3>

<p>企业默认架构中一般包含可用性的基本应对：</p>

<ul>
<li>HA方案，比如热备冷备及相关切换方案等。</li>
<li>容灾方案</li>
</ul>


<h3>业务接入时</h3>

<p>一般不会产生可用性风险。除非超过系统容量造成系统不可用。这个风险<a href="/blog/2015/04/09/resilient/">在“性能与容量”部分讨论</a>。</p>

<h3>日常趋势</h3>

<ul>
<li>事故趋势恶化。</li>
<li>资源消耗异常。（<a href="/blog/2015/04/09/resilient/">在“性能与容量”部分讨论</a>。）</li>
</ul>


<h3>事故时</h3>

<p>可用性事故一般有：</p>

<ul>
<li>系统失去响应

<ul>
<li>容量问题造成的。（<a href="/blog/2015/04/09/resilient/">在“性能与容量”部分讨论</a>。）</li>
<li>某个（某些）节点失去响应造成。

<ul>
<li>需要各节点可用性数据。</li>
<li>节点可拔插。</li>
</ul>
</li>
</ul>
</li>
<li>系统大范围报错

<ul>
<li>诊断用现场实时数据。（<a href="/blog/2015/04/09/resilient/">在“性能与容量”部分讨论</a>。）</li>
</ul>
</li>
</ul>


<p>为及时发现可用性事故，我们需要：</p>

<ul>
<li>可用性数据实时监控和报警</li>
</ul>


<h3>小结</h3>

<p>综上，为持续保障系统可用性，需要采取的措施有：</p>

<ul>
<li><strong>预先设计的HA和容灾方案。</strong></li>
<li><strong>事故记录与分析。</strong></li>
<li><strong>可用性数据持续监控与阙值报警。</strong></li>
<li><strong>各节点可用性实时数据。</strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[质量保障措施参考清单（一）]]></title>
    <link href="http://nielinjie.github.io/blog/2015/04/09/resilient/"/>
    <updated>2015-04-09T10:18:14+08:00</updated>
    <id>http://nielinjie.github.io/blog/2015/04/09/resilient</id>
    <content type="html"><![CDATA[<p>为更好的应对业务快速变化带来的挑战，许多系统正在从“关联系统”角色向着“<a href="/blog/2015/04/09/service/">服务</a>”角色转变。这样的转变对系统各方面质量特别是运行时质量提出了不一样的要求。如何管理并始终满足这些要求，打造弹性、容错、可管理的服务，是我们需要重点考虑的问题。</p>

<!-- more -->


<p>作为“<a href="/blog/2014/03/31/aa1/">风险驱动的架构设计</a>”的实践者，我们以系统运行过程各个阶段可能遇到的风险为线索，整理我们可能采取的保障措施。——</p>

<ul>
<li>设计时</li>
<li>业务接入时</li>
<li>日常趋势</li>
<li>事故时</li>
</ul>


<h2>性能和容量</h2>

<h3>设计时</h3>

<p>需要根据业务目标确定适当性能理想值。比如：</p>

<ul>
<li>响应时间</li>
<li>吞吐量</li>
</ul>


<h3>业务接入时</h3>

<p>新的业务接入，不论是新的系统接入还是旧有接入系统业务量发生变化。</p>

<ul>
<li>新系统接入时应该声明业务量和变化趋势。</li>
<li>接入系统业务量（即将）发生显著变化时应该声明。</li>
<li>需要知晓当前系统可以承受的业务量。</li>
</ul>


<h3>日常趋势</h3>

<p>系统运行中，几个方面的风险需要持续防范：</p>

<ul>
<li>性能表现恶化</li>
<li>业务量异常变化</li>
<li>资源消耗异常变化</li>
</ul>


<p>为此，我们需要：</p>

<ul>
<li>性能指标的周期性监控记录。</li>
<li>业务总量的周期性监控记录。</li>
<li>各接入系统业务量周期性监控记录。</li>
<li>资源消耗量周期性监控记录。</li>
</ul>


<h3>事故时</h3>

<p>性能事故指的是性能表现发生急剧恶化，用户受到明显影响。性能事故的原因可以分两种情况分析——</p>

<ul>
<li>业务量发生变化

<ul>
<li>各接入系统业务量及调用量。</li>
<li>隔离、特别是热隔离。</li>
<li>扩展性，特别是横向扩展。</li>
</ul>
</li>
<li>业务量没有明显变化

<ul>
<li>受依赖系统拖累

<ul>
<li>依赖系统调用记录。</li>
<li>替代方案或后备方案。</li>
</ul>
</li>
<li>某（些）节点性能异常

<ul>
<li>各节点的性能数据。</li>
<li>节点可（热）拔插。</li>
</ul>
</li>
<li>变更 &ndash; 环境、代码

<ul>
<li>诊断用现场数据</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>为及时发现性能事故和区分两种情况，我们需要：</p>

<ul>
<li>性能数据，实时监控和阙值报警。</li>
<li>总业务量，包括时间和功能分布。</li>
</ul>


<h3>小结</h3>

<p>综上，为持续保障系统性能表现，需要采取的措施有：</p>

<ul>
<li><strong>根据业务目标有适当的性能和容量的理想值。</strong>影响因素变化后或者周期性地需要review。</li>
<li><strong>明确当前系统最大承受业务量。</strong>影响因素变化后或者周期性地需要review。</li>
<li><strong>确保新系统接入或接入系统业务量变化时声明业务量和变化趋势。</strong>建立机制，包括事后回朔机制。</li>
<li><strong>系统性能指标的阙值报警。</strong></li>
<li><strong>系统性能指标的持续监控记录和分析。</strong></li>
<li><strong>业务总量的持续监控和分析。</strong></li>
<li><strong>各接入系统业务量持续监控和分析。</strong></li>
<li><strong>资源消耗量持续监控和分析。</strong></li>
<li><strong>各接入系统业务量及调用量实时数据。</strong></li>
<li><strong>有能力实时隔离接入系统。</strong></li>
<li><strong>容量可扩展性，特别是横向扩展。</strong></li>
<li><strong>依赖系统调用记录的实时数据。</strong>包括调用量和性能。</li>
<li><strong>依赖系统替代方案或后备方案。</strong>至少有业务层面后备方案。</li>
<li><strong>各节点的性能指标的实时数据。</strong></li>
<li><strong>各节点可（热）拔插。</strong>拔出后性能和容量可接受。</li>
<li><strong>诊断用现场实时数据。</strong>各节点都需要此类数据，比如线程dump。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给老爷爷系统（四）：如何描述系统？（三）]]></title>
    <link href="http://nielinjie.github.io/blog/2014/06/07/view3/"/>
    <updated>2014-06-07T18:06:38+08:00</updated>
    <id>http://nielinjie.github.io/blog/2014/06/07/view3</id>
    <content type="html"><![CDATA[<blockquote><p>这是一个老爷爷系统。</p></blockquote>

<p>这一篇讲讲如何实现的问题。</p>

<!-- more -->


<p>实现方面主要考虑了两个要点：</p>

<ul>
<li>如何构建和维护：要快速地建立和编辑，能够加入版本管理，能够在各方面间共享。</li>
<li>如何展现：各方面要容易地挂载自己的关注点数据，同时跨角色观察的需求要求框架能同时挂载多方面的数据。</li>
</ul>


<p>我们为这两个要点选择了两种不同的形式。</p>

<p>一方面在构建和维护时，特征描述采用纯文本方式，可以说是一种简单地DSL。
DSL文件很方便人和机器阅读，同时放入SCM，实现版本管理和角色间共享。</p>

<p>```
审批/逐个审批</p>

<pre><code>-i 查看签报详细信息
-i 输入审批意见
    -g 使用默认意见
    -g 手工输入意见
    -g 语音输入意见
-i 选择用户
签报
用户
</code></pre>

<p>批量审批</p>

<pre><code>-e 逐个审批
-i 查看待处理文件列表
-i 点击审批按钮
</code></pre>

<p>……
```</p>

<p>另一方面在展现时，我们解析DSL，图形化交互式（并且略显炫酷滴 :-D）地展示。
下面展示的是目前的状况。</p>

<ul>
<li>左边的图，是“系统特征”，由黄色椭圆形表示的领域过程、绿色圆形表示的领域实体，以及他们之间的连线构成。</li>
<li>右边的下拉菜单，是由各方面提供的关注点数据，可以按需要附加到“系统特征”上。比如这个截图上，
左边的图上面有个红色的大圆，就是将代码质量数据叠加上来。还有个深绿色的小点，是将代码结构的数据叠加上来。</li>
<li>除了可以以叠加的方式展示数据，还可以根据关注点数据对图进行过滤。</li>
</ul>


<p><img src="/images/view/view3.png"></p>

<p>最后，代码在此：<a href="http://github.com/nielinjie/developTools">http://github.com/nielinjie/developTools</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给老爷爷系统（三）：如何描述系统？（二）]]></title>
    <link href="http://nielinjie.github.io/blog/2014/06/06/view2/"/>
    <updated>2014-06-06T18:06:38+08:00</updated>
    <id>http://nielinjie.github.io/blog/2014/06/06/view2</id>
    <content type="html"><![CDATA[<blockquote><p>这是一个老爷爷系统。</p></blockquote>

<p>上一篇谈到统一的系统特征描述的形式问题。觉得“功能”或者“领域模型”可能可以承担这个重任。</p>

<!-- more -->


<p>但功能和领域模型都不能直接使用：</p>

<ul>
<li>功能的问题是很难跟代码直接关联起来。</li>
<li>领域模型的问题是只有开发同学熟悉这个概念。SA、测试、开发经理等同学比较熟悉的是“功能”这个概念，
虽然他们对这个概念的定义不尽相同。</li>
</ul>


<p>我们希望我们的特征描述既可以将各方面关注点都联系起来，又可以让各方面都工作在自己熟悉的概念上。
于是我们尝试使用一种二者的混合体。</p>

<ul>
<li>从领域模型出发，以便我们能跟代码产生联系<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。代码非常重要，因为在运行时，代码决定的逻辑基本上是系统的一切。</li>
<li>弱化领域对象的定义，只描述它是否存在和与其他对象的关系<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。领域对象的定义显然是重要的，但我们现在要的是“框架”。</li>
<li>强调领域过程，弱化领域实体。实体常常被认为是分析的结果，看上去和“功能”没有关系，有些方面的同学不关注。</li>
<li>领域过程之间的关系划归为三种：Include、Extend、Generalization<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。</li>
<li>领域过程与实体间，只有一种，引用关系。实体与实体间的关系，不再描述。</li>
</ul>


<p>总的来说，这是领域模型的一种裁剪，或者可能更准确地说法，是一种遮挡：暴露大家的共同关注点，隐藏其他。</p>

<p>（<a href="/blog/2014/06/07/view3">再下篇继续</a>）</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>逻辑按领域结构划分，在这个系统没完全实现：<a href="/blog/2014/06/09/refactory">重构</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>领域模型是一个领域对象的结构，<a href="/blog/2014/06/07/structure">结构的要素</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>没错，跟UML use case图里面的三种关系相同。这并非偶然，我们认为所有的过程之间，都是这三种关系。<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
