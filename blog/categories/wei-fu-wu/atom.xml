<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 微服务 | 聂同学]]></title>
  <link href="http://www.nietongxue.xyz/blog/categories/wei-fu-wu/atom.xml" rel="self"/>
  <link href="http://www.nietongxue.xyz/"/>
  <updated>2016-12-21T20:56:34+08:00</updated>
  <id>http://www.nietongxue.xyz/</id>
  <author>
    <name><![CDATA[nielinjie]]></name>
    <email><![CDATA[nielinjie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[一帮成功的微服务]]></title>
    <link href="http://www.nietongxue.xyz/blog/2016/04/13/good-ms/"/>
    <updated>2016-04-13T13:39:21+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2016/04/13/good-ms</id>
    <content type="html"><![CDATA[<p>一帮（可能比较）成功的微服务<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。Enjoy 😂</p>

<!--more-->




<iframe height=498 width=510 src="http://player.youku.com/embed/XMTY5NjA5NTUy" frameborder=0 allowfullscreen></iframe>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="/blog/2015/11/29/oc/">Orchestration 和 Choreography</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在发展中团队：微服务？]]></title>
    <link href="http://www.nietongxue.xyz/blog/2016/01/05/dev-micro/"/>
    <updated>2016-01-05T10:08:59+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2016/01/05/dev-micro</id>
    <content type="html"><![CDATA[<p>当系统成长的时候，大家都想到“微服务”。</p>

<!--more-->


<p>微服务太火，好像成了理所当然。但应该考虑微服务是否适于这个团队。</p>

<p>对于微服务本身，正反两方驱动力讲得比较多了<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p>

<p>而微服务落实到团队，需要考虑更多：文化需要推广？团队需要重组？技能需要学习？过程可能调整？平台需要验证？……</p>

<p>对照团队现状和发展步调，我们必须知道能得到什么，又需要付出什么。</p>

<p>想要提高可用性？可能只需要多份部署。</p>

<p>想要改善逻辑结构？可能只需要开发时模块化。</p>

<p>想要错误隔离？可能只需要分布式。</p>

<p>想要解耦和可重用化？可能只需要服务化。</p>

<p>……</p>

<p>微服务是一套工具，而不是一件。团队可以做出裁剪，也可以做出渐进策略。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="/blog/2015/12/01/micro/">微服务的“微”</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微服务的微（下）]]></title>
    <link href="http://www.nietongxue.xyz/blog/2015/12/15/micro2/"/>
    <updated>2015-12-15T15:16:01+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2015/12/15/micro2</id>
    <content type="html"><![CDATA[<p>那么，微服务应该强调什么微呢？</p>

<!--more-->


<p>统筹的微，约定的微，技术的微，框架的微。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微服务的微]]></title>
    <link href="http://www.nietongxue.xyz/blog/2015/12/01/micro/"/>
    <updated>2015-12-01T15:16:01+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2015/12/01/micro</id>
    <content type="html"><![CDATA[<p>微服务的微，是指服务粒度的微么？</p>

<!--more-->


<p>微服务可能是由此得名的。但在微服务架构思想中，服务粒度的微，不应该放在首要强调的位置。</p>

<p>微服务架构的思想中，服务的粒度是能找到明确依据的。它由正反两个方向的力相互平衡决定。</p>

<p>驱动服务分割变小的正向力是解耦带来的收益。这个可以从几个方面考察——业务、团队、技术栈、运行时。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>反向力是服务分割变小后带来的问题，目前看来最难解决的是性能和数据一致性。服务的粒度越小，需要协作的服务数量越多，性能和一致性方面的影响就越大。</p>

<p>对于这两个力的平衡，不同的业务，不同的团队，不同的进化方向等等，多种因素决定了结果并不相同。正向力大一些，服务的粒度就小一些，服务就微一些，否则，服务就没那么微。</p>

<p>这样一来，服务是不是微、有多微，并不由微服务架构思想本身决定。甚至一种可能的合理结果是：运用微服务的思想分析之后，却发现使用单体架构更为合理。</p>

<p>所以，微服务的微，并不强调服务粒度的微。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>前面有详细讨论，参见<a href="/blog/2015/06/28/monolithf/">《单体优先还是微服务？》</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Orchestration 和 Choreography]]></title>
    <link href="http://www.nietongxue.xyz/blog/2015/11/29/oc/"/>
    <updated>2015-11-29T15:01:02+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2015/11/29/oc</id>
    <content type="html"><![CDATA[<p>Orchestration 和 Choreography，这个两个词在跟“服务”有关的架构讨论中常有出现。比如微服务和SOA。</p>

<!--more-->


<p>如果直译的话，这两个词一个是“编曲”，一个“编舞”。</p>

<p>编曲和编舞都是编。编就是安排、设计。不论是微服务的服务还是SOA的服务，要想沟通协同，合力完成业务请求，都是需要安排设计的。</p>

<p>但二者编排的对象不同，一个是曲一个是舞。特别是，按照词的本意，这里的“曲”指的是“管弦乐曲”，是相对复杂宏大的演奏。</p>

<p>曲和舞有什么区别呢？</p>

<ol>
<li>曲需要指挥，舞不需要。乐者在演奏时，需要指挥随时指挥协调。而舞者则不需要，按照事前安排做好自己就行。需要跟其他舞者合作时，也由自己直接沟通完成。</li>
<li>曲分工复杂，舞比较简单。管弦乐曲演奏需要多种不同乐器多种不同乐者，要求彼此配合得当，才能演出成功。而舞蹈没那么多分工，即使是大型舞蹈，台上人多，但角色也就数种而已。</li>
<li>曲比较严肃，舞比较宽松。乐者的演奏和配合一丝不苟，少有随性。舞者则有较多的个人发挥空间。</li>
</ol>


<p>SOA的理念是自上而下，比较多的依赖于集中安排，运行时也需要明确的中间件进行中央控制协调。边界内有多种类型的服务，相互之间严密配合。SOA的风格类似于编曲。</p>

<p>跟SOA相比，微服务风格更类似于编舞。边界内的服务遵循简单的约定，负责一个特定的领域。他们的地位相似，实现方式和沟通方式由自己选择。</p>

<p>编曲和编舞是一种形象的比喻，并不会完全精确。架构师编排服务的时候不要照抄。</p>
]]></content>
  </entry>
  
</feed>
