<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rest | 聂同学]]></title>
  <link href="http://www.nietongxue.xyz/blog/categories/rest/atom.xml" rel="self"/>
  <link href="http://www.nietongxue.xyz/"/>
  <updated>2018-01-20T17:48:48+08:00</updated>
  <id>http://www.nietongxue.xyz/</id>
  <author>
    <name><![CDATA[nielinjie]]></name>
    <email><![CDATA[nielinjie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[REST]]></title>
    <link href="http://www.nietongxue.xyz/blog/2012/12/05/said-20121205/"/>
    <updated>2012-12-05T21:36:38+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2012/12/05/said-20121205</id>
    <content type="html"><![CDATA[<p>不是REST就别说是REST，可以说是json-rcp，又不丢人。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于REST风格的讨论（二）]]></title>
    <link href="http://www.nietongxue.xyz/blog/2012/10/29/rest2/"/>
    <updated>2012-10-29T21:36:38+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2012/10/29/rest2</id>
    <content type="html"><![CDATA[<p>参与到讨论中的架构师只有两三位。看来公司内对REST有看法的同学并不多。邮件如下。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<!-- more -->


<p>其中，XN是这次公司里负责研究和介绍REST的主要人员，通过讨论，我理解这次侧重于研究的是<strong>展示逻辑部署于浏览器端</strong>这种应用模式，以及如何以这种模式替换目前广泛使用的类似SpringMVC的服务器端展示逻辑。其中浏览器到服务器端的HTTP接口，用到了类似REST形式。对于REST本身的内涵和意义，这次并没有作为重点关注。</p>

<h3>答复: 关于REST风格 - NLJ（我）</h3>

<p>感谢大家参加讨论，对XN和CH的观点回复如下，供大家批评。</p>

<ul>
<li>缓存

<ul>
<li><p>我理解缓存是REST最基本的优点之一。</p></li>
<li><p>“在WEB层框架上处理全局的数据缓存是不合适的”这个观点是同意的，没有异议，但我理解也不应该在框架层禁用缓存，比如XN在先前的邮件中提到的“所有REST请求与.do是一样的，都禁用浏览器缓存的，这个是由一个拦截器来完成的。”</p></li>
<li><p>“是否使用缓存”跟“XX框架是否有控制缓存实现”是两个层面的事情，我理解不能因为Spring3REST框架不支持控制缓存就禁用缓存。我们都知道缓存是由HTTP 头控制的，就算是最基本的直接写servlet也是可以操作HTTP头的。</p></li>
<li><p>前面CH提到的缓存安全性跟cookie一样，这个有点问题。</p>

<ul>
<li><p>缓存不仅仅指浏览器上的缓存，还包括整个HTTP链路上的缓存，比如proxy上的，所以不像cookie只存在于某个人私人的机器上。</p></li>
<li><p>Cookie一般不会存放实际业务数据，比较多是些id、token之类的，即使泄露，风险也比较小。</p></li>
</ul>
</li>
</ul>
</li>
<li>会话

<ul>
<li>看来大家意见没有明显的差异。</li>
</ul>
</li>
<li>资源

<ul>
<li><p>资源的划分，是个业务问题。而DTO，Form，表，Service这些都是实现问题。在划分资源时是不会看到实现上的任何概念的。如果划分的结果，一个资源的范围和Form（或者DTO，表）一样，那也仅仅是巧合而已。</p></li>
<li><p>我理解划分资源通常是设计REST接口的时候，其依据是业务实体和业务过程对业务实体的使用，而不是某个系统某个功能对它的使用方式。因为一个资源不是为一个系统一个功能服务的，而是为一个业务一个企业服务的，它不知道使用它的会是谁，会是什么方式。</p></li>
<li><p>“各类终端(IOS/html/android)等的Form应该是统一的”这个不太理解，我理解即使在同一个平台上，不同的操作上下文中，也存在同一个业务对象映射到不同Form的情况。比如一个订单，有可能在一个页面上被扼要展示，在另一个页面上却详细展示，在可打印页面上又是另一种展示方式。Form的概念，完全是一个展示逻辑的概念，不是业务逻辑的概念。</p></li>
</ul>
</li>
<li>HTTP远程调用

<ul>
<li>既然作出了PF-REST，为什么不是推广REST？是因为REST不是我们的方向，还是感觉现阶段实现不了？</li>
</ul>
</li>
</ul>


<h3>答复: 关于REST风格 - XN</h3>

<ul>
<li><p>缓存</p>

<p>我所理解的REST，它是与MVC一样，是一个基于HTTP协议的WEB层框架。在WEB层框架上处理全局的数据缓存是不合适的，比较多的是会话级别的(HTTPSession)。</p>

<p>数据缓存本身涉及数据完整性，是要很小心地控制的。</p>

<p>通过HTTP响应头控制浏览器的缓存，Spring3REST好像没有相应实现，还是我没有发现？其它的REST框架有实现？是否有例子？</p></li>
<li><p>会话</p>

<p>实际情况是，会话级别的缓存不可避免，大部分在应用需要登陆，至少uid需要缓存的。</p></li>
<li><p>资源</p>

<p>首先，资源抽象依据是什么？DTO？表?
如果是DTO或表，那要Services干什么?</p>

<p>所以PF-REST提出以Form表单为抽象依据，各类终端(IOS/html/android)等的Form应该是统一的。</p></li>
<li><p>HTTP远程调用</p>

<p>其实，PF推广的就是基于接口、REST风格的前后端分工开发模式，以区别MVC开发模式，不是推广REST本身，一切还是HTTP协议。</p></li>
</ul>


<h3>答复: 关于REST风格 - CH</h3>

<p>没有去听这个分享，就我理解对于缓存部分有些看法：</p>

<ul>
<li><p>服务端缓存</p>

<p>我同意NLJ的说法，没有一概而论不适合缓存的情况,能缓存的数据都是指允许在缓存更新周期内不一致的数据，</p>

<p>数据自身属性决定是否适合缓存，和REST不REST有啥关系呢？</p>

<p>具体做法上，直接利用Spring的基于方法参数的缓存和REST结合最合适，比如URL中有一部分代表方法，有一部分代表参数，在REST的实现方法中调用Service接口时传入这个参数，就可以把缓存做这个Service的接口方法上。</p></li>
<li><p>客户端缓存</p>

<p>REST接口一般返回JSON或者XML，这个json或者xml实际是可以当作普通图片这样的资源缓存在浏览器缓存中，只要服务端有控制Etag和失效日期，这样的话重复请求时服务端返回304，实际结果是直接来自于IE缓存的。</p>

<p>至于安全性，我觉得这个和cookie在IE中存放是一个级别的，既然cookie都可以，那么这个缓存为啥不可以？</p></li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>邮件按时间倒序，已经对人名和涉及到公司的专用名字做了更改。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于REST风格的讨论]]></title>
    <link href="http://www.nietongxue.xyz/blog/2012/10/25/rest/"/>
    <updated>2012-10-25T21:36:38+08:00</updated>
    <id>http://www.nietongxue.xyz/blog/2012/10/25/rest</id>
    <content type="html"><![CDATA[<p>近来，公司有关同事对REST风格和在企业应用中的使用（特别是b/s架构的应用中用于浏览器端于服务器端通信）做了研究，并提出了应用模式。但有些想法我个人并不认同，于是向公司架构师邮件列表发出了讨论邮件，现在也把邮件内容<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>贴在这里，希望与大家讨论批评，后续会持续将其他架构师的回复追加进来。</p>

<!-- more -->


<p>大家好——</p>

<p>最近XN做了关于PF REST风格接口的分享。逐渐也会有些项目采用这样的架构模式。</p>

<p>最近也对REST做了些学习，有些相关的想法，想跟大家讨论下，请大家批评。</p>

<p>Ps：由于时间冲突没有参加这个分享，如果这些问题大家已经充分讨论过了，请大家原谅，有空的话告知一下讨论结果。</p>

<h3>缓存</h3>

<ul>
<li><p>PF-REST框架不使用HTTP缓存。跟XN讨论了下，XN认为为了保证客户机和服务器数据一致， 所有HTTP方法，包括get，都不宜使用缓存，所以在框架级别禁止了HTTP缓存。</p>

<p>这里有一点不同意见，我认为缓存是否会破坏数据一致，要由具体的应用场景决定，例如，有些场景，很多数据是不需要修改的，（比如需要展示“行政机构树”），这时候，get这些数据的缓存完全不会破坏不一致性。</p>

<p>我理解，资源是否过期，何时过期，有其业务意义，是否要缓存，如何缓存，由业务和应用场景决定，框架（或者说模式）不应该限定使用或不使用缓存。</p></li>
<li><p>缓存的安全性。如果使用缓存，则缓存暴露在客户端或者HTTP链路上，如何保证这部分缓存只被特定的用户使用。</p>

<p>比如，有资源…./orders/user/ladygaga, 表示ladygaga能看到的所有order的集合。这部分资源被缓存后如何做到不被别的访问者访问？</p>

<p>这个问题我个人还没有答案，看了些资料，感觉比较靠谱的有一种：每次请求都到服务器进行认证授权。服务器如果认证授权成功，则返回304和缓存马上过期的命令。这样既可以利用链路上的缓存，也可以迫使下次请求先到服务器认证授权。但劣势是每次都必须访问服务器。</p></li>
</ul>


<h3>后端会话状态</h3>

<ul>
<li><p>REST提倡的是服务器端无会话状态，这点PF-REST框架没有提到。而目前我们开发习惯也往往要在服务端保存会话状态，特别是用户信息往往在认证后就保存在会话中。</p>

<p>我个人理解会话状态之所以不提倡，是防止破坏get方法的幂等和安全性，以至于缓存等优势无法发挥。如果会话数据在会话过程中是不变的，其实不会有这个问题，所以如果会话状态中仅保存用户的不变（在会话时间范围内）的信息，应该不存在问题，比如用户名、权限、组织结构之类。</p></li>
</ul>


<h3>资源</h3>

<ul>
<li><p>资源是REST风格的核心和特点，资源的业务意义和粒度对REST风格好处的发挥非常重要。如果粒度不合适，有些REST风格的好处就无法实现。</p>

<p>比如，如果把资源的粒度放在操作级别，则可能将资源与资源的操作方式，也就是客户端绑在一起了。例如资源order，在手机上，显示少量信息，在大屏幕web上，显示全面信息。如果在操作级别来划定资源的话，这就是两种资源（叫orderMobile和orderWeb?），显然这样就把后台与客户端做了绑定。试想，如果来了一种新客户端，显示不多不少的信息，那是否要增加一种资源类型？</p>

<p>PF-REST以Form<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> 来划分资源，我理解就是从操作级别来划分资源。把资源与操作过程进行了耦合。</p></li>
</ul>


<h3>REST vs. 普通HTTP远程调用</h3>

<ul>
<li><p>REST风格是HTTP远程调用模式的一种，但不是普通的HTTP远程调用。</p>

<p>目前的PF-REST框架重点提到的静态html页面加HTTP的接口，我理解普通HTTP远程调用模式也可以做到，并没有突出说明REST的特点。</p>

<p>REST的特点到底能带来什么好处，特别是在既有的企业架构下能带来什么好处，希望跟大家一起多多讨论。</p></li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>已经对人名和涉及到公司的专用名字做了更改。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Form是沿用自Spring MVC的Form概念。<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
