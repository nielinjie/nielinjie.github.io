---
layout: post
title: "过程管理作为一个基础模式"
date: 2016-09-26 14:29:52 +0800
comments: true
categories: ["架构","模式"]
published: true
---


前篇[^2]提到，事务管理，包括分布式事务，实质是一个过程管理。

过程管理作为一个基础模式，实践中越来越常见，所以研究下。
<!--more-->

### 场景

过程管理出现在多个典型场景中 - 

- 事务管理 - 负责管理各个相关联的操作，对他们的“状况“[^1]做出决策应对。
- 服务编排 - 负责将小粒度和职责单一的服务组合为复杂的业务过程。
- 协调异步 - 负责异步操作之间的步调协调工作。
- 交互串联 - 负责将多个业务步骤包装为一个用户友好的交互过程。

这几个场景在系统中的位置常常相似，但不同场景中管理职责不同，需要处理的侧重点也有不同 - 

* 事务管理 - 强调操作状况的可见、可控、可稽核。
* 服务编排 - 强调任务间的依赖管理，任务结果的传递和收集。
* 协调异步 - 强调操作间的步调协同，与同步的转化，处理等待，处理中间状态。
* 交互串联 - 强调与用户的交互，比如处理中间状态的表现，过程中用户的干预等。

### 抽象

* 过程管理的抽象中，

### 实现

* 一般的过程管理，常常被实现为状态机。每个子过程对应一个状态，各个子过程间的依赖由状态间的转移来实现，子过程本身的状态变化实现为组织状态（Composite State）。
* 状态机的实现框架中，目前比较新的是Spring Statemachine[^3]，支持状态的持久化、分布等功能。


### 挑战

* 这里比较大的挑战是：实际情况中一个管理组件常常兼职上述职责中的两项甚至三项四项。子过程之间的协同逻辑就混合了多个职责的策略，这些决策之间可能不一定相容，甚至对子过程的划分、过程图的定义都有分歧。

(图)

[^1]: 前文定义 - [《分布式事务，也谈》](/blog/2016/09/19/transaction/)
[^2]: 前篇  - [《分布式事务，也谈》](/blog/2016/09/19/transaction/)
[^3]: [Spring Statemachine](http://projects.spring.io/spring-statemachine/)