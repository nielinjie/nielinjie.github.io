---
layout: post
title: "分布式事务，也谈"
date: 2016-09-19 17:16:43 +0800
comments: true
categories: ["架构"]
published: true

---

近来有挺多文章谈“分布式事务”。
这些文章主要是从实现模式角度来谈的。比如常见的模式有哪些，哪些个模式适合哪种场景，有什么优点缺点，根据什么选择等等。比如附图的这个红绿灯图[^1]，是其中的优秀代表。很有指导作用。

这个“也谈”不重复，从其他角度谈一些认识。

<!--more-->

### 一

“分布式事务”到底是什么？

1. 分布式事务本质上是对一个过程进行管理。
2. 这个过程由一些操作构成，特别是由一些容易出问题的操作构成。
3. 管理者的职责是尽量调用这些操作。
4. 管理者的职责是做出决策。当某些操作成功或失败时其他操作如何处置。
5. 虽然不是事务管理的核心职责，但管理者可能顺便也要处理，各个操作之间如何调度，结果如何归纳。

### 二

为了完成管理的职责，管理者必须清楚操作的哪些特性？

1. 操作的结果如何可知？是否需要可知？
2. 操作是否可以重试，如何重试？
3. 操作是否可以撤销，如何撤销？

归纳为两类：一类是了解状况，一类是采取行动。两者是相互关联的，比如如果操作是可以重试的，就不用特别处理结果不可知的情况，一旦未知（比如超时），就重试到确知为止。

### 三

为了完成管理职责，管理者需要有一套决策规则，例如 - 

操作A | 操作B | 策略
----|----|----
成功|失败
未知|未尝试



### 四
所有常见的实现模式，都是对上述要点的实现。-

1. Saga - 最为一般的模型
2. 补偿 - 简化的模型，一般用于处理顺序执行的操作，一旦某个操作失败，对已经成功的操作全部进行补偿——撤销操作的一种实现。
4. TCC - 可以做到在事务过程中外界对操作不可见，也就是做到“隔离性”，但其实这个特性并不是由操作的管理者决定的，而是由操作的提供者决定的，通过将一个普通的业务操作分拆为相关联的两个，操作提供者实现了操作对外部的不可见，但同时两个操作之间需要一个状态的维护，这必然影响吞吐量伸缩性等质量。
5. 可靠事件 - 可靠事件模式并非是一个完整的管理，只是管理者调用操作的途径。这个途径的底层机制决定了管理者可以假定操作总会成功（或者说就当它都成功了）。所以对过程的管理就可以比较简单了。管理者不需要再处理结果可知、重试、撤销等问题。
6. 两段、三段 - 




{% img  /images/transaction/transaction.jpg 500 %}

[^1]: 原文：[分布式事务：不过是在一致性、吞吐量和复杂度之间，做一个选择](http://www.open-open.com/lib/view/open1473404638516.html)