---
layout: post
title: "与复杂同行（二）"
date: 2016-12-21 20:23:46 +0800
comments: true
categories: ["架构"]
series: ["与复杂同行 1"]
published: false
---

前面一篇已经涉及到了面对复杂时的常见策略。 <!--more-->

* （A）拆分系统。规模越小，复杂性越小。但拆分造成的跨空间连接可能带来额外的复杂性。
* （B）注意拆分的位置。从不同的地方拆分，造成不同的跨空间连接。
* （C）减少跨空间连接的成本。与一般连接一样，跨空间连接要尽量减小成本。
* （D）通过增加一些技术性的元素，来减少跨空间连接。同时设法减少技术性元素的成本。

日常开发中的很多模式与做法，都是对上面的策略的一些应用。

1. 内聚与解耦。
   1. 有关系的，放在一起，内聚。因为相互之间连接太多，分开则太多跨空间连接。（B）
   2. 没关系的，放在分开，解耦。因为要拆分系统，减小规模。（A）
2. 面向接口。
   1. 将两个部分的关联统一为“接口”，消除其他关联。（D）
   2. 接口保持简单、稳定，减小接口本身带来。（C）
   3. 接口的版本兼容。（D）
3. //TODO








1. 隔离：
   1. 变与不变
   2. 专用与通用？
   3. 不同特征要求，隔离？是什么原理？
2. 协议。
   1. 协议要简单稳定，
   2. 特别是在异构系统间使用
3. 全职团队。
4. 事务脚本、表驱动、领域驱动



